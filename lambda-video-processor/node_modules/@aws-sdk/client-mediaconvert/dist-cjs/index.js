'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');
var uuid = require('@smithy/uuid');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "mediaconvert",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class MediaConvertClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultMediaConvertHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class MediaConvertServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, MediaConvertServiceException.prototype);
    }
}

const ShareStatus = {
    INITIATED: "INITIATED",
    NOT_SHARED: "NOT_SHARED",
    SHARED: "SHARED",
};
const SimulateReservedQueue = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const JobStatus = {
    CANCELED: "CANCELED",
    COMPLETE: "COMPLETE",
    ERROR: "ERROR",
    PROGRESSING: "PROGRESSING",
    SUBMITTED: "SUBMITTED",
};
const StatusUpdateInterval = {
    SECONDS_10: "SECONDS_10",
    SECONDS_12: "SECONDS_12",
    SECONDS_120: "SECONDS_120",
    SECONDS_15: "SECONDS_15",
    SECONDS_180: "SECONDS_180",
    SECONDS_20: "SECONDS_20",
    SECONDS_240: "SECONDS_240",
    SECONDS_30: "SECONDS_30",
    SECONDS_300: "SECONDS_300",
    SECONDS_360: "SECONDS_360",
    SECONDS_420: "SECONDS_420",
    SECONDS_480: "SECONDS_480",
    SECONDS_540: "SECONDS_540",
    SECONDS_60: "SECONDS_60",
    SECONDS_600: "SECONDS_600",
};
const JobsQueryFilterKey = {
    audioCodec: "audioCodec",
    fileInput: "fileInput",
    jobEngineVersionRequested: "jobEngineVersionRequested",
    jobEngineVersionUsed: "jobEngineVersionUsed",
    queue: "queue",
    status: "status",
    videoCodec: "videoCodec",
};
const Type = {
    CUSTOM: "CUSTOM",
    SYSTEM: "SYSTEM",
};
const Format = {
    matroska: "matroska",
    mp4: "mp4",
    mxf: "mxf",
    quicktime: "quicktime",
    webm: "webm",
};
const Codec = {
    AAC: "AAC",
    AC3: "AC3",
    AV1: "AV1",
    AVC: "AVC",
    C608: "C608",
    C708: "C708",
    EAC3: "EAC3",
    FLAC: "FLAC",
    HEVC: "HEVC",
    JPEG2000: "JPEG2000",
    MJPEG: "MJPEG",
    MP3: "MP3",
    MP4V: "MP4V",
    MPEG1: "MPEG1",
    MPEG2: "MPEG2",
    OPUS: "OPUS",
    PCM: "PCM",
    PRORES: "PRORES",
    QTRLE: "QTRLE",
    THEORA: "THEORA",
    UNKNOWN: "UNKNOWN",
    VFW: "VFW",
    VORBIS: "VORBIS",
    VP8: "VP8",
    VP9: "VP9",
    WEBVTT: "WEBVTT",
};
const TrackType = {
    audio: "audio",
    data: "data",
    video: "video",
};
const ColorPrimaries = {
    EBU_3213_E: "EBU_3213_E",
    GENERIC_FILM: "GENERIC_FILM",
    IPT: "IPT",
    ITU_2020: "ITU_2020",
    ITU_470BG: "ITU_470BG",
    ITU_470M: "ITU_470M",
    ITU_709: "ITU_709",
    LAST: "LAST",
    RESERVED: "RESERVED",
    SMPTE_170M: "SMPTE_170M",
    SMPTE_2067XYZ: "SMPTE_2067XYZ",
    SMPTE_240M: "SMPTE_240M",
    SMPTE_428_1: "SMPTE_428_1",
    SMPTE_431_2: "SMPTE_431_2",
    SMPTE_EG_432_1: "SMPTE_EG_432_1",
    UNSPECIFIED: "UNSPECIFIED",
};
const MatrixCoefficients = {
    CD_CL: "CD_CL",
    CD_NCL: "CD_NCL",
    EBU3213: "EBU3213",
    FCC: "FCC",
    IPT: "IPT",
    ITU_2020_CL: "ITU_2020_CL",
    ITU_2020_NCL: "ITU_2020_NCL",
    ITU_2100ICtCp: "ITU_2100ICtCp",
    ITU_470BG: "ITU_470BG",
    ITU_709: "ITU_709",
    LAST: "LAST",
    RESERVED: "RESERVED",
    RGB: "RGB",
    SMPTE_170M: "SMPTE_170M",
    SMPTE_2085: "SMPTE_2085",
    SMPTE_240M: "SMPTE_240M",
    UNSPECIFIED: "UNSPECIFIED",
    YCgCo: "YCgCo",
};
const TransferCharacteristics = {
    ARIB_B67: "ARIB_B67",
    IEC_61966_2_1: "IEC_61966_2_1",
    IEC_61966_2_4: "IEC_61966_2_4",
    ITU_1361: "ITU_1361",
    ITU_2020_10bit: "ITU_2020_10bit",
    ITU_2020_12bit: "ITU_2020_12bit",
    ITU_470BG: "ITU_470BG",
    ITU_470M: "ITU_470M",
    ITU_709: "ITU_709",
    LAST: "LAST",
    LINEAR: "LINEAR",
    LOC10_2_5: "LOC10_2_5",
    LOG10_2: "LOG10_2",
    RESERVED: "RESERVED",
    SMPTE_170M: "SMPTE_170M",
    SMPTE_2084: "SMPTE_2084",
    SMPTE_240M: "SMPTE_240M",
    SMPTE_428_1: "SMPTE_428_1",
    UNSPECIFIED: "UNSPECIFIED",
};
const PricingPlan = {
    ON_DEMAND: "ON_DEMAND",
    RESERVED: "RESERVED",
};
const Commitment = {
    ONE_YEAR: "ONE_YEAR",
};
const RenewalType = {
    AUTO_RENEW: "AUTO_RENEW",
    EXPIRE: "EXPIRE",
};
const ReservationPlanStatus = {
    ACTIVE: "ACTIVE",
    EXPIRED: "EXPIRED",
};
const QueueStatus = {
    ACTIVE: "ACTIVE",
    PAUSED: "PAUSED",
};
class BadRequestException extends MediaConvertServiceException {
    name = "BadRequestException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.Message = opts.Message;
    }
}
class ConflictException extends MediaConvertServiceException {
    name = "ConflictException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
class ForbiddenException extends MediaConvertServiceException {
    name = "ForbiddenException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ForbiddenException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ForbiddenException.prototype);
        this.Message = opts.Message;
    }
}
class InternalServerErrorException extends MediaConvertServiceException {
    name = "InternalServerErrorException";
    $fault = "server";
    Message;
    constructor(opts) {
        super({
            name: "InternalServerErrorException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerErrorException.prototype);
        this.Message = opts.Message;
    }
}
class NotFoundException extends MediaConvertServiceException {
    name = "NotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NotFoundException.prototype);
        this.Message = opts.Message;
    }
}
class ServiceQuotaExceededException extends MediaConvertServiceException {
    name = "ServiceQuotaExceededException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
    }
}
class TooManyRequestsException extends MediaConvertServiceException {
    name = "TooManyRequestsException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.Message = opts.Message;
    }
}
const DescribeEndpointsMode = {
    DEFAULT: "DEFAULT",
    GET_ONLY: "GET_ONLY",
};
const JobsQueryStatus = {
    COMPLETE: "COMPLETE",
    ERROR: "ERROR",
    PROGRESSING: "PROGRESSING",
    SUBMITTED: "SUBMITTED",
};
const InputPolicy = {
    ALLOWED: "ALLOWED",
    DISALLOWED: "DISALLOWED",
};
const JobTemplateListBy = {
    CREATION_DATE: "CREATION_DATE",
    NAME: "NAME",
    SYSTEM: "SYSTEM",
};
const Order = {
    ASCENDING: "ASCENDING",
    DESCENDING: "DESCENDING",
};
const PresetListBy = {
    CREATION_DATE: "CREATION_DATE",
    NAME: "NAME",
    SYSTEM: "SYSTEM",
};
const QueueListBy = {
    CREATION_DATE: "CREATION_DATE",
    NAME: "NAME",
};

const se_AssociateCertificateCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/certificates");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        arn: [, , `Arn`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CancelJobCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2017-08-29/jobs/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_CreateJobCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/jobs");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        accelerationSettings: [, (_) => se_AccelerationSettings(_), `AccelerationSettings`],
        billingTagsSource: [, , `BillingTagsSource`],
        clientRequestToken: [true, (_) => _ ?? uuid.v4(), `ClientRequestToken`],
        hopDestinations: [, (_) => se___listOfHopDestination(_), `HopDestinations`],
        jobEngineVersion: [, , `JobEngineVersion`],
        jobTemplate: [, , `JobTemplate`],
        priority: [, , `Priority`],
        queue: [, , `Queue`],
        role: [, , `Role`],
        settings: [, (_) => se_JobSettings(_), `Settings`],
        simulateReservedQueue: [, , `SimulateReservedQueue`],
        statusUpdateInterval: [, , `StatusUpdateInterval`],
        tags: [, (_) => smithyClient._json(_), `Tags`],
        userMetadata: [, (_) => smithyClient._json(_), `UserMetadata`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateJobTemplateCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/jobTemplates");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        accelerationSettings: [, (_) => se_AccelerationSettings(_), `AccelerationSettings`],
        category: [, , `Category`],
        description: [, , `Description`],
        hopDestinations: [, (_) => se___listOfHopDestination(_), `HopDestinations`],
        name: [, , `Name`],
        priority: [, , `Priority`],
        queue: [, , `Queue`],
        settings: [, (_) => se_JobTemplateSettings(_), `Settings`],
        statusUpdateInterval: [, , `StatusUpdateInterval`],
        tags: [, (_) => smithyClient._json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreatePresetCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/presets");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        category: [, , `Category`],
        description: [, , `Description`],
        name: [, , `Name`],
        settings: [, (_) => se_PresetSettings(_), `Settings`],
        tags: [, (_) => smithyClient._json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateQueueCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/queues");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        concurrentJobs: [, , `ConcurrentJobs`],
        description: [, , `Description`],
        name: [, , `Name`],
        pricingPlan: [, , `PricingPlan`],
        reservationPlanSettings: [, (_) => se_ReservationPlanSettings(_), `ReservationPlanSettings`],
        status: [, , `Status`],
        tags: [, (_) => smithyClient._json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateResourceShareCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/resourceShares");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        jobId: [, , `JobId`],
        supportCaseId: [, , `SupportCaseId`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_DeleteJobTemplateCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2017-08-29/jobTemplates/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeletePolicyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2017-08-29/policy");
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeletePresetCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2017-08-29/presets/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteQueueCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2017-08-29/queues/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DescribeEndpointsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/endpoints");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        maxResults: [, , `MaxResults`],
        mode: [, , `Mode`],
        nextToken: [, , `NextToken`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_DisassociateCertificateCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2017-08-29/certificates/{Arn}");
    b.p("Arn", () => input.Arn, "{Arn}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_GetJobCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2017-08-29/jobs/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetJobsQueryResultsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2017-08-29/jobsQueries/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetJobTemplateCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2017-08-29/jobTemplates/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetPolicyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2017-08-29/policy");
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetPresetCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2017-08-29/presets/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetQueueCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2017-08-29/queues/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_ListJobsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2017-08-29/jobs");
    const query = smithyClient.map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_o]: [, input[_O]],
        [_q]: [, input[_Q]],
        [_s]: [, input[_S]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListJobTemplatesCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2017-08-29/jobTemplates");
    const query = smithyClient.map({
        [_c]: [, input[_C]],
        [_lB]: [, input[_LB]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_o]: [, input[_O]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListPresetsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2017-08-29/presets");
    const query = smithyClient.map({
        [_c]: [, input[_C]],
        [_lB]: [, input[_LB]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_o]: [, input[_O]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListQueuesCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2017-08-29/queues");
    const query = smithyClient.map({
        [_lB]: [, input[_LB]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_o]: [, input[_O]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListTagsForResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2017-08-29/tags/{Arn}");
    b.p("Arn", () => input.Arn, "{Arn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_ListVersionsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2017-08-29/versions");
    const query = smithyClient.map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ProbeCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/probe");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        inputFiles: [, (_) => se___listOfProbeInputFile(_), `InputFiles`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_PutPolicyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/policy");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        policy: [, (_) => se_Policy(_), `Policy`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_SearchJobsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2017-08-29/search");
    const query = smithyClient.map({
        [_iF]: [, input[_IF]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_o]: [, input[_O]],
        [_q]: [, input[_Q]],
        [_s]: [, input[_S]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_StartJobsQueryCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/jobsQueries");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        filterList: [, (_) => se___listOfJobsQueryFilter(_), `FilterList`],
        maxResults: [, , `MaxResults`],
        nextToken: [, , `NextToken`],
        order: [, , `Order`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_TagResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/tags");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        arn: [, , `Arn`],
        tags: [, (_) => smithyClient._json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UntagResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/tags/{Arn}");
    b.p("Arn", () => input.Arn, "{Arn}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        tagKeys: [, (_) => smithyClient._json(_), `TagKeys`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_UpdateJobTemplateCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/jobTemplates/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        accelerationSettings: [, (_) => se_AccelerationSettings(_), `AccelerationSettings`],
        category: [, , `Category`],
        description: [, , `Description`],
        hopDestinations: [, (_) => se___listOfHopDestination(_), `HopDestinations`],
        priority: [, , `Priority`],
        queue: [, , `Queue`],
        settings: [, (_) => se_JobTemplateSettings(_), `Settings`],
        statusUpdateInterval: [, , `StatusUpdateInterval`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_UpdatePresetCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/presets/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        category: [, , `Category`],
        description: [, , `Description`],
        settings: [, (_) => se_PresetSettings(_), `Settings`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_UpdateQueueCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/queues/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        concurrentJobs: [, , `ConcurrentJobs`],
        description: [, , `Description`],
        reservationPlanSettings: [, (_) => se_ReservationPlanSettings(_), `ReservationPlanSettings`],
        status: [, , `Status`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const de_AssociateCertificateCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_CancelJobCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_CreateJobCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Job: [, (_) => de_Job(_), `job`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateJobTemplateCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        JobTemplate: [, (_) => de_JobTemplate(_), `jobTemplate`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreatePresetCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Preset: [, (_) => de_Preset(_), `preset`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateQueueCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Queue: [, (_) => de_Queue(_), `queue`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateResourceShareCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteJobTemplateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeletePolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeletePresetCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteQueueCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DescribeEndpointsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Endpoints: [, (_) => de___listOfEndpoint(_), `endpoints`],
        NextToken: [, smithyClient.expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DisassociateCertificateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_GetJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Job: [, (_) => de_Job(_), `job`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetJobsQueryResultsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Jobs: [, (_) => de___listOfJob(_), `jobs`],
        NextToken: [, smithyClient.expectString, `nextToken`],
        Status: [, smithyClient.expectString, `status`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetJobTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        JobTemplate: [, (_) => de_JobTemplate(_), `jobTemplate`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Policy: [, (_) => de_Policy(_), `policy`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetPresetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Preset: [, (_) => de_Preset(_), `preset`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetQueueCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Queue: [, (_) => de_Queue(_), `queue`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Jobs: [, (_) => de___listOfJob(_), `jobs`],
        NextToken: [, smithyClient.expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListJobTemplatesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        JobTemplates: [, (_) => de___listOfJobTemplate(_), `jobTemplates`],
        NextToken: [, smithyClient.expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListPresetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        NextToken: [, smithyClient.expectString, `nextToken`],
        Presets: [, (_) => de___listOfPreset(_), `presets`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListQueuesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        NextToken: [, smithyClient.expectString, `nextToken`],
        Queues: [, (_) => de___listOfQueue(_), `queues`],
        TotalConcurrentJobs: [, smithyClient.expectInt32, `totalConcurrentJobs`],
        UnallocatedConcurrentJobs: [, smithyClient.expectInt32, `unallocatedConcurrentJobs`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        ResourceTags: [, (_) => de_ResourceTags(_), `resourceTags`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        NextToken: [, smithyClient.expectString, `nextToken`],
        Versions: [, (_) => de___listOfJobEngineVersion(_), `versions`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ProbeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        ProbeResults: [, (_) => de___listOfProbeResult(_), `probeResults`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_PutPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Policy: [, (_) => de_Policy(_), `policy`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_SearchJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Jobs: [, (_) => de___listOfJob(_), `jobs`],
        NextToken: [, smithyClient.expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_StartJobsQueryCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Id: [, smithyClient.expectString, `id`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_UpdateJobTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        JobTemplate: [, (_) => de_JobTemplate(_), `jobTemplate`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdatePresetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Preset: [, (_) => de_Preset(_), `preset`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateQueueCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        Queue: [, (_) => de_Queue(_), `queue`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.mediaconvert#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput);
        case "ConflictException":
        case "com.amazonaws.mediaconvert#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput);
        case "ForbiddenException":
        case "com.amazonaws.mediaconvert#ForbiddenException":
            throw await de_ForbiddenExceptionRes(parsedOutput);
        case "InternalServerErrorException":
        case "com.amazonaws.mediaconvert#InternalServerErrorException":
            throw await de_InternalServerErrorExceptionRes(parsedOutput);
        case "NotFoundException":
        case "com.amazonaws.mediaconvert#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.mediaconvert#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput);
        case "TooManyRequestsException":
        case "com.amazonaws.mediaconvert#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = smithyClient.withBaseException(MediaConvertServiceException);
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        Message: [, smithyClient.expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        Message: [, smithyClient.expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ForbiddenExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        Message: [, smithyClient.expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new ForbiddenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerErrorExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        Message: [, smithyClient.expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new InternalServerErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        Message: [, smithyClient.expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        Message: [, smithyClient.expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        Message: [, smithyClient.expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const se___listOf__doubleMinNegative60Max6 = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.serializeFloat(entry);
    });
};
const se___listOfAllowedRenditionSize = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AllowedRenditionSize(entry);
    });
};
const se___listOfAudioDescription = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AudioDescription(entry);
    });
};
const se___listOfAutomatedAbrRule = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AutomatedAbrRule(entry);
    });
};
const se___listOfCaptionDescription = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_CaptionDescription(entry);
    });
};
const se___listOfCaptionDescriptionPreset = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_CaptionDescriptionPreset(entry);
    });
};
const se___listOfCmafAdditionalManifest = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_CmafAdditionalManifest(entry);
    });
};
const se___listOfColorConversion3DLUTSetting = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ColorConversion3DLUTSetting(entry);
    });
};
const se___listOfDashAdditionalManifest = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_DashAdditionalManifest(entry);
    });
};
const se___listOfForceIncludeRenditionSize = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ForceIncludeRenditionSize(entry);
    });
};
const se___listOfHlsAdditionalManifest = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_HlsAdditionalManifest(entry);
    });
};
const se___listOfHlsCaptionLanguageMapping = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_HlsCaptionLanguageMapping(entry);
    });
};
const se___listOfHopDestination = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_HopDestination(entry);
    });
};
const se___listOfId3Insertion = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Id3Insertion(entry);
    });
};
const se___listOfInput = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Input(entry);
    });
};
const se___listOfInputClipping = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InputClipping(entry);
    });
};
const se___listOfInputTemplate = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InputTemplate(entry);
    });
};
const se___listOfInsertableImage = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InsertableImage(entry);
    });
};
const se___listOfJobsQueryFilter = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_JobsQueryFilter(entry);
    });
};
const se___listOfMsSmoothAdditionalManifest = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_MsSmoothAdditionalManifest(entry);
    });
};
const se___listOfOutput = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Output(entry);
    });
};
const se___listOfOutputChannelMapping = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_OutputChannelMapping(entry);
    });
};
const se___listOfOutputGroup = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_OutputGroup(entry);
    });
};
const se___listOfProbeInputFile = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ProbeInputFile(entry);
    });
};
const se___listOfVideoOverlay = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_VideoOverlay(entry);
    });
};
const se___listOfVideoOverlayInputClipping = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_VideoOverlayInputClipping(entry);
    });
};
const se___listOfVideoOverlayTransition = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_VideoOverlayTransition(entry);
    });
};
const se___mapOfAudioSelector = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_AudioSelector(value);
        return acc;
    }, {});
};
const se___mapOfAudioSelectorGroup = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_AudioSelectorGroup(value);
        return acc;
    }, {});
};
const se___mapOfCaptionSelector = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_CaptionSelector(value);
        return acc;
    }, {});
};
const se___mapOfDynamicAudioSelector = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_DynamicAudioSelector(value);
        return acc;
    }, {});
};
const se_AacSettings = (input, context) => {
    return smithyClient.take(input, {
        audioDescriptionBroadcasterMix: [, , `AudioDescriptionBroadcasterMix`],
        bitrate: [, , `Bitrate`],
        codecProfile: [, , `CodecProfile`],
        codingMode: [, , `CodingMode`],
        loudnessMeasurementMode: [, , `LoudnessMeasurementMode`],
        rapInterval: [, , `RapInterval`],
        rateControlMode: [, , `RateControlMode`],
        rawFormat: [, , `RawFormat`],
        sampleRate: [, , `SampleRate`],
        specification: [, , `Specification`],
        targetLoudnessRange: [, , `TargetLoudnessRange`],
        vbrQuality: [, , `VbrQuality`],
    });
};
const se_Ac3Settings = (input, context) => {
    return smithyClient.take(input, {
        bitrate: [, , `Bitrate`],
        bitstreamMode: [, , `BitstreamMode`],
        codingMode: [, , `CodingMode`],
        dialnorm: [, , `Dialnorm`],
        dynamicRangeCompressionLine: [, , `DynamicRangeCompressionLine`],
        dynamicRangeCompressionProfile: [, , `DynamicRangeCompressionProfile`],
        dynamicRangeCompressionRf: [, , `DynamicRangeCompressionRf`],
        lfeFilter: [, , `LfeFilter`],
        metadataControl: [, , `MetadataControl`],
        sampleRate: [, , `SampleRate`],
    });
};
const se_AccelerationSettings = (input, context) => {
    return smithyClient.take(input, {
        mode: [, , `Mode`],
    });
};
const se_AdvancedInputFilterSettings = (input, context) => {
    return smithyClient.take(input, {
        addTexture: [, , `AddTexture`],
        sharpening: [, , `Sharpening`],
    });
};
const se_AiffSettings = (input, context) => {
    return smithyClient.take(input, {
        bitDepth: [, , `BitDepth`],
        channels: [, , `Channels`],
        sampleRate: [, , `SampleRate`],
    });
};
const se_AllowedRenditionSize = (input, context) => {
    return smithyClient.take(input, {
        height: [, , `Height`],
        required: [, , `Required`],
        width: [, , `Width`],
    });
};
const se_AncillarySourceSettings = (input, context) => {
    return smithyClient.take(input, {
        convert608To708: [, , `Convert608To708`],
        sourceAncillaryChannelNumber: [, , `SourceAncillaryChannelNumber`],
        terminateCaptions: [, , `TerminateCaptions`],
    });
};
const se_AudioChannelTaggingSettings = (input, context) => {
    return smithyClient.take(input, {
        channelTag: [, , `ChannelTag`],
        channelTags: [, smithyClient._json, `ChannelTags`],
    });
};
const se_AudioCodecSettings = (input, context) => {
    return smithyClient.take(input, {
        aacSettings: [, (_) => se_AacSettings(_), `AacSettings`],
        ac3Settings: [, (_) => se_Ac3Settings(_), `Ac3Settings`],
        aiffSettings: [, (_) => se_AiffSettings(_), `AiffSettings`],
        codec: [, , `Codec`],
        eac3AtmosSettings: [, (_) => se_Eac3AtmosSettings(_), `Eac3AtmosSettings`],
        eac3Settings: [, (_) => se_Eac3Settings(_), `Eac3Settings`],
        flacSettings: [, (_) => se_FlacSettings(_), `FlacSettings`],
        mp2Settings: [, (_) => se_Mp2Settings(_), `Mp2Settings`],
        mp3Settings: [, (_) => se_Mp3Settings(_), `Mp3Settings`],
        opusSettings: [, (_) => se_OpusSettings(_), `OpusSettings`],
        vorbisSettings: [, (_) => se_VorbisSettings(_), `VorbisSettings`],
        wavSettings: [, (_) => se_WavSettings(_), `WavSettings`],
    });
};
const se_AudioDescription = (input, context) => {
    return smithyClient.take(input, {
        audioChannelTaggingSettings: [, (_) => se_AudioChannelTaggingSettings(_), `AudioChannelTaggingSettings`],
        audioNormalizationSettings: [, (_) => se_AudioNormalizationSettings(_), `AudioNormalizationSettings`],
        audioSourceName: [, , `AudioSourceName`],
        audioType: [, , `AudioType`],
        audioTypeControl: [, , `AudioTypeControl`],
        codecSettings: [, (_) => se_AudioCodecSettings(_), `CodecSettings`],
        customLanguageCode: [, , `CustomLanguageCode`],
        languageCode: [, , `LanguageCode`],
        languageCodeControl: [, , `LanguageCodeControl`],
        remixSettings: [, (_) => se_RemixSettings(_), `RemixSettings`],
        streamName: [, , `StreamName`],
    });
};
const se_AudioNormalizationSettings = (input, context) => {
    return smithyClient.take(input, {
        algorithm: [, , `Algorithm`],
        algorithmControl: [, , `AlgorithmControl`],
        correctionGateLevel: [, , `CorrectionGateLevel`],
        loudnessLogging: [, , `LoudnessLogging`],
        peakCalculation: [, , `PeakCalculation`],
        targetLkfs: [, smithyClient.serializeFloat, `TargetLkfs`],
        truePeakLimiterThreshold: [, smithyClient.serializeFloat, `TruePeakLimiterThreshold`],
    });
};
const se_AudioSelector = (input, context) => {
    return smithyClient.take(input, {
        audioDurationCorrection: [, , `AudioDurationCorrection`],
        customLanguageCode: [, , `CustomLanguageCode`],
        defaultSelection: [, , `DefaultSelection`],
        externalAudioFileInput: [, , `ExternalAudioFileInput`],
        hlsRenditionGroupSettings: [, (_) => se_HlsRenditionGroupSettings(_), `HlsRenditionGroupSettings`],
        languageCode: [, , `LanguageCode`],
        offset: [, , `Offset`],
        pids: [, smithyClient._json, `Pids`],
        programSelection: [, , `ProgramSelection`],
        remixSettings: [, (_) => se_RemixSettings(_), `RemixSettings`],
        selectorType: [, , `SelectorType`],
        tracks: [, smithyClient._json, `Tracks`],
    });
};
const se_AudioSelectorGroup = (input, context) => {
    return smithyClient.take(input, {
        audioSelectorNames: [, smithyClient._json, `AudioSelectorNames`],
    });
};
const se_AutomatedAbrRule = (input, context) => {
    return smithyClient.take(input, {
        allowedRenditions: [, (_) => se___listOfAllowedRenditionSize(_), `AllowedRenditions`],
        forceIncludeRenditions: [, (_) => se___listOfForceIncludeRenditionSize(_), `ForceIncludeRenditions`],
        minBottomRenditionSize: [, (_) => se_MinBottomRenditionSize(_), `MinBottomRenditionSize`],
        minTopRenditionSize: [, (_) => se_MinTopRenditionSize(_), `MinTopRenditionSize`],
        type: [, , `Type`],
    });
};
const se_AutomatedAbrSettings = (input, context) => {
    return smithyClient.take(input, {
        maxAbrBitrate: [, , `MaxAbrBitrate`],
        maxQualityLevel: [, smithyClient.serializeFloat, `MaxQualityLevel`],
        maxRenditions: [, , `MaxRenditions`],
        minAbrBitrate: [, , `MinAbrBitrate`],
        rules: [, (_) => se___listOfAutomatedAbrRule(_), `Rules`],
    });
};
const se_AutomatedEncodingSettings = (input, context) => {
    return smithyClient.take(input, {
        abrSettings: [, (_) => se_AutomatedAbrSettings(_), `AbrSettings`],
    });
};
const se_Av1QvbrSettings = (input, context) => {
    return smithyClient.take(input, {
        qvbrQualityLevel: [, , `QvbrQualityLevel`],
        qvbrQualityLevelFineTune: [, smithyClient.serializeFloat, `QvbrQualityLevelFineTune`],
    });
};
const se_Av1Settings = (input, context) => {
    return smithyClient.take(input, {
        adaptiveQuantization: [, , `AdaptiveQuantization`],
        bitDepth: [, , `BitDepth`],
        filmGrainSynthesis: [, , `FilmGrainSynthesis`],
        framerateControl: [, , `FramerateControl`],
        framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        gopSize: [, smithyClient.serializeFloat, `GopSize`],
        maxBitrate: [, , `MaxBitrate`],
        numberBFramesBetweenReferenceFrames: [, , `NumberBFramesBetweenReferenceFrames`],
        perFrameMetrics: [, smithyClient._json, `PerFrameMetrics`],
        qvbrSettings: [, (_) => se_Av1QvbrSettings(_), `QvbrSettings`],
        rateControlMode: [, , `RateControlMode`],
        slices: [, , `Slices`],
        spatialAdaptiveQuantization: [, , `SpatialAdaptiveQuantization`],
    });
};
const se_AvailBlanking = (input, context) => {
    return smithyClient.take(input, {
        availBlankingImage: [, , `AvailBlankingImage`],
    });
};
const se_AvcIntraSettings = (input, context) => {
    return smithyClient.take(input, {
        avcIntraClass: [, , `AvcIntraClass`],
        avcIntraUhdSettings: [, (_) => se_AvcIntraUhdSettings(_), `AvcIntraUhdSettings`],
        framerateControl: [, , `FramerateControl`],
        framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        interlaceMode: [, , `InterlaceMode`],
        perFrameMetrics: [, smithyClient._json, `PerFrameMetrics`],
        scanTypeConversionMode: [, , `ScanTypeConversionMode`],
        slowPal: [, , `SlowPal`],
        telecine: [, , `Telecine`],
    });
};
const se_AvcIntraUhdSettings = (input, context) => {
    return smithyClient.take(input, {
        qualityTuningLevel: [, , `QualityTuningLevel`],
    });
};
const se_BandwidthReductionFilter = (input, context) => {
    return smithyClient.take(input, {
        sharpening: [, , `Sharpening`],
        strength: [, , `Strength`],
    });
};
const se_BurninDestinationSettings = (input, context) => {
    return smithyClient.take(input, {
        alignment: [, , `Alignment`],
        applyFontColor: [, , `ApplyFontColor`],
        backgroundColor: [, , `BackgroundColor`],
        backgroundOpacity: [, , `BackgroundOpacity`],
        fallbackFont: [, , `FallbackFont`],
        fontColor: [, , `FontColor`],
        fontFileBold: [, , `FontFileBold`],
        fontFileBoldItalic: [, , `FontFileBoldItalic`],
        fontFileItalic: [, , `FontFileItalic`],
        fontFileRegular: [, , `FontFileRegular`],
        fontOpacity: [, , `FontOpacity`],
        fontResolution: [, , `FontResolution`],
        fontScript: [, , `FontScript`],
        fontSize: [, , `FontSize`],
        hexFontColor: [, , `HexFontColor`],
        outlineColor: [, , `OutlineColor`],
        outlineSize: [, , `OutlineSize`],
        removeRubyReserveAttributes: [, , `RemoveRubyReserveAttributes`],
        shadowColor: [, , `ShadowColor`],
        shadowOpacity: [, , `ShadowOpacity`],
        shadowXOffset: [, , `ShadowXOffset`],
        shadowYOffset: [, , `ShadowYOffset`],
        stylePassthrough: [, , `StylePassthrough`],
        teletextSpacing: [, , `TeletextSpacing`],
        xPosition: [, , `XPosition`],
        yPosition: [, , `YPosition`],
    });
};
const se_CaptionDescription = (input, context) => {
    return smithyClient.take(input, {
        captionSelectorName: [, , `CaptionSelectorName`],
        customLanguageCode: [, , `CustomLanguageCode`],
        destinationSettings: [, (_) => se_CaptionDestinationSettings(_), `DestinationSettings`],
        languageCode: [, , `LanguageCode`],
        languageDescription: [, , `LanguageDescription`],
    });
};
const se_CaptionDescriptionPreset = (input, context) => {
    return smithyClient.take(input, {
        customLanguageCode: [, , `CustomLanguageCode`],
        destinationSettings: [, (_) => se_CaptionDestinationSettings(_), `DestinationSettings`],
        languageCode: [, , `LanguageCode`],
        languageDescription: [, , `LanguageDescription`],
    });
};
const se_CaptionDestinationSettings = (input, context) => {
    return smithyClient.take(input, {
        burninDestinationSettings: [, (_) => se_BurninDestinationSettings(_), `BurninDestinationSettings`],
        destinationType: [, , `DestinationType`],
        dvbSubDestinationSettings: [, (_) => se_DvbSubDestinationSettings(_), `DvbSubDestinationSettings`],
        embeddedDestinationSettings: [, (_) => se_EmbeddedDestinationSettings(_), `EmbeddedDestinationSettings`],
        imscDestinationSettings: [, (_) => se_ImscDestinationSettings(_), `ImscDestinationSettings`],
        sccDestinationSettings: [, (_) => se_SccDestinationSettings(_), `SccDestinationSettings`],
        srtDestinationSettings: [, (_) => se_SrtDestinationSettings(_), `SrtDestinationSettings`],
        teletextDestinationSettings: [, (_) => se_TeletextDestinationSettings(_), `TeletextDestinationSettings`],
        ttmlDestinationSettings: [, (_) => se_TtmlDestinationSettings(_), `TtmlDestinationSettings`],
        webvttDestinationSettings: [, (_) => se_WebvttDestinationSettings(_), `WebvttDestinationSettings`],
    });
};
const se_CaptionSelector = (input, context) => {
    return smithyClient.take(input, {
        customLanguageCode: [, , `CustomLanguageCode`],
        languageCode: [, , `LanguageCode`],
        sourceSettings: [, (_) => se_CaptionSourceSettings(_), `SourceSettings`],
    });
};
const se_CaptionSourceFramerate = (input, context) => {
    return smithyClient.take(input, {
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
    });
};
const se_CaptionSourceSettings = (input, context) => {
    return smithyClient.take(input, {
        ancillarySourceSettings: [, (_) => se_AncillarySourceSettings(_), `AncillarySourceSettings`],
        dvbSubSourceSettings: [, (_) => se_DvbSubSourceSettings(_), `DvbSubSourceSettings`],
        embeddedSourceSettings: [, (_) => se_EmbeddedSourceSettings(_), `EmbeddedSourceSettings`],
        fileSourceSettings: [, (_) => se_FileSourceSettings(_), `FileSourceSettings`],
        sourceType: [, , `SourceType`],
        teletextSourceSettings: [, (_) => se_TeletextSourceSettings(_), `TeletextSourceSettings`],
        trackSourceSettings: [, (_) => se_TrackSourceSettings(_), `TrackSourceSettings`],
        webvttHlsSourceSettings: [, (_) => se_WebvttHlsSourceSettings(_), `WebvttHlsSourceSettings`],
    });
};
const se_ChannelMapping = (input, context) => {
    return smithyClient.take(input, {
        outputChannels: [, (_) => se___listOfOutputChannelMapping(_), `OutputChannels`],
    });
};
const se_ClipLimits = (input, context) => {
    return smithyClient.take(input, {
        maximumRGBTolerance: [, , `MaximumRGBTolerance`],
        maximumYUV: [, , `MaximumYUV`],
        minimumRGBTolerance: [, , `MinimumRGBTolerance`],
        minimumYUV: [, , `MinimumYUV`],
    });
};
const se_CmafAdditionalManifest = (input, context) => {
    return smithyClient.take(input, {
        manifestNameModifier: [, , `ManifestNameModifier`],
        selectedOutputs: [, smithyClient._json, `SelectedOutputs`],
    });
};
const se_CmafEncryptionSettings = (input, context) => {
    return smithyClient.take(input, {
        constantInitializationVector: [, , `ConstantInitializationVector`],
        encryptionMethod: [, , `EncryptionMethod`],
        initializationVectorInManifest: [, , `InitializationVectorInManifest`],
        spekeKeyProvider: [, (_) => se_SpekeKeyProviderCmaf(_), `SpekeKeyProvider`],
        staticKeyProvider: [, (_) => se_StaticKeyProvider(_), `StaticKeyProvider`],
        type: [, , `Type`],
    });
};
const se_CmafGroupSettings = (input, context) => {
    return smithyClient.take(input, {
        additionalManifests: [, (_) => se___listOfCmafAdditionalManifest(_), `AdditionalManifests`],
        baseUrl: [, , `BaseUrl`],
        clientCache: [, , `ClientCache`],
        codecSpecification: [, , `CodecSpecification`],
        dashIFrameTrickPlayNameModifier: [, , `DashIFrameTrickPlayNameModifier`],
        dashManifestStyle: [, , `DashManifestStyle`],
        destination: [, , `Destination`],
        destinationSettings: [, (_) => se_DestinationSettings(_), `DestinationSettings`],
        encryption: [, (_) => se_CmafEncryptionSettings(_), `Encryption`],
        fragmentLength: [, , `FragmentLength`],
        imageBasedTrickPlay: [, , `ImageBasedTrickPlay`],
        imageBasedTrickPlaySettings: [
            ,
            (_) => se_CmafImageBasedTrickPlaySettings(_),
            `ImageBasedTrickPlaySettings`,
        ],
        manifestCompression: [, , `ManifestCompression`],
        manifestDurationFormat: [, , `ManifestDurationFormat`],
        minBufferTime: [, , `MinBufferTime`],
        minFinalSegmentLength: [, smithyClient.serializeFloat, `MinFinalSegmentLength`],
        mpdManifestBandwidthType: [, , `MpdManifestBandwidthType`],
        mpdProfile: [, , `MpdProfile`],
        ptsOffsetHandlingForBFrames: [, , `PtsOffsetHandlingForBFrames`],
        segmentControl: [, , `SegmentControl`],
        segmentLength: [, , `SegmentLength`],
        segmentLengthControl: [, , `SegmentLengthControl`],
        streamInfResolution: [, , `StreamInfResolution`],
        targetDurationCompatibilityMode: [, , `TargetDurationCompatibilityMode`],
        videoCompositionOffsets: [, , `VideoCompositionOffsets`],
        writeDashManifest: [, , `WriteDashManifest`],
        writeHlsManifest: [, , `WriteHlsManifest`],
        writeSegmentTimelineInRepresentation: [, , `WriteSegmentTimelineInRepresentation`],
    });
};
const se_CmafImageBasedTrickPlaySettings = (input, context) => {
    return smithyClient.take(input, {
        intervalCadence: [, , `IntervalCadence`],
        thumbnailHeight: [, , `ThumbnailHeight`],
        thumbnailInterval: [, smithyClient.serializeFloat, `ThumbnailInterval`],
        thumbnailWidth: [, , `ThumbnailWidth`],
        tileHeight: [, , `TileHeight`],
        tileWidth: [, , `TileWidth`],
    });
};
const se_CmfcSettings = (input, context) => {
    return smithyClient.take(input, {
        audioDuration: [, , `AudioDuration`],
        audioGroupId: [, , `AudioGroupId`],
        audioRenditionSets: [, , `AudioRenditionSets`],
        audioTrackType: [, , `AudioTrackType`],
        descriptiveVideoServiceFlag: [, , `DescriptiveVideoServiceFlag`],
        iFrameOnlyManifest: [, , `IFrameOnlyManifest`],
        klvMetadata: [, , `KlvMetadata`],
        manifestMetadataSignaling: [, , `ManifestMetadataSignaling`],
        scte35Esam: [, , `Scte35Esam`],
        scte35Source: [, , `Scte35Source`],
        timedMetadata: [, , `TimedMetadata`],
        timedMetadataBoxVersion: [, , `TimedMetadataBoxVersion`],
        timedMetadataSchemeIdUri: [, , `TimedMetadataSchemeIdUri`],
        timedMetadataValue: [, , `TimedMetadataValue`],
    });
};
const se_ColorConversion3DLUTSetting = (input, context) => {
    return smithyClient.take(input, {
        fileInput: [, , `FileInput`],
        inputColorSpace: [, , `InputColorSpace`],
        inputMasteringLuminance: [, , `InputMasteringLuminance`],
        outputColorSpace: [, , `OutputColorSpace`],
        outputMasteringLuminance: [, , `OutputMasteringLuminance`],
    });
};
const se_ColorCorrector = (input, context) => {
    return smithyClient.take(input, {
        brightness: [, , `Brightness`],
        clipLimits: [, (_) => se_ClipLimits(_), `ClipLimits`],
        colorSpaceConversion: [, , `ColorSpaceConversion`],
        contrast: [, , `Contrast`],
        hdr10Metadata: [, (_) => se_Hdr10Metadata(_), `Hdr10Metadata`],
        hdrToSdrToneMapper: [, , `HdrToSdrToneMapper`],
        hue: [, , `Hue`],
        maxLuminance: [, , `MaxLuminance`],
        sampleRangeConversion: [, , `SampleRangeConversion`],
        saturation: [, , `Saturation`],
        sdrReferenceWhiteLevel: [, , `SdrReferenceWhiteLevel`],
    });
};
const se_ContainerSettings = (input, context) => {
    return smithyClient.take(input, {
        cmfcSettings: [, (_) => se_CmfcSettings(_), `CmfcSettings`],
        container: [, , `Container`],
        f4vSettings: [, (_) => se_F4vSettings(_), `F4vSettings`],
        m2tsSettings: [, (_) => se_M2tsSettings(_), `M2tsSettings`],
        m3u8Settings: [, (_) => se_M3u8Settings(_), `M3u8Settings`],
        movSettings: [, (_) => se_MovSettings(_), `MovSettings`],
        mp4Settings: [, (_) => se_Mp4Settings(_), `Mp4Settings`],
        mpdSettings: [, (_) => se_MpdSettings(_), `MpdSettings`],
        mxfSettings: [, (_) => se_MxfSettings(_), `MxfSettings`],
    });
};
const se_DashAdditionalManifest = (input, context) => {
    return smithyClient.take(input, {
        manifestNameModifier: [, , `ManifestNameModifier`],
        selectedOutputs: [, smithyClient._json, `SelectedOutputs`],
    });
};
const se_DashIsoEncryptionSettings = (input, context) => {
    return smithyClient.take(input, {
        playbackDeviceCompatibility: [, , `PlaybackDeviceCompatibility`],
        spekeKeyProvider: [, (_) => se_SpekeKeyProvider(_), `SpekeKeyProvider`],
    });
};
const se_DashIsoGroupSettings = (input, context) => {
    return smithyClient.take(input, {
        additionalManifests: [, (_) => se___listOfDashAdditionalManifest(_), `AdditionalManifests`],
        audioChannelConfigSchemeIdUri: [, , `AudioChannelConfigSchemeIdUri`],
        baseUrl: [, , `BaseUrl`],
        dashIFrameTrickPlayNameModifier: [, , `DashIFrameTrickPlayNameModifier`],
        dashManifestStyle: [, , `DashManifestStyle`],
        destination: [, , `Destination`],
        destinationSettings: [, (_) => se_DestinationSettings(_), `DestinationSettings`],
        encryption: [, (_) => se_DashIsoEncryptionSettings(_), `Encryption`],
        fragmentLength: [, , `FragmentLength`],
        hbbtvCompliance: [, , `HbbtvCompliance`],
        imageBasedTrickPlay: [, , `ImageBasedTrickPlay`],
        imageBasedTrickPlaySettings: [
            ,
            (_) => se_DashIsoImageBasedTrickPlaySettings(_),
            `ImageBasedTrickPlaySettings`,
        ],
        minBufferTime: [, , `MinBufferTime`],
        minFinalSegmentLength: [, smithyClient.serializeFloat, `MinFinalSegmentLength`],
        mpdManifestBandwidthType: [, , `MpdManifestBandwidthType`],
        mpdProfile: [, , `MpdProfile`],
        ptsOffsetHandlingForBFrames: [, , `PtsOffsetHandlingForBFrames`],
        segmentControl: [, , `SegmentControl`],
        segmentLength: [, , `SegmentLength`],
        segmentLengthControl: [, , `SegmentLengthControl`],
        videoCompositionOffsets: [, , `VideoCompositionOffsets`],
        writeSegmentTimelineInRepresentation: [, , `WriteSegmentTimelineInRepresentation`],
    });
};
const se_DashIsoImageBasedTrickPlaySettings = (input, context) => {
    return smithyClient.take(input, {
        intervalCadence: [, , `IntervalCadence`],
        thumbnailHeight: [, , `ThumbnailHeight`],
        thumbnailInterval: [, smithyClient.serializeFloat, `ThumbnailInterval`],
        thumbnailWidth: [, , `ThumbnailWidth`],
        tileHeight: [, , `TileHeight`],
        tileWidth: [, , `TileWidth`],
    });
};
const se_Deinterlacer = (input, context) => {
    return smithyClient.take(input, {
        algorithm: [, , `Algorithm`],
        control: [, , `Control`],
        mode: [, , `Mode`],
    });
};
const se_DestinationSettings = (input, context) => {
    return smithyClient.take(input, {
        s3Settings: [, (_) => se_S3DestinationSettings(_), `S3Settings`],
    });
};
const se_DolbyVision = (input, context) => {
    return smithyClient.take(input, {
        l6Metadata: [, (_) => se_DolbyVisionLevel6Metadata(_), `L6Metadata`],
        l6Mode: [, , `L6Mode`],
        mapping: [, , `Mapping`],
        profile: [, , `Profile`],
    });
};
const se_DolbyVisionLevel6Metadata = (input, context) => {
    return smithyClient.take(input, {
        maxCll: [, , `MaxCll`],
        maxFall: [, , `MaxFall`],
    });
};
const se_DvbNitSettings = (input, context) => {
    return smithyClient.take(input, {
        networkId: [, , `NetworkId`],
        networkName: [, , `NetworkName`],
        nitInterval: [, , `NitInterval`],
    });
};
const se_DvbSdtSettings = (input, context) => {
    return smithyClient.take(input, {
        outputSdt: [, , `OutputSdt`],
        sdtInterval: [, , `SdtInterval`],
        serviceName: [, , `ServiceName`],
        serviceProviderName: [, , `ServiceProviderName`],
    });
};
const se_DvbSubDestinationSettings = (input, context) => {
    return smithyClient.take(input, {
        alignment: [, , `Alignment`],
        applyFontColor: [, , `ApplyFontColor`],
        backgroundColor: [, , `BackgroundColor`],
        backgroundOpacity: [, , `BackgroundOpacity`],
        ddsHandling: [, , `DdsHandling`],
        ddsXCoordinate: [, , `DdsXCoordinate`],
        ddsYCoordinate: [, , `DdsYCoordinate`],
        fallbackFont: [, , `FallbackFont`],
        fontColor: [, , `FontColor`],
        fontFileBold: [, , `FontFileBold`],
        fontFileBoldItalic: [, , `FontFileBoldItalic`],
        fontFileItalic: [, , `FontFileItalic`],
        fontFileRegular: [, , `FontFileRegular`],
        fontOpacity: [, , `FontOpacity`],
        fontResolution: [, , `FontResolution`],
        fontScript: [, , `FontScript`],
        fontSize: [, , `FontSize`],
        height: [, , `Height`],
        hexFontColor: [, , `HexFontColor`],
        outlineColor: [, , `OutlineColor`],
        outlineSize: [, , `OutlineSize`],
        shadowColor: [, , `ShadowColor`],
        shadowOpacity: [, , `ShadowOpacity`],
        shadowXOffset: [, , `ShadowXOffset`],
        shadowYOffset: [, , `ShadowYOffset`],
        stylePassthrough: [, , `StylePassthrough`],
        subtitlingType: [, , `SubtitlingType`],
        teletextSpacing: [, , `TeletextSpacing`],
        width: [, , `Width`],
        xPosition: [, , `XPosition`],
        yPosition: [, , `YPosition`],
    });
};
const se_DvbSubSourceSettings = (input, context) => {
    return smithyClient.take(input, {
        pid: [, , `Pid`],
    });
};
const se_DvbTdtSettings = (input, context) => {
    return smithyClient.take(input, {
        tdtInterval: [, , `TdtInterval`],
    });
};
const se_DynamicAudioSelector = (input, context) => {
    return smithyClient.take(input, {
        audioDurationCorrection: [, , `AudioDurationCorrection`],
        externalAudioFileInput: [, , `ExternalAudioFileInput`],
        languageCode: [, , `LanguageCode`],
        offset: [, , `Offset`],
        selectorType: [, , `SelectorType`],
    });
};
const se_Eac3AtmosSettings = (input, context) => {
    return smithyClient.take(input, {
        bitrate: [, , `Bitrate`],
        bitstreamMode: [, , `BitstreamMode`],
        codingMode: [, , `CodingMode`],
        dialogueIntelligence: [, , `DialogueIntelligence`],
        downmixControl: [, , `DownmixControl`],
        dynamicRangeCompressionLine: [, , `DynamicRangeCompressionLine`],
        dynamicRangeCompressionRf: [, , `DynamicRangeCompressionRf`],
        dynamicRangeControl: [, , `DynamicRangeControl`],
        loRoCenterMixLevel: [, smithyClient.serializeFloat, `LoRoCenterMixLevel`],
        loRoSurroundMixLevel: [, smithyClient.serializeFloat, `LoRoSurroundMixLevel`],
        ltRtCenterMixLevel: [, smithyClient.serializeFloat, `LtRtCenterMixLevel`],
        ltRtSurroundMixLevel: [, smithyClient.serializeFloat, `LtRtSurroundMixLevel`],
        meteringMode: [, , `MeteringMode`],
        sampleRate: [, , `SampleRate`],
        speechThreshold: [, , `SpeechThreshold`],
        stereoDownmix: [, , `StereoDownmix`],
        surroundExMode: [, , `SurroundExMode`],
    });
};
const se_Eac3Settings = (input, context) => {
    return smithyClient.take(input, {
        attenuationControl: [, , `AttenuationControl`],
        bitrate: [, , `Bitrate`],
        bitstreamMode: [, , `BitstreamMode`],
        codingMode: [, , `CodingMode`],
        dcFilter: [, , `DcFilter`],
        dialnorm: [, , `Dialnorm`],
        dynamicRangeCompressionLine: [, , `DynamicRangeCompressionLine`],
        dynamicRangeCompressionRf: [, , `DynamicRangeCompressionRf`],
        lfeControl: [, , `LfeControl`],
        lfeFilter: [, , `LfeFilter`],
        loRoCenterMixLevel: [, smithyClient.serializeFloat, `LoRoCenterMixLevel`],
        loRoSurroundMixLevel: [, smithyClient.serializeFloat, `LoRoSurroundMixLevel`],
        ltRtCenterMixLevel: [, smithyClient.serializeFloat, `LtRtCenterMixLevel`],
        ltRtSurroundMixLevel: [, smithyClient.serializeFloat, `LtRtSurroundMixLevel`],
        metadataControl: [, , `MetadataControl`],
        passthroughControl: [, , `PassthroughControl`],
        phaseControl: [, , `PhaseControl`],
        sampleRate: [, , `SampleRate`],
        stereoDownmix: [, , `StereoDownmix`],
        surroundExMode: [, , `SurroundExMode`],
        surroundMode: [, , `SurroundMode`],
    });
};
const se_EmbeddedDestinationSettings = (input, context) => {
    return smithyClient.take(input, {
        destination608ChannelNumber: [, , `Destination608ChannelNumber`],
        destination708ServiceNumber: [, , `Destination708ServiceNumber`],
    });
};
const se_EmbeddedSourceSettings = (input, context) => {
    return smithyClient.take(input, {
        convert608To708: [, , `Convert608To708`],
        source608ChannelNumber: [, , `Source608ChannelNumber`],
        source608TrackNumber: [, , `Source608TrackNumber`],
        terminateCaptions: [, , `TerminateCaptions`],
    });
};
const se_EncryptionContractConfiguration = (input, context) => {
    return smithyClient.take(input, {
        spekeAudioPreset: [, , `SpekeAudioPreset`],
        spekeVideoPreset: [, , `SpekeVideoPreset`],
    });
};
const se_EsamManifestConfirmConditionNotification = (input, context) => {
    return smithyClient.take(input, {
        mccXml: [, , `MccXml`],
    });
};
const se_EsamSettings = (input, context) => {
    return smithyClient.take(input, {
        manifestConfirmConditionNotification: [
            ,
            (_) => se_EsamManifestConfirmConditionNotification(_),
            `ManifestConfirmConditionNotification`,
        ],
        responseSignalPreroll: [, , `ResponseSignalPreroll`],
        signalProcessingNotification: [
            ,
            (_) => se_EsamSignalProcessingNotification(_),
            `SignalProcessingNotification`,
        ],
    });
};
const se_EsamSignalProcessingNotification = (input, context) => {
    return smithyClient.take(input, {
        sccXml: [, , `SccXml`],
    });
};
const se_ExtendedDataServices = (input, context) => {
    return smithyClient.take(input, {
        copyProtectionAction: [, , `CopyProtectionAction`],
        vchipAction: [, , `VchipAction`],
    });
};
const se_F4vSettings = (input, context) => {
    return smithyClient.take(input, {
        moovPlacement: [, , `MoovPlacement`],
    });
};
const se_FileGroupSettings = (input, context) => {
    return smithyClient.take(input, {
        destination: [, , `Destination`],
        destinationSettings: [, (_) => se_DestinationSettings(_), `DestinationSettings`],
    });
};
const se_FileSourceSettings = (input, context) => {
    return smithyClient.take(input, {
        byteRateLimit: [, , `ByteRateLimit`],
        convert608To708: [, , `Convert608To708`],
        convertPaintToPop: [, , `ConvertPaintToPop`],
        framerate: [, (_) => se_CaptionSourceFramerate(_), `Framerate`],
        sourceFile: [, , `SourceFile`],
        timeDelta: [, , `TimeDelta`],
        timeDeltaUnits: [, , `TimeDeltaUnits`],
        upconvertSTLToTeletext: [, , `UpconvertSTLToTeletext`],
    });
};
const se_FlacSettings = (input, context) => {
    return smithyClient.take(input, {
        bitDepth: [, , `BitDepth`],
        channels: [, , `Channels`],
        sampleRate: [, , `SampleRate`],
    });
};
const se_ForceIncludeRenditionSize = (input, context) => {
    return smithyClient.take(input, {
        height: [, , `Height`],
        width: [, , `Width`],
    });
};
const se_FrameCaptureSettings = (input, context) => {
    return smithyClient.take(input, {
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        maxCaptures: [, , `MaxCaptures`],
        quality: [, , `Quality`],
    });
};
const se_GifSettings = (input, context) => {
    return smithyClient.take(input, {
        framerateControl: [, , `FramerateControl`],
        framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
    });
};
const se_H264QvbrSettings = (input, context) => {
    return smithyClient.take(input, {
        maxAverageBitrate: [, , `MaxAverageBitrate`],
        qvbrQualityLevel: [, , `QvbrQualityLevel`],
        qvbrQualityLevelFineTune: [, smithyClient.serializeFloat, `QvbrQualityLevelFineTune`],
    });
};
const se_H264Settings = (input, context) => {
    return smithyClient.take(input, {
        adaptiveQuantization: [, , `AdaptiveQuantization`],
        bandwidthReductionFilter: [, (_) => se_BandwidthReductionFilter(_), `BandwidthReductionFilter`],
        bitrate: [, , `Bitrate`],
        codecLevel: [, , `CodecLevel`],
        codecProfile: [, , `CodecProfile`],
        dynamicSubGop: [, , `DynamicSubGop`],
        endOfStreamMarkers: [, , `EndOfStreamMarkers`],
        entropyEncoding: [, , `EntropyEncoding`],
        fieldEncoding: [, , `FieldEncoding`],
        flickerAdaptiveQuantization: [, , `FlickerAdaptiveQuantization`],
        framerateControl: [, , `FramerateControl`],
        framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        gopBReference: [, , `GopBReference`],
        gopClosedCadence: [, , `GopClosedCadence`],
        gopSize: [, smithyClient.serializeFloat, `GopSize`],
        gopSizeUnits: [, , `GopSizeUnits`],
        hrdBufferFinalFillPercentage: [, , `HrdBufferFinalFillPercentage`],
        hrdBufferInitialFillPercentage: [, , `HrdBufferInitialFillPercentage`],
        hrdBufferSize: [, , `HrdBufferSize`],
        interlaceMode: [, , `InterlaceMode`],
        maxBitrate: [, , `MaxBitrate`],
        minIInterval: [, , `MinIInterval`],
        numberBFramesBetweenReferenceFrames: [, , `NumberBFramesBetweenReferenceFrames`],
        numberReferenceFrames: [, , `NumberReferenceFrames`],
        parControl: [, , `ParControl`],
        parDenominator: [, , `ParDenominator`],
        parNumerator: [, , `ParNumerator`],
        perFrameMetrics: [, smithyClient._json, `PerFrameMetrics`],
        qualityTuningLevel: [, , `QualityTuningLevel`],
        qvbrSettings: [, (_) => se_H264QvbrSettings(_), `QvbrSettings`],
        rateControlMode: [, , `RateControlMode`],
        repeatPps: [, , `RepeatPps`],
        saliencyAwareEncoding: [, , `SaliencyAwareEncoding`],
        scanTypeConversionMode: [, , `ScanTypeConversionMode`],
        sceneChangeDetect: [, , `SceneChangeDetect`],
        slices: [, , `Slices`],
        slowPal: [, , `SlowPal`],
        softness: [, , `Softness`],
        spatialAdaptiveQuantization: [, , `SpatialAdaptiveQuantization`],
        syntax: [, , `Syntax`],
        telecine: [, , `Telecine`],
        temporalAdaptiveQuantization: [, , `TemporalAdaptiveQuantization`],
        unregisteredSeiTimecode: [, , `UnregisteredSeiTimecode`],
        writeMp4PackagingType: [, , `WriteMp4PackagingType`],
    });
};
const se_H265QvbrSettings = (input, context) => {
    return smithyClient.take(input, {
        maxAverageBitrate: [, , `MaxAverageBitrate`],
        qvbrQualityLevel: [, , `QvbrQualityLevel`],
        qvbrQualityLevelFineTune: [, smithyClient.serializeFloat, `QvbrQualityLevelFineTune`],
    });
};
const se_H265Settings = (input, context) => {
    return smithyClient.take(input, {
        adaptiveQuantization: [, , `AdaptiveQuantization`],
        alternateTransferFunctionSei: [, , `AlternateTransferFunctionSei`],
        bandwidthReductionFilter: [, (_) => se_BandwidthReductionFilter(_), `BandwidthReductionFilter`],
        bitrate: [, , `Bitrate`],
        codecLevel: [, , `CodecLevel`],
        codecProfile: [, , `CodecProfile`],
        deblocking: [, , `Deblocking`],
        dynamicSubGop: [, , `DynamicSubGop`],
        endOfStreamMarkers: [, , `EndOfStreamMarkers`],
        flickerAdaptiveQuantization: [, , `FlickerAdaptiveQuantization`],
        framerateControl: [, , `FramerateControl`],
        framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        gopBReference: [, , `GopBReference`],
        gopClosedCadence: [, , `GopClosedCadence`],
        gopSize: [, smithyClient.serializeFloat, `GopSize`],
        gopSizeUnits: [, , `GopSizeUnits`],
        hrdBufferFinalFillPercentage: [, , `HrdBufferFinalFillPercentage`],
        hrdBufferInitialFillPercentage: [, , `HrdBufferInitialFillPercentage`],
        hrdBufferSize: [, , `HrdBufferSize`],
        interlaceMode: [, , `InterlaceMode`],
        maxBitrate: [, , `MaxBitrate`],
        minIInterval: [, , `MinIInterval`],
        numberBFramesBetweenReferenceFrames: [, , `NumberBFramesBetweenReferenceFrames`],
        numberReferenceFrames: [, , `NumberReferenceFrames`],
        parControl: [, , `ParControl`],
        parDenominator: [, , `ParDenominator`],
        parNumerator: [, , `ParNumerator`],
        perFrameMetrics: [, smithyClient._json, `PerFrameMetrics`],
        qualityTuningLevel: [, , `QualityTuningLevel`],
        qvbrSettings: [, (_) => se_H265QvbrSettings(_), `QvbrSettings`],
        rateControlMode: [, , `RateControlMode`],
        sampleAdaptiveOffsetFilterMode: [, , `SampleAdaptiveOffsetFilterMode`],
        scanTypeConversionMode: [, , `ScanTypeConversionMode`],
        sceneChangeDetect: [, , `SceneChangeDetect`],
        slices: [, , `Slices`],
        slowPal: [, , `SlowPal`],
        spatialAdaptiveQuantization: [, , `SpatialAdaptiveQuantization`],
        telecine: [, , `Telecine`],
        temporalAdaptiveQuantization: [, , `TemporalAdaptiveQuantization`],
        temporalIds: [, , `TemporalIds`],
        tiles: [, , `Tiles`],
        unregisteredSeiTimecode: [, , `UnregisteredSeiTimecode`],
        writeMp4PackagingType: [, , `WriteMp4PackagingType`],
    });
};
const se_Hdr10Metadata = (input, context) => {
    return smithyClient.take(input, {
        bluePrimaryX: [, , `BluePrimaryX`],
        bluePrimaryY: [, , `BluePrimaryY`],
        greenPrimaryX: [, , `GreenPrimaryX`],
        greenPrimaryY: [, , `GreenPrimaryY`],
        maxContentLightLevel: [, , `MaxContentLightLevel`],
        maxFrameAverageLightLevel: [, , `MaxFrameAverageLightLevel`],
        maxLuminance: [, , `MaxLuminance`],
        minLuminance: [, , `MinLuminance`],
        redPrimaryX: [, , `RedPrimaryX`],
        redPrimaryY: [, , `RedPrimaryY`],
        whitePointX: [, , `WhitePointX`],
        whitePointY: [, , `WhitePointY`],
    });
};
const se_Hdr10Plus = (input, context) => {
    return smithyClient.take(input, {
        masteringMonitorNits: [, , `MasteringMonitorNits`],
        targetMonitorNits: [, , `TargetMonitorNits`],
    });
};
const se_HlsAdditionalManifest = (input, context) => {
    return smithyClient.take(input, {
        manifestNameModifier: [, , `ManifestNameModifier`],
        selectedOutputs: [, smithyClient._json, `SelectedOutputs`],
    });
};
const se_HlsCaptionLanguageMapping = (input, context) => {
    return smithyClient.take(input, {
        captionChannel: [, , `CaptionChannel`],
        customLanguageCode: [, , `CustomLanguageCode`],
        languageCode: [, , `LanguageCode`],
        languageDescription: [, , `LanguageDescription`],
    });
};
const se_HlsEncryptionSettings = (input, context) => {
    return smithyClient.take(input, {
        constantInitializationVector: [, , `ConstantInitializationVector`],
        encryptionMethod: [, , `EncryptionMethod`],
        initializationVectorInManifest: [, , `InitializationVectorInManifest`],
        offlineEncrypted: [, , `OfflineEncrypted`],
        spekeKeyProvider: [, (_) => se_SpekeKeyProvider(_), `SpekeKeyProvider`],
        staticKeyProvider: [, (_) => se_StaticKeyProvider(_), `StaticKeyProvider`],
        type: [, , `Type`],
    });
};
const se_HlsGroupSettings = (input, context) => {
    return smithyClient.take(input, {
        adMarkers: [, smithyClient._json, `AdMarkers`],
        additionalManifests: [, (_) => se___listOfHlsAdditionalManifest(_), `AdditionalManifests`],
        audioOnlyHeader: [, , `AudioOnlyHeader`],
        baseUrl: [, , `BaseUrl`],
        captionLanguageMappings: [, (_) => se___listOfHlsCaptionLanguageMapping(_), `CaptionLanguageMappings`],
        captionLanguageSetting: [, , `CaptionLanguageSetting`],
        captionSegmentLengthControl: [, , `CaptionSegmentLengthControl`],
        clientCache: [, , `ClientCache`],
        codecSpecification: [, , `CodecSpecification`],
        destination: [, , `Destination`],
        destinationSettings: [, (_) => se_DestinationSettings(_), `DestinationSettings`],
        directoryStructure: [, , `DirectoryStructure`],
        encryption: [, (_) => se_HlsEncryptionSettings(_), `Encryption`],
        imageBasedTrickPlay: [, , `ImageBasedTrickPlay`],
        imageBasedTrickPlaySettings: [
            ,
            (_) => se_HlsImageBasedTrickPlaySettings(_),
            `ImageBasedTrickPlaySettings`,
        ],
        manifestCompression: [, , `ManifestCompression`],
        manifestDurationFormat: [, , `ManifestDurationFormat`],
        minFinalSegmentLength: [, smithyClient.serializeFloat, `MinFinalSegmentLength`],
        minSegmentLength: [, , `MinSegmentLength`],
        outputSelection: [, , `OutputSelection`],
        programDateTime: [, , `ProgramDateTime`],
        programDateTimePeriod: [, , `ProgramDateTimePeriod`],
        progressiveWriteHlsManifest: [, , `ProgressiveWriteHlsManifest`],
        segmentControl: [, , `SegmentControl`],
        segmentLength: [, , `SegmentLength`],
        segmentLengthControl: [, , `SegmentLengthControl`],
        segmentsPerSubdirectory: [, , `SegmentsPerSubdirectory`],
        streamInfResolution: [, , `StreamInfResolution`],
        targetDurationCompatibilityMode: [, , `TargetDurationCompatibilityMode`],
        timedMetadataId3Frame: [, , `TimedMetadataId3Frame`],
        timedMetadataId3Period: [, , `TimedMetadataId3Period`],
        timestampDeltaMilliseconds: [, , `TimestampDeltaMilliseconds`],
    });
};
const se_HlsImageBasedTrickPlaySettings = (input, context) => {
    return smithyClient.take(input, {
        intervalCadence: [, , `IntervalCadence`],
        thumbnailHeight: [, , `ThumbnailHeight`],
        thumbnailInterval: [, smithyClient.serializeFloat, `ThumbnailInterval`],
        thumbnailWidth: [, , `ThumbnailWidth`],
        tileHeight: [, , `TileHeight`],
        tileWidth: [, , `TileWidth`],
    });
};
const se_HlsRenditionGroupSettings = (input, context) => {
    return smithyClient.take(input, {
        renditionGroupId: [, , `RenditionGroupId`],
        renditionLanguageCode: [, , `RenditionLanguageCode`],
        renditionName: [, , `RenditionName`],
    });
};
const se_HlsSettings = (input, context) => {
    return smithyClient.take(input, {
        audioGroupId: [, , `AudioGroupId`],
        audioOnlyContainer: [, , `AudioOnlyContainer`],
        audioRenditionSets: [, , `AudioRenditionSets`],
        audioTrackType: [, , `AudioTrackType`],
        descriptiveVideoServiceFlag: [, , `DescriptiveVideoServiceFlag`],
        iFrameOnlyManifest: [, , `IFrameOnlyManifest`],
        segmentModifier: [, , `SegmentModifier`],
    });
};
const se_HopDestination = (input, context) => {
    return smithyClient.take(input, {
        priority: [, , `Priority`],
        queue: [, , `Queue`],
        waitMinutes: [, , `WaitMinutes`],
    });
};
const se_Id3Insertion = (input, context) => {
    return smithyClient.take(input, {
        id3: [, , `Id3`],
        timecode: [, , `Timecode`],
    });
};
const se_ImageInserter = (input, context) => {
    return smithyClient.take(input, {
        insertableImages: [, (_) => se___listOfInsertableImage(_), `InsertableImages`],
        sdrReferenceWhiteLevel: [, , `SdrReferenceWhiteLevel`],
    });
};
const se_ImscDestinationSettings = (input, context) => {
    return smithyClient.take(input, {
        accessibility: [, , `Accessibility`],
        stylePassthrough: [, , `StylePassthrough`],
    });
};
const se_Input = (input, context) => {
    return smithyClient.take(input, {
        advancedInputFilter: [, , `AdvancedInputFilter`],
        advancedInputFilterSettings: [, (_) => se_AdvancedInputFilterSettings(_), `AdvancedInputFilterSettings`],
        audioSelectorGroups: [, (_) => se___mapOfAudioSelectorGroup(_), `AudioSelectorGroups`],
        audioSelectors: [, (_) => se___mapOfAudioSelector(_), `AudioSelectors`],
        captionSelectors: [, (_) => se___mapOfCaptionSelector(_), `CaptionSelectors`],
        crop: [, (_) => se_Rectangle(_), `Crop`],
        deblockFilter: [, , `DeblockFilter`],
        decryptionSettings: [, (_) => se_InputDecryptionSettings(_), `DecryptionSettings`],
        denoiseFilter: [, , `DenoiseFilter`],
        dolbyVisionMetadataXml: [, , `DolbyVisionMetadataXml`],
        dynamicAudioSelectors: [, (_) => se___mapOfDynamicAudioSelector(_), `DynamicAudioSelectors`],
        fileInput: [, , `FileInput`],
        filterEnable: [, , `FilterEnable`],
        filterStrength: [, , `FilterStrength`],
        imageInserter: [, (_) => se_ImageInserter(_), `ImageInserter`],
        inputClippings: [, (_) => se___listOfInputClipping(_), `InputClippings`],
        inputScanType: [, , `InputScanType`],
        position: [, (_) => se_Rectangle(_), `Position`],
        programNumber: [, , `ProgramNumber`],
        psiControl: [, , `PsiControl`],
        supplementalImps: [, smithyClient._json, `SupplementalImps`],
        tamsSettings: [, (_) => se_InputTamsSettings(_), `TamsSettings`],
        timecodeSource: [, , `TimecodeSource`],
        timecodeStart: [, , `TimecodeStart`],
        videoGenerator: [, (_) => se_InputVideoGenerator(_), `VideoGenerator`],
        videoOverlays: [, (_) => se___listOfVideoOverlay(_), `VideoOverlays`],
        videoSelector: [, (_) => se_VideoSelector(_), `VideoSelector`],
    });
};
const se_InputClipping = (input, context) => {
    return smithyClient.take(input, {
        endTimecode: [, , `EndTimecode`],
        startTimecode: [, , `StartTimecode`],
    });
};
const se_InputDecryptionSettings = (input, context) => {
    return smithyClient.take(input, {
        decryptionMode: [, , `DecryptionMode`],
        encryptedDecryptionKey: [, , `EncryptedDecryptionKey`],
        initializationVector: [, , `InitializationVector`],
        kmsKeyRegion: [, , `KmsKeyRegion`],
    });
};
const se_InputTamsSettings = (input, context) => {
    return smithyClient.take(input, {
        authConnectionArn: [, , `AuthConnectionArn`],
        gapHandling: [, , `GapHandling`],
        sourceId: [, , `SourceId`],
        timerange: [, , `Timerange`],
    });
};
const se_InputTemplate = (input, context) => {
    return smithyClient.take(input, {
        advancedInputFilter: [, , `AdvancedInputFilter`],
        advancedInputFilterSettings: [, (_) => se_AdvancedInputFilterSettings(_), `AdvancedInputFilterSettings`],
        audioSelectorGroups: [, (_) => se___mapOfAudioSelectorGroup(_), `AudioSelectorGroups`],
        audioSelectors: [, (_) => se___mapOfAudioSelector(_), `AudioSelectors`],
        captionSelectors: [, (_) => se___mapOfCaptionSelector(_), `CaptionSelectors`],
        crop: [, (_) => se_Rectangle(_), `Crop`],
        deblockFilter: [, , `DeblockFilter`],
        denoiseFilter: [, , `DenoiseFilter`],
        dolbyVisionMetadataXml: [, , `DolbyVisionMetadataXml`],
        dynamicAudioSelectors: [, (_) => se___mapOfDynamicAudioSelector(_), `DynamicAudioSelectors`],
        filterEnable: [, , `FilterEnable`],
        filterStrength: [, , `FilterStrength`],
        imageInserter: [, (_) => se_ImageInserter(_), `ImageInserter`],
        inputClippings: [, (_) => se___listOfInputClipping(_), `InputClippings`],
        inputScanType: [, , `InputScanType`],
        position: [, (_) => se_Rectangle(_), `Position`],
        programNumber: [, , `ProgramNumber`],
        psiControl: [, , `PsiControl`],
        timecodeSource: [, , `TimecodeSource`],
        timecodeStart: [, , `TimecodeStart`],
        videoOverlays: [, (_) => se___listOfVideoOverlay(_), `VideoOverlays`],
        videoSelector: [, (_) => se_VideoSelector(_), `VideoSelector`],
    });
};
const se_InputVideoGenerator = (input, context) => {
    return smithyClient.take(input, {
        channels: [, , `Channels`],
        duration: [, , `Duration`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        height: [, , `Height`],
        sampleRate: [, , `SampleRate`],
        width: [, , `Width`],
    });
};
const se_InsertableImage = (input, context) => {
    return smithyClient.take(input, {
        duration: [, , `Duration`],
        fadeIn: [, , `FadeIn`],
        fadeOut: [, , `FadeOut`],
        height: [, , `Height`],
        imageInserterInput: [, , `ImageInserterInput`],
        imageX: [, , `ImageX`],
        imageY: [, , `ImageY`],
        layer: [, , `Layer`],
        opacity: [, , `Opacity`],
        startTime: [, , `StartTime`],
        width: [, , `Width`],
    });
};
const se_JobSettings = (input, context) => {
    return smithyClient.take(input, {
        adAvailOffset: [, , `AdAvailOffset`],
        availBlanking: [, (_) => se_AvailBlanking(_), `AvailBlanking`],
        colorConversion3DLUTSettings: [
            ,
            (_) => se___listOfColorConversion3DLUTSetting(_),
            `ColorConversion3DLUTSettings`,
        ],
        esam: [, (_) => se_EsamSettings(_), `Esam`],
        extendedDataServices: [, (_) => se_ExtendedDataServices(_), `ExtendedDataServices`],
        followSource: [, , `FollowSource`],
        inputs: [, (_) => se___listOfInput(_), `Inputs`],
        kantarWatermark: [, (_) => se_KantarWatermarkSettings(_), `KantarWatermark`],
        motionImageInserter: [, (_) => se_MotionImageInserter(_), `MotionImageInserter`],
        nielsenConfiguration: [, (_) => se_NielsenConfiguration(_), `NielsenConfiguration`],
        nielsenNonLinearWatermark: [, (_) => se_NielsenNonLinearWatermarkSettings(_), `NielsenNonLinearWatermark`],
        outputGroups: [, (_) => se___listOfOutputGroup(_), `OutputGroups`],
        timecodeConfig: [, (_) => se_TimecodeConfig(_), `TimecodeConfig`],
        timedMetadataInsertion: [, (_) => se_TimedMetadataInsertion(_), `TimedMetadataInsertion`],
    });
};
const se_JobsQueryFilter = (input, context) => {
    return smithyClient.take(input, {
        key: [, , `Key`],
        values: [, smithyClient._json, `Values`],
    });
};
const se_JobTemplateSettings = (input, context) => {
    return smithyClient.take(input, {
        adAvailOffset: [, , `AdAvailOffset`],
        availBlanking: [, (_) => se_AvailBlanking(_), `AvailBlanking`],
        colorConversion3DLUTSettings: [
            ,
            (_) => se___listOfColorConversion3DLUTSetting(_),
            `ColorConversion3DLUTSettings`,
        ],
        esam: [, (_) => se_EsamSettings(_), `Esam`],
        extendedDataServices: [, (_) => se_ExtendedDataServices(_), `ExtendedDataServices`],
        followSource: [, , `FollowSource`],
        inputs: [, (_) => se___listOfInputTemplate(_), `Inputs`],
        kantarWatermark: [, (_) => se_KantarWatermarkSettings(_), `KantarWatermark`],
        motionImageInserter: [, (_) => se_MotionImageInserter(_), `MotionImageInserter`],
        nielsenConfiguration: [, (_) => se_NielsenConfiguration(_), `NielsenConfiguration`],
        nielsenNonLinearWatermark: [, (_) => se_NielsenNonLinearWatermarkSettings(_), `NielsenNonLinearWatermark`],
        outputGroups: [, (_) => se___listOfOutputGroup(_), `OutputGroups`],
        timecodeConfig: [, (_) => se_TimecodeConfig(_), `TimecodeConfig`],
        timedMetadataInsertion: [, (_) => se_TimedMetadataInsertion(_), `TimedMetadataInsertion`],
    });
};
const se_KantarWatermarkSettings = (input, context) => {
    return smithyClient.take(input, {
        channelName: [, , `ChannelName`],
        contentReference: [, , `ContentReference`],
        credentialsSecretName: [, , `CredentialsSecretName`],
        fileOffset: [, smithyClient.serializeFloat, `FileOffset`],
        kantarLicenseId: [, , `KantarLicenseId`],
        kantarServerUrl: [, , `KantarServerUrl`],
        logDestination: [, , `LogDestination`],
        metadata3: [, , `Metadata3`],
        metadata4: [, , `Metadata4`],
        metadata5: [, , `Metadata5`],
        metadata6: [, , `Metadata6`],
        metadata7: [, , `Metadata7`],
        metadata8: [, , `Metadata8`],
    });
};
const se_M2tsScte35Esam = (input, context) => {
    return smithyClient.take(input, {
        scte35EsamPid: [, , `Scte35EsamPid`],
    });
};
const se_M2tsSettings = (input, context) => {
    return smithyClient.take(input, {
        audioBufferModel: [, , `AudioBufferModel`],
        audioDuration: [, , `AudioDuration`],
        audioFramesPerPes: [, , `AudioFramesPerPes`],
        audioPids: [, smithyClient._json, `AudioPids`],
        audioPtsOffsetDelta: [, , `AudioPtsOffsetDelta`],
        bitrate: [, , `Bitrate`],
        bufferModel: [, , `BufferModel`],
        dataPTSControl: [, , `DataPTSControl`],
        dvbNitSettings: [, (_) => se_DvbNitSettings(_), `DvbNitSettings`],
        dvbSdtSettings: [, (_) => se_DvbSdtSettings(_), `DvbSdtSettings`],
        dvbSubPids: [, smithyClient._json, `DvbSubPids`],
        dvbTdtSettings: [, (_) => se_DvbTdtSettings(_), `DvbTdtSettings`],
        dvbTeletextPid: [, , `DvbTeletextPid`],
        ebpAudioInterval: [, , `EbpAudioInterval`],
        ebpPlacement: [, , `EbpPlacement`],
        esRateInPes: [, , `EsRateInPes`],
        forceTsVideoEbpOrder: [, , `ForceTsVideoEbpOrder`],
        fragmentTime: [, smithyClient.serializeFloat, `FragmentTime`],
        klvMetadata: [, , `KlvMetadata`],
        maxPcrInterval: [, , `MaxPcrInterval`],
        minEbpInterval: [, , `MinEbpInterval`],
        nielsenId3: [, , `NielsenId3`],
        nullPacketBitrate: [, smithyClient.serializeFloat, `NullPacketBitrate`],
        patInterval: [, , `PatInterval`],
        pcrControl: [, , `PcrControl`],
        pcrPid: [, , `PcrPid`],
        pmtInterval: [, , `PmtInterval`],
        pmtPid: [, , `PmtPid`],
        preventBufferUnderflow: [, , `PreventBufferUnderflow`],
        privateMetadataPid: [, , `PrivateMetadataPid`],
        programNumber: [, , `ProgramNumber`],
        ptsOffset: [, , `PtsOffset`],
        ptsOffsetMode: [, , `PtsOffsetMode`],
        rateMode: [, , `RateMode`],
        scte35Esam: [, (_) => se_M2tsScte35Esam(_), `Scte35Esam`],
        scte35Pid: [, , `Scte35Pid`],
        scte35Source: [, , `Scte35Source`],
        segmentationMarkers: [, , `SegmentationMarkers`],
        segmentationStyle: [, , `SegmentationStyle`],
        segmentationTime: [, smithyClient.serializeFloat, `SegmentationTime`],
        timedMetadataPid: [, , `TimedMetadataPid`],
        transportStreamId: [, , `TransportStreamId`],
        videoPid: [, , `VideoPid`],
    });
};
const se_M3u8Settings = (input, context) => {
    return smithyClient.take(input, {
        audioDuration: [, , `AudioDuration`],
        audioFramesPerPes: [, , `AudioFramesPerPes`],
        audioPids: [, smithyClient._json, `AudioPids`],
        audioPtsOffsetDelta: [, , `AudioPtsOffsetDelta`],
        dataPTSControl: [, , `DataPTSControl`],
        maxPcrInterval: [, , `MaxPcrInterval`],
        nielsenId3: [, , `NielsenId3`],
        patInterval: [, , `PatInterval`],
        pcrControl: [, , `PcrControl`],
        pcrPid: [, , `PcrPid`],
        pmtInterval: [, , `PmtInterval`],
        pmtPid: [, , `PmtPid`],
        privateMetadataPid: [, , `PrivateMetadataPid`],
        programNumber: [, , `ProgramNumber`],
        ptsOffset: [, , `PtsOffset`],
        ptsOffsetMode: [, , `PtsOffsetMode`],
        scte35Pid: [, , `Scte35Pid`],
        scte35Source: [, , `Scte35Source`],
        timedMetadata: [, , `TimedMetadata`],
        timedMetadataPid: [, , `TimedMetadataPid`],
        transportStreamId: [, , `TransportStreamId`],
        videoPid: [, , `VideoPid`],
    });
};
const se_MinBottomRenditionSize = (input, context) => {
    return smithyClient.take(input, {
        height: [, , `Height`],
        width: [, , `Width`],
    });
};
const se_MinTopRenditionSize = (input, context) => {
    return smithyClient.take(input, {
        height: [, , `Height`],
        width: [, , `Width`],
    });
};
const se_MotionImageInserter = (input, context) => {
    return smithyClient.take(input, {
        framerate: [, (_) => se_MotionImageInsertionFramerate(_), `Framerate`],
        input: [, , `Input`],
        insertionMode: [, , `InsertionMode`],
        offset: [, (_) => se_MotionImageInsertionOffset(_), `Offset`],
        playback: [, , `Playback`],
        startTime: [, , `StartTime`],
    });
};
const se_MotionImageInsertionFramerate = (input, context) => {
    return smithyClient.take(input, {
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
    });
};
const se_MotionImageInsertionOffset = (input, context) => {
    return smithyClient.take(input, {
        imageX: [, , `ImageX`],
        imageY: [, , `ImageY`],
    });
};
const se_MovSettings = (input, context) => {
    return smithyClient.take(input, {
        clapAtom: [, , `ClapAtom`],
        cslgAtom: [, , `CslgAtom`],
        mpeg2FourCCControl: [, , `Mpeg2FourCCControl`],
        paddingControl: [, , `PaddingControl`],
        reference: [, , `Reference`],
    });
};
const se_Mp2Settings = (input, context) => {
    return smithyClient.take(input, {
        audioDescriptionMix: [, , `AudioDescriptionMix`],
        bitrate: [, , `Bitrate`],
        channels: [, , `Channels`],
        sampleRate: [, , `SampleRate`],
    });
};
const se_Mp3Settings = (input, context) => {
    return smithyClient.take(input, {
        bitrate: [, , `Bitrate`],
        channels: [, , `Channels`],
        rateControlMode: [, , `RateControlMode`],
        sampleRate: [, , `SampleRate`],
        vbrQuality: [, , `VbrQuality`],
    });
};
const se_Mp4Settings = (input, context) => {
    return smithyClient.take(input, {
        audioDuration: [, , `AudioDuration`],
        c2paManifest: [, , `C2paManifest`],
        certificateSecret: [, , `CertificateSecret`],
        cslgAtom: [, , `CslgAtom`],
        cttsVersion: [, , `CttsVersion`],
        freeSpaceBox: [, , `FreeSpaceBox`],
        moovPlacement: [, , `MoovPlacement`],
        mp4MajorBrand: [, , `Mp4MajorBrand`],
        signingKmsKey: [, , `SigningKmsKey`],
    });
};
const se_MpdSettings = (input, context) => {
    return smithyClient.take(input, {
        accessibilityCaptionHints: [, , `AccessibilityCaptionHints`],
        audioDuration: [, , `AudioDuration`],
        captionContainerType: [, , `CaptionContainerType`],
        klvMetadata: [, , `KlvMetadata`],
        manifestMetadataSignaling: [, , `ManifestMetadataSignaling`],
        scte35Esam: [, , `Scte35Esam`],
        scte35Source: [, , `Scte35Source`],
        timedMetadata: [, , `TimedMetadata`],
        timedMetadataBoxVersion: [, , `TimedMetadataBoxVersion`],
        timedMetadataSchemeIdUri: [, , `TimedMetadataSchemeIdUri`],
        timedMetadataValue: [, , `TimedMetadataValue`],
    });
};
const se_Mpeg2Settings = (input, context) => {
    return smithyClient.take(input, {
        adaptiveQuantization: [, , `AdaptiveQuantization`],
        bitrate: [, , `Bitrate`],
        codecLevel: [, , `CodecLevel`],
        codecProfile: [, , `CodecProfile`],
        dynamicSubGop: [, , `DynamicSubGop`],
        framerateControl: [, , `FramerateControl`],
        framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        gopClosedCadence: [, , `GopClosedCadence`],
        gopSize: [, smithyClient.serializeFloat, `GopSize`],
        gopSizeUnits: [, , `GopSizeUnits`],
        hrdBufferFinalFillPercentage: [, , `HrdBufferFinalFillPercentage`],
        hrdBufferInitialFillPercentage: [, , `HrdBufferInitialFillPercentage`],
        hrdBufferSize: [, , `HrdBufferSize`],
        interlaceMode: [, , `InterlaceMode`],
        intraDcPrecision: [, , `IntraDcPrecision`],
        maxBitrate: [, , `MaxBitrate`],
        minIInterval: [, , `MinIInterval`],
        numberBFramesBetweenReferenceFrames: [, , `NumberBFramesBetweenReferenceFrames`],
        parControl: [, , `ParControl`],
        parDenominator: [, , `ParDenominator`],
        parNumerator: [, , `ParNumerator`],
        perFrameMetrics: [, smithyClient._json, `PerFrameMetrics`],
        qualityTuningLevel: [, , `QualityTuningLevel`],
        rateControlMode: [, , `RateControlMode`],
        scanTypeConversionMode: [, , `ScanTypeConversionMode`],
        sceneChangeDetect: [, , `SceneChangeDetect`],
        slowPal: [, , `SlowPal`],
        softness: [, , `Softness`],
        spatialAdaptiveQuantization: [, , `SpatialAdaptiveQuantization`],
        syntax: [, , `Syntax`],
        telecine: [, , `Telecine`],
        temporalAdaptiveQuantization: [, , `TemporalAdaptiveQuantization`],
    });
};
const se_MsSmoothAdditionalManifest = (input, context) => {
    return smithyClient.take(input, {
        manifestNameModifier: [, , `ManifestNameModifier`],
        selectedOutputs: [, smithyClient._json, `SelectedOutputs`],
    });
};
const se_MsSmoothEncryptionSettings = (input, context) => {
    return smithyClient.take(input, {
        spekeKeyProvider: [, (_) => se_SpekeKeyProvider(_), `SpekeKeyProvider`],
    });
};
const se_MsSmoothGroupSettings = (input, context) => {
    return smithyClient.take(input, {
        additionalManifests: [, (_) => se___listOfMsSmoothAdditionalManifest(_), `AdditionalManifests`],
        audioDeduplication: [, , `AudioDeduplication`],
        destination: [, , `Destination`],
        destinationSettings: [, (_) => se_DestinationSettings(_), `DestinationSettings`],
        encryption: [, (_) => se_MsSmoothEncryptionSettings(_), `Encryption`],
        fragmentLength: [, , `FragmentLength`],
        fragmentLengthControl: [, , `FragmentLengthControl`],
        manifestEncoding: [, , `ManifestEncoding`],
    });
};
const se_MxfSettings = (input, context) => {
    return smithyClient.take(input, {
        afdSignaling: [, , `AfdSignaling`],
        profile: [, , `Profile`],
        xavcProfileSettings: [, (_) => se_MxfXavcProfileSettings(_), `XavcProfileSettings`],
    });
};
const se_MxfXavcProfileSettings = (input, context) => {
    return smithyClient.take(input, {
        durationMode: [, , `DurationMode`],
        maxAncDataSize: [, , `MaxAncDataSize`],
    });
};
const se_NexGuardFileMarkerSettings = (input, context) => {
    return smithyClient.take(input, {
        license: [, , `License`],
        payload: [, , `Payload`],
        preset: [, , `Preset`],
        strength: [, , `Strength`],
    });
};
const se_NielsenConfiguration = (input, context) => {
    return smithyClient.take(input, {
        breakoutCode: [, , `BreakoutCode`],
        distributorId: [, , `DistributorId`],
    });
};
const se_NielsenNonLinearWatermarkSettings = (input, context) => {
    return smithyClient.take(input, {
        activeWatermarkProcess: [, , `ActiveWatermarkProcess`],
        adiFilename: [, , `AdiFilename`],
        assetId: [, , `AssetId`],
        assetName: [, , `AssetName`],
        cbetSourceId: [, , `CbetSourceId`],
        episodeId: [, , `EpisodeId`],
        metadataDestination: [, , `MetadataDestination`],
        sourceId: [, , `SourceId`],
        sourceWatermarkStatus: [, , `SourceWatermarkStatus`],
        ticServerUrl: [, , `TicServerUrl`],
        uniqueTicPerAudioTrack: [, , `UniqueTicPerAudioTrack`],
    });
};
const se_NoiseReducer = (input, context) => {
    return smithyClient.take(input, {
        filter: [, , `Filter`],
        filterSettings: [, (_) => se_NoiseReducerFilterSettings(_), `FilterSettings`],
        spatialFilterSettings: [, (_) => se_NoiseReducerSpatialFilterSettings(_), `SpatialFilterSettings`],
        temporalFilterSettings: [, (_) => se_NoiseReducerTemporalFilterSettings(_), `TemporalFilterSettings`],
    });
};
const se_NoiseReducerFilterSettings = (input, context) => {
    return smithyClient.take(input, {
        strength: [, , `Strength`],
    });
};
const se_NoiseReducerSpatialFilterSettings = (input, context) => {
    return smithyClient.take(input, {
        postFilterSharpenStrength: [, , `PostFilterSharpenStrength`],
        speed: [, , `Speed`],
        strength: [, , `Strength`],
    });
};
const se_NoiseReducerTemporalFilterSettings = (input, context) => {
    return smithyClient.take(input, {
        aggressiveMode: [, , `AggressiveMode`],
        postTemporalSharpening: [, , `PostTemporalSharpening`],
        postTemporalSharpeningStrength: [, , `PostTemporalSharpeningStrength`],
        speed: [, , `Speed`],
        strength: [, , `Strength`],
    });
};
const se_OpusSettings = (input, context) => {
    return smithyClient.take(input, {
        bitrate: [, , `Bitrate`],
        channels: [, , `Channels`],
        sampleRate: [, , `SampleRate`],
    });
};
const se_Output = (input, context) => {
    return smithyClient.take(input, {
        audioDescriptions: [, (_) => se___listOfAudioDescription(_), `AudioDescriptions`],
        captionDescriptions: [, (_) => se___listOfCaptionDescription(_), `CaptionDescriptions`],
        containerSettings: [, (_) => se_ContainerSettings(_), `ContainerSettings`],
        extension: [, , `Extension`],
        nameModifier: [, , `NameModifier`],
        outputSettings: [, (_) => se_OutputSettings(_), `OutputSettings`],
        preset: [, , `Preset`],
        videoDescription: [, (_) => se_VideoDescription(_), `VideoDescription`],
    });
};
const se_OutputChannelMapping = (input, context) => {
    return smithyClient.take(input, {
        inputChannels: [, smithyClient._json, `InputChannels`],
        inputChannelsFineTune: [, (_) => se___listOf__doubleMinNegative60Max6(_), `InputChannelsFineTune`],
    });
};
const se_OutputGroup = (input, context) => {
    return smithyClient.take(input, {
        automatedEncodingSettings: [, (_) => se_AutomatedEncodingSettings(_), `AutomatedEncodingSettings`],
        customName: [, , `CustomName`],
        name: [, , `Name`],
        outputGroupSettings: [, (_) => se_OutputGroupSettings(_), `OutputGroupSettings`],
        outputs: [, (_) => se___listOfOutput(_), `Outputs`],
    });
};
const se_OutputGroupSettings = (input, context) => {
    return smithyClient.take(input, {
        cmafGroupSettings: [, (_) => se_CmafGroupSettings(_), `CmafGroupSettings`],
        dashIsoGroupSettings: [, (_) => se_DashIsoGroupSettings(_), `DashIsoGroupSettings`],
        fileGroupSettings: [, (_) => se_FileGroupSettings(_), `FileGroupSettings`],
        hlsGroupSettings: [, (_) => se_HlsGroupSettings(_), `HlsGroupSettings`],
        msSmoothGroupSettings: [, (_) => se_MsSmoothGroupSettings(_), `MsSmoothGroupSettings`],
        perFrameMetrics: [, smithyClient._json, `PerFrameMetrics`],
        type: [, , `Type`],
    });
};
const se_OutputSettings = (input, context) => {
    return smithyClient.take(input, {
        hlsSettings: [, (_) => se_HlsSettings(_), `HlsSettings`],
    });
};
const se_PartnerWatermarking = (input, context) => {
    return smithyClient.take(input, {
        nexguardFileMarkerSettings: [, (_) => se_NexGuardFileMarkerSettings(_), `NexguardFileMarkerSettings`],
    });
};
const se_Policy = (input, context) => {
    return smithyClient.take(input, {
        httpInputs: [, , `HttpInputs`],
        httpsInputs: [, , `HttpsInputs`],
        s3Inputs: [, , `S3Inputs`],
    });
};
const se_PresetSettings = (input, context) => {
    return smithyClient.take(input, {
        audioDescriptions: [, (_) => se___listOfAudioDescription(_), `AudioDescriptions`],
        captionDescriptions: [, (_) => se___listOfCaptionDescriptionPreset(_), `CaptionDescriptions`],
        containerSettings: [, (_) => se_ContainerSettings(_), `ContainerSettings`],
        videoDescription: [, (_) => se_VideoDescription(_), `VideoDescription`],
    });
};
const se_ProbeInputFile = (input, context) => {
    return smithyClient.take(input, {
        fileUrl: [, , `FileUrl`],
    });
};
const se_ProresSettings = (input, context) => {
    return smithyClient.take(input, {
        chromaSampling: [, , `ChromaSampling`],
        codecProfile: [, , `CodecProfile`],
        framerateControl: [, , `FramerateControl`],
        framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        interlaceMode: [, , `InterlaceMode`],
        parControl: [, , `ParControl`],
        parDenominator: [, , `ParDenominator`],
        parNumerator: [, , `ParNumerator`],
        perFrameMetrics: [, smithyClient._json, `PerFrameMetrics`],
        scanTypeConversionMode: [, , `ScanTypeConversionMode`],
        slowPal: [, , `SlowPal`],
        telecine: [, , `Telecine`],
    });
};
const se_Rectangle = (input, context) => {
    return smithyClient.take(input, {
        height: [, , `Height`],
        width: [, , `Width`],
        x: [, , `X`],
        y: [, , `Y`],
    });
};
const se_RemixSettings = (input, context) => {
    return smithyClient.take(input, {
        audioDescriptionAudioChannel: [, , `AudioDescriptionAudioChannel`],
        audioDescriptionDataChannel: [, , `AudioDescriptionDataChannel`],
        channelMapping: [, (_) => se_ChannelMapping(_), `ChannelMapping`],
        channelsIn: [, , `ChannelsIn`],
        channelsOut: [, , `ChannelsOut`],
    });
};
const se_ReservationPlanSettings = (input, context) => {
    return smithyClient.take(input, {
        commitment: [, , `Commitment`],
        renewalType: [, , `RenewalType`],
        reservedSlots: [, , `ReservedSlots`],
    });
};
const se_S3DestinationAccessControl = (input, context) => {
    return smithyClient.take(input, {
        cannedAcl: [, , `CannedAcl`],
    });
};
const se_S3DestinationSettings = (input, context) => {
    return smithyClient.take(input, {
        accessControl: [, (_) => se_S3DestinationAccessControl(_), `AccessControl`],
        encryption: [, (_) => se_S3EncryptionSettings(_), `Encryption`],
        storageClass: [, , `StorageClass`],
    });
};
const se_S3EncryptionSettings = (input, context) => {
    return smithyClient.take(input, {
        encryptionType: [, , `EncryptionType`],
        kmsEncryptionContext: [, , `KmsEncryptionContext`],
        kmsKeyArn: [, , `KmsKeyArn`],
    });
};
const se_SccDestinationSettings = (input, context) => {
    return smithyClient.take(input, {
        framerate: [, , `Framerate`],
    });
};
const se_SpekeKeyProvider = (input, context) => {
    return smithyClient.take(input, {
        certificateArn: [, , `CertificateArn`],
        encryptionContractConfiguration: [
            ,
            (_) => se_EncryptionContractConfiguration(_),
            `EncryptionContractConfiguration`,
        ],
        resourceId: [, , `ResourceId`],
        systemIds: [, smithyClient._json, `SystemIds`],
        url: [, , `Url`],
    });
};
const se_SpekeKeyProviderCmaf = (input, context) => {
    return smithyClient.take(input, {
        certificateArn: [, , `CertificateArn`],
        dashSignaledSystemIds: [, smithyClient._json, `DashSignaledSystemIds`],
        encryptionContractConfiguration: [
            ,
            (_) => se_EncryptionContractConfiguration(_),
            `EncryptionContractConfiguration`,
        ],
        hlsSignaledSystemIds: [, smithyClient._json, `HlsSignaledSystemIds`],
        resourceId: [, , `ResourceId`],
        url: [, , `Url`],
    });
};
const se_SrtDestinationSettings = (input, context) => {
    return smithyClient.take(input, {
        stylePassthrough: [, , `StylePassthrough`],
    });
};
const se_StaticKeyProvider = (input, context) => {
    return smithyClient.take(input, {
        keyFormat: [, , `KeyFormat`],
        keyFormatVersions: [, , `KeyFormatVersions`],
        staticKeyValue: [, , `StaticKeyValue`],
        url: [, , `Url`],
    });
};
const se_TeletextDestinationSettings = (input, context) => {
    return smithyClient.take(input, {
        pageNumber: [, , `PageNumber`],
        pageTypes: [, smithyClient._json, `PageTypes`],
    });
};
const se_TeletextSourceSettings = (input, context) => {
    return smithyClient.take(input, {
        pageNumber: [, , `PageNumber`],
    });
};
const se_TimecodeBurnin = (input, context) => {
    return smithyClient.take(input, {
        fontSize: [, , `FontSize`],
        position: [, , `Position`],
        prefix: [, , `Prefix`],
    });
};
const se_TimecodeConfig = (input, context) => {
    return smithyClient.take(input, {
        anchor: [, , `Anchor`],
        source: [, , `Source`],
        start: [, , `Start`],
        timestampOffset: [, , `TimestampOffset`],
    });
};
const se_TimedMetadataInsertion = (input, context) => {
    return smithyClient.take(input, {
        id3Insertions: [, (_) => se___listOfId3Insertion(_), `Id3Insertions`],
    });
};
const se_TrackSourceSettings = (input, context) => {
    return smithyClient.take(input, {
        trackNumber: [, , `TrackNumber`],
    });
};
const se_TtmlDestinationSettings = (input, context) => {
    return smithyClient.take(input, {
        stylePassthrough: [, , `StylePassthrough`],
    });
};
const se_UncompressedSettings = (input, context) => {
    return smithyClient.take(input, {
        fourcc: [, , `Fourcc`],
        framerateControl: [, , `FramerateControl`],
        framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        interlaceMode: [, , `InterlaceMode`],
        scanTypeConversionMode: [, , `ScanTypeConversionMode`],
        slowPal: [, , `SlowPal`],
        telecine: [, , `Telecine`],
    });
};
const se_Vc3Settings = (input, context) => {
    return smithyClient.take(input, {
        framerateControl: [, , `FramerateControl`],
        framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        interlaceMode: [, , `InterlaceMode`],
        scanTypeConversionMode: [, , `ScanTypeConversionMode`],
        slowPal: [, , `SlowPal`],
        telecine: [, , `Telecine`],
        vc3Class: [, , `Vc3Class`],
    });
};
const se_VideoCodecSettings = (input, context) => {
    return smithyClient.take(input, {
        av1Settings: [, (_) => se_Av1Settings(_), `Av1Settings`],
        avcIntraSettings: [, (_) => se_AvcIntraSettings(_), `AvcIntraSettings`],
        codec: [, , `Codec`],
        frameCaptureSettings: [, (_) => se_FrameCaptureSettings(_), `FrameCaptureSettings`],
        gifSettings: [, (_) => se_GifSettings(_), `GifSettings`],
        h264Settings: [, (_) => se_H264Settings(_), `H264Settings`],
        h265Settings: [, (_) => se_H265Settings(_), `H265Settings`],
        mpeg2Settings: [, (_) => se_Mpeg2Settings(_), `Mpeg2Settings`],
        proresSettings: [, (_) => se_ProresSettings(_), `ProresSettings`],
        uncompressedSettings: [, (_) => se_UncompressedSettings(_), `UncompressedSettings`],
        vc3Settings: [, (_) => se_Vc3Settings(_), `Vc3Settings`],
        vp8Settings: [, (_) => se_Vp8Settings(_), `Vp8Settings`],
        vp9Settings: [, (_) => se_Vp9Settings(_), `Vp9Settings`],
        xavcSettings: [, (_) => se_XavcSettings(_), `XavcSettings`],
    });
};
const se_VideoDescription = (input, context) => {
    return smithyClient.take(input, {
        afdSignaling: [, , `AfdSignaling`],
        antiAlias: [, , `AntiAlias`],
        chromaPositionMode: [, , `ChromaPositionMode`],
        codecSettings: [, (_) => se_VideoCodecSettings(_), `CodecSettings`],
        colorMetadata: [, , `ColorMetadata`],
        crop: [, (_) => se_Rectangle(_), `Crop`],
        dropFrameTimecode: [, , `DropFrameTimecode`],
        fixedAfd: [, , `FixedAfd`],
        height: [, , `Height`],
        position: [, (_) => se_Rectangle(_), `Position`],
        respondToAfd: [, , `RespondToAfd`],
        scalingBehavior: [, , `ScalingBehavior`],
        sharpness: [, , `Sharpness`],
        timecodeInsertion: [, , `TimecodeInsertion`],
        timecodeTrack: [, , `TimecodeTrack`],
        videoPreprocessors: [, (_) => se_VideoPreprocessor(_), `VideoPreprocessors`],
        width: [, , `Width`],
    });
};
const se_VideoOverlay = (input, context) => {
    return smithyClient.take(input, {
        crop: [, (_) => se_VideoOverlayCrop(_), `Crop`],
        endTimecode: [, , `EndTimecode`],
        initialPosition: [, (_) => se_VideoOverlayPosition(_), `InitialPosition`],
        input: [, (_) => se_VideoOverlayInput(_), `Input`],
        playback: [, , `Playback`],
        startTimecode: [, , `StartTimecode`],
        transitions: [, (_) => se___listOfVideoOverlayTransition(_), `Transitions`],
    });
};
const se_VideoOverlayCrop = (input, context) => {
    return smithyClient.take(input, {
        height: [, , `Height`],
        unit: [, , `Unit`],
        width: [, , `Width`],
        x: [, , `X`],
        y: [, , `Y`],
    });
};
const se_VideoOverlayInput = (input, context) => {
    return smithyClient.take(input, {
        fileInput: [, , `FileInput`],
        inputClippings: [, (_) => se___listOfVideoOverlayInputClipping(_), `InputClippings`],
        timecodeSource: [, , `TimecodeSource`],
        timecodeStart: [, , `TimecodeStart`],
    });
};
const se_VideoOverlayInputClipping = (input, context) => {
    return smithyClient.take(input, {
        endTimecode: [, , `EndTimecode`],
        startTimecode: [, , `StartTimecode`],
    });
};
const se_VideoOverlayPosition = (input, context) => {
    return smithyClient.take(input, {
        height: [, , `Height`],
        unit: [, , `Unit`],
        width: [, , `Width`],
        xPosition: [, , `XPosition`],
        yPosition: [, , `YPosition`],
    });
};
const se_VideoOverlayTransition = (input, context) => {
    return smithyClient.take(input, {
        endPosition: [, (_) => se_VideoOverlayPosition(_), `EndPosition`],
        endTimecode: [, , `EndTimecode`],
        startTimecode: [, , `StartTimecode`],
    });
};
const se_VideoPreprocessor = (input, context) => {
    return smithyClient.take(input, {
        colorCorrector: [, (_) => se_ColorCorrector(_), `ColorCorrector`],
        deinterlacer: [, (_) => se_Deinterlacer(_), `Deinterlacer`],
        dolbyVision: [, (_) => se_DolbyVision(_), `DolbyVision`],
        hdr10Plus: [, (_) => se_Hdr10Plus(_), `Hdr10Plus`],
        imageInserter: [, (_) => se_ImageInserter(_), `ImageInserter`],
        noiseReducer: [, (_) => se_NoiseReducer(_), `NoiseReducer`],
        partnerWatermarking: [, (_) => se_PartnerWatermarking(_), `PartnerWatermarking`],
        timecodeBurnin: [, (_) => se_TimecodeBurnin(_), `TimecodeBurnin`],
    });
};
const se_VideoSelector = (input, context) => {
    return smithyClient.take(input, {
        alphaBehavior: [, , `AlphaBehavior`],
        colorSpace: [, , `ColorSpace`],
        colorSpaceUsage: [, , `ColorSpaceUsage`],
        embeddedTimecodeOverride: [, , `EmbeddedTimecodeOverride`],
        hdr10Metadata: [, (_) => se_Hdr10Metadata(_), `Hdr10Metadata`],
        maxLuminance: [, , `MaxLuminance`],
        padVideo: [, , `PadVideo`],
        pid: [, , `Pid`],
        programNumber: [, , `ProgramNumber`],
        rotate: [, , `Rotate`],
        sampleRange: [, , `SampleRange`],
        selectorType: [, , `SelectorType`],
        streams: [, smithyClient._json, `Streams`],
    });
};
const se_VorbisSettings = (input, context) => {
    return smithyClient.take(input, {
        channels: [, , `Channels`],
        sampleRate: [, , `SampleRate`],
        vbrQuality: [, , `VbrQuality`],
    });
};
const se_Vp8Settings = (input, context) => {
    return smithyClient.take(input, {
        bitrate: [, , `Bitrate`],
        framerateControl: [, , `FramerateControl`],
        framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        gopSize: [, smithyClient.serializeFloat, `GopSize`],
        hrdBufferSize: [, , `HrdBufferSize`],
        maxBitrate: [, , `MaxBitrate`],
        parControl: [, , `ParControl`],
        parDenominator: [, , `ParDenominator`],
        parNumerator: [, , `ParNumerator`],
        qualityTuningLevel: [, , `QualityTuningLevel`],
        rateControlMode: [, , `RateControlMode`],
    });
};
const se_Vp9Settings = (input, context) => {
    return smithyClient.take(input, {
        bitrate: [, , `Bitrate`],
        framerateControl: [, , `FramerateControl`],
        framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        gopSize: [, smithyClient.serializeFloat, `GopSize`],
        hrdBufferSize: [, , `HrdBufferSize`],
        maxBitrate: [, , `MaxBitrate`],
        parControl: [, , `ParControl`],
        parDenominator: [, , `ParDenominator`],
        parNumerator: [, , `ParNumerator`],
        qualityTuningLevel: [, , `QualityTuningLevel`],
        rateControlMode: [, , `RateControlMode`],
    });
};
const se_WavSettings = (input, context) => {
    return smithyClient.take(input, {
        bitDepth: [, , `BitDepth`],
        channels: [, , `Channels`],
        format: [, , `Format`],
        sampleRate: [, , `SampleRate`],
    });
};
const se_WebvttDestinationSettings = (input, context) => {
    return smithyClient.take(input, {
        accessibility: [, , `Accessibility`],
        stylePassthrough: [, , `StylePassthrough`],
    });
};
const se_WebvttHlsSourceSettings = (input, context) => {
    return smithyClient.take(input, {
        renditionGroupId: [, , `RenditionGroupId`],
        renditionLanguageCode: [, , `RenditionLanguageCode`],
        renditionName: [, , `RenditionName`],
    });
};
const se_Xavc4kIntraCbgProfileSettings = (input, context) => {
    return smithyClient.take(input, {
        xavcClass: [, , `XavcClass`],
    });
};
const se_Xavc4kIntraVbrProfileSettings = (input, context) => {
    return smithyClient.take(input, {
        xavcClass: [, , `XavcClass`],
    });
};
const se_Xavc4kProfileSettings = (input, context) => {
    return smithyClient.take(input, {
        bitrateClass: [, , `BitrateClass`],
        codecProfile: [, , `CodecProfile`],
        flickerAdaptiveQuantization: [, , `FlickerAdaptiveQuantization`],
        gopBReference: [, , `GopBReference`],
        gopClosedCadence: [, , `GopClosedCadence`],
        hrdBufferSize: [, , `HrdBufferSize`],
        qualityTuningLevel: [, , `QualityTuningLevel`],
        slices: [, , `Slices`],
    });
};
const se_XavcHdIntraCbgProfileSettings = (input, context) => {
    return smithyClient.take(input, {
        xavcClass: [, , `XavcClass`],
    });
};
const se_XavcHdProfileSettings = (input, context) => {
    return smithyClient.take(input, {
        bitrateClass: [, , `BitrateClass`],
        flickerAdaptiveQuantization: [, , `FlickerAdaptiveQuantization`],
        gopBReference: [, , `GopBReference`],
        gopClosedCadence: [, , `GopClosedCadence`],
        hrdBufferSize: [, , `HrdBufferSize`],
        interlaceMode: [, , `InterlaceMode`],
        qualityTuningLevel: [, , `QualityTuningLevel`],
        slices: [, , `Slices`],
        telecine: [, , `Telecine`],
    });
};
const se_XavcSettings = (input, context) => {
    return smithyClient.take(input, {
        adaptiveQuantization: [, , `AdaptiveQuantization`],
        entropyEncoding: [, , `EntropyEncoding`],
        framerateControl: [, , `FramerateControl`],
        framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        perFrameMetrics: [, smithyClient._json, `PerFrameMetrics`],
        profile: [, , `Profile`],
        slowPal: [, , `SlowPal`],
        softness: [, , `Softness`],
        spatialAdaptiveQuantization: [, , `SpatialAdaptiveQuantization`],
        temporalAdaptiveQuantization: [, , `TemporalAdaptiveQuantization`],
        xavc4kIntraCbgProfileSettings: [
            ,
            (_) => se_Xavc4kIntraCbgProfileSettings(_),
            `Xavc4kIntraCbgProfileSettings`,
        ],
        xavc4kIntraVbrProfileSettings: [
            ,
            (_) => se_Xavc4kIntraVbrProfileSettings(_),
            `Xavc4kIntraVbrProfileSettings`,
        ],
        xavc4kProfileSettings: [, (_) => se_Xavc4kProfileSettings(_), `Xavc4kProfileSettings`],
        xavcHdIntraCbgProfileSettings: [
            ,
            (_) => se_XavcHdIntraCbgProfileSettings(_),
            `XavcHdIntraCbgProfileSettings`,
        ],
        xavcHdProfileSettings: [, (_) => se_XavcHdProfileSettings(_), `XavcHdProfileSettings`],
    });
};
const de___listOf__doubleMinNegative60Max6 = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.limitedParseDouble(entry);
    });
    return retVal;
};
const de___listOfAllowedRenditionSize = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AllowedRenditionSize(entry);
    });
    return retVal;
};
const de___listOfAudioDescription = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AudioDescription(entry);
    });
    return retVal;
};
const de___listOfAutomatedAbrRule = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutomatedAbrRule(entry);
    });
    return retVal;
};
const de___listOfCaptionDescription = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CaptionDescription(entry);
    });
    return retVal;
};
const de___listOfCaptionDescriptionPreset = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CaptionDescriptionPreset(entry);
    });
    return retVal;
};
const de___listOfCmafAdditionalManifest = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CmafAdditionalManifest(entry);
    });
    return retVal;
};
const de___listOfColorConversion3DLUTSetting = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ColorConversion3DLUTSetting(entry);
    });
    return retVal;
};
const de___listOfDashAdditionalManifest = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DashAdditionalManifest(entry);
    });
    return retVal;
};
const de___listOfEndpoint = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Endpoint(entry);
    });
    return retVal;
};
const de___listOfForceIncludeRenditionSize = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ForceIncludeRenditionSize(entry);
    });
    return retVal;
};
const de___listOfHlsAdditionalManifest = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HlsAdditionalManifest(entry);
    });
    return retVal;
};
const de___listOfHlsCaptionLanguageMapping = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HlsCaptionLanguageMapping(entry);
    });
    return retVal;
};
const de___listOfHopDestination = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HopDestination(entry);
    });
    return retVal;
};
const de___listOfId3Insertion = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Id3Insertion(entry);
    });
    return retVal;
};
const de___listOfInput = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Input(entry);
    });
    return retVal;
};
const de___listOfInputClipping = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InputClipping(entry);
    });
    return retVal;
};
const de___listOfInputTemplate = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InputTemplate(entry);
    });
    return retVal;
};
const de___listOfInsertableImage = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InsertableImage(entry);
    });
    return retVal;
};
const de___listOfJob = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Job(entry);
    });
    return retVal;
};
const de___listOfJobEngineVersion = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_JobEngineVersion(entry);
    });
    return retVal;
};
const de___listOfJobTemplate = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_JobTemplate(entry);
    });
    return retVal;
};
const de___listOfMsSmoothAdditionalManifest = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MsSmoothAdditionalManifest(entry);
    });
    return retVal;
};
const de___listOfOutput = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Output(entry);
    });
    return retVal;
};
const de___listOfOutputChannelMapping = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OutputChannelMapping(entry);
    });
    return retVal;
};
const de___listOfOutputDetail = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OutputDetail(entry);
    });
    return retVal;
};
const de___listOfOutputGroup = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OutputGroup(entry);
    });
    return retVal;
};
const de___listOfOutputGroupDetail = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OutputGroupDetail(entry);
    });
    return retVal;
};
const de___listOfPreset = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Preset(entry);
    });
    return retVal;
};
const de___listOfProbeResult = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProbeResult(entry);
    });
    return retVal;
};
const de___listOfQueue = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Queue(entry);
    });
    return retVal;
};
const de___listOfQueueTransition = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_QueueTransition(entry);
    });
    return retVal;
};
const de___listOfServiceOverride = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceOverride(entry);
    });
    return retVal;
};
const de___listOfTrack = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Track(entry);
    });
    return retVal;
};
const de___listOfTrackMapping = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrackMapping(entry);
    });
    return retVal;
};
const de___listOfVideoOverlay = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VideoOverlay(entry);
    });
    return retVal;
};
const de___listOfVideoOverlayInputClipping = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VideoOverlayInputClipping(entry);
    });
    return retVal;
};
const de___listOfVideoOverlayTransition = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VideoOverlayTransition(entry);
    });
    return retVal;
};
const de___listOfWarningGroup = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WarningGroup(entry);
    });
    return retVal;
};
const de___mapOfAudioSelector = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_AudioSelector(value);
        return acc;
    }, {});
};
const de___mapOfAudioSelectorGroup = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_AudioSelectorGroup(value);
        return acc;
    }, {});
};
const de___mapOfCaptionSelector = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_CaptionSelector(value);
        return acc;
    }, {});
};
const de___mapOfDynamicAudioSelector = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_DynamicAudioSelector(value);
        return acc;
    }, {});
};
const de_AacSettings = (output, context) => {
    return smithyClient.take(output, {
        AudioDescriptionBroadcasterMix: [, smithyClient.expectString, `audioDescriptionBroadcasterMix`],
        Bitrate: [, smithyClient.expectInt32, `bitrate`],
        CodecProfile: [, smithyClient.expectString, `codecProfile`],
        CodingMode: [, smithyClient.expectString, `codingMode`],
        LoudnessMeasurementMode: [, smithyClient.expectString, `loudnessMeasurementMode`],
        RapInterval: [, smithyClient.expectInt32, `rapInterval`],
        RateControlMode: [, smithyClient.expectString, `rateControlMode`],
        RawFormat: [, smithyClient.expectString, `rawFormat`],
        SampleRate: [, smithyClient.expectInt32, `sampleRate`],
        Specification: [, smithyClient.expectString, `specification`],
        TargetLoudnessRange: [, smithyClient.expectInt32, `targetLoudnessRange`],
        VbrQuality: [, smithyClient.expectString, `vbrQuality`],
    });
};
const de_Ac3Settings = (output, context) => {
    return smithyClient.take(output, {
        Bitrate: [, smithyClient.expectInt32, `bitrate`],
        BitstreamMode: [, smithyClient.expectString, `bitstreamMode`],
        CodingMode: [, smithyClient.expectString, `codingMode`],
        Dialnorm: [, smithyClient.expectInt32, `dialnorm`],
        DynamicRangeCompressionLine: [, smithyClient.expectString, `dynamicRangeCompressionLine`],
        DynamicRangeCompressionProfile: [, smithyClient.expectString, `dynamicRangeCompressionProfile`],
        DynamicRangeCompressionRf: [, smithyClient.expectString, `dynamicRangeCompressionRf`],
        LfeFilter: [, smithyClient.expectString, `lfeFilter`],
        MetadataControl: [, smithyClient.expectString, `metadataControl`],
        SampleRate: [, smithyClient.expectInt32, `sampleRate`],
    });
};
const de_AccelerationSettings = (output, context) => {
    return smithyClient.take(output, {
        Mode: [, smithyClient.expectString, `mode`],
    });
};
const de_AdvancedInputFilterSettings = (output, context) => {
    return smithyClient.take(output, {
        AddTexture: [, smithyClient.expectString, `addTexture`],
        Sharpening: [, smithyClient.expectString, `sharpening`],
    });
};
const de_AiffSettings = (output, context) => {
    return smithyClient.take(output, {
        BitDepth: [, smithyClient.expectInt32, `bitDepth`],
        Channels: [, smithyClient.expectInt32, `channels`],
        SampleRate: [, smithyClient.expectInt32, `sampleRate`],
    });
};
const de_AllowedRenditionSize = (output, context) => {
    return smithyClient.take(output, {
        Height: [, smithyClient.expectInt32, `height`],
        Required: [, smithyClient.expectString, `required`],
        Width: [, smithyClient.expectInt32, `width`],
    });
};
const de_AncillarySourceSettings = (output, context) => {
    return smithyClient.take(output, {
        Convert608To708: [, smithyClient.expectString, `convert608To708`],
        SourceAncillaryChannelNumber: [, smithyClient.expectInt32, `sourceAncillaryChannelNumber`],
        TerminateCaptions: [, smithyClient.expectString, `terminateCaptions`],
    });
};
const de_AudioChannelTaggingSettings = (output, context) => {
    return smithyClient.take(output, {
        ChannelTag: [, smithyClient.expectString, `channelTag`],
        ChannelTags: [, smithyClient._json, `channelTags`],
    });
};
const de_AudioCodecSettings = (output, context) => {
    return smithyClient.take(output, {
        AacSettings: [, (_) => de_AacSettings(_), `aacSettings`],
        Ac3Settings: [, (_) => de_Ac3Settings(_), `ac3Settings`],
        AiffSettings: [, (_) => de_AiffSettings(_), `aiffSettings`],
        Codec: [, smithyClient.expectString, `codec`],
        Eac3AtmosSettings: [, (_) => de_Eac3AtmosSettings(_), `eac3AtmosSettings`],
        Eac3Settings: [, (_) => de_Eac3Settings(_), `eac3Settings`],
        FlacSettings: [, (_) => de_FlacSettings(_), `flacSettings`],
        Mp2Settings: [, (_) => de_Mp2Settings(_), `mp2Settings`],
        Mp3Settings: [, (_) => de_Mp3Settings(_), `mp3Settings`],
        OpusSettings: [, (_) => de_OpusSettings(_), `opusSettings`],
        VorbisSettings: [, (_) => de_VorbisSettings(_), `vorbisSettings`],
        WavSettings: [, (_) => de_WavSettings(_), `wavSettings`],
    });
};
const de_AudioDescription = (output, context) => {
    return smithyClient.take(output, {
        AudioChannelTaggingSettings: [
            ,
            (_) => de_AudioChannelTaggingSettings(_),
            `audioChannelTaggingSettings`,
        ],
        AudioNormalizationSettings: [, (_) => de_AudioNormalizationSettings(_), `audioNormalizationSettings`],
        AudioSourceName: [, smithyClient.expectString, `audioSourceName`],
        AudioType: [, smithyClient.expectInt32, `audioType`],
        AudioTypeControl: [, smithyClient.expectString, `audioTypeControl`],
        CodecSettings: [, (_) => de_AudioCodecSettings(_), `codecSettings`],
        CustomLanguageCode: [, smithyClient.expectString, `customLanguageCode`],
        LanguageCode: [, smithyClient.expectString, `languageCode`],
        LanguageCodeControl: [, smithyClient.expectString, `languageCodeControl`],
        RemixSettings: [, (_) => de_RemixSettings(_), `remixSettings`],
        StreamName: [, smithyClient.expectString, `streamName`],
    });
};
const de_AudioNormalizationSettings = (output, context) => {
    return smithyClient.take(output, {
        Algorithm: [, smithyClient.expectString, `algorithm`],
        AlgorithmControl: [, smithyClient.expectString, `algorithmControl`],
        CorrectionGateLevel: [, smithyClient.expectInt32, `correctionGateLevel`],
        LoudnessLogging: [, smithyClient.expectString, `loudnessLogging`],
        PeakCalculation: [, smithyClient.expectString, `peakCalculation`],
        TargetLkfs: [, smithyClient.limitedParseDouble, `targetLkfs`],
        TruePeakLimiterThreshold: [, smithyClient.limitedParseDouble, `truePeakLimiterThreshold`],
    });
};
const de_AudioProperties = (output, context) => {
    return smithyClient.take(output, {
        BitDepth: [, smithyClient.expectInt32, `bitDepth`],
        BitRate: [, smithyClient.expectLong, `bitRate`],
        Channels: [, smithyClient.expectInt32, `channels`],
        FrameRate: [, (_) => de_FrameRate(_), `frameRate`],
        LanguageCode: [, smithyClient.expectString, `languageCode`],
        SampleRate: [, smithyClient.expectInt32, `sampleRate`],
    });
};
const de_AudioSelector = (output, context) => {
    return smithyClient.take(output, {
        AudioDurationCorrection: [, smithyClient.expectString, `audioDurationCorrection`],
        CustomLanguageCode: [, smithyClient.expectString, `customLanguageCode`],
        DefaultSelection: [, smithyClient.expectString, `defaultSelection`],
        ExternalAudioFileInput: [, smithyClient.expectString, `externalAudioFileInput`],
        HlsRenditionGroupSettings: [, (_) => de_HlsRenditionGroupSettings(_), `hlsRenditionGroupSettings`],
        LanguageCode: [, smithyClient.expectString, `languageCode`],
        Offset: [, smithyClient.expectInt32, `offset`],
        Pids: [, smithyClient._json, `pids`],
        ProgramSelection: [, smithyClient.expectInt32, `programSelection`],
        RemixSettings: [, (_) => de_RemixSettings(_), `remixSettings`],
        SelectorType: [, smithyClient.expectString, `selectorType`],
        Tracks: [, smithyClient._json, `tracks`],
    });
};
const de_AudioSelectorGroup = (output, context) => {
    return smithyClient.take(output, {
        AudioSelectorNames: [, smithyClient._json, `audioSelectorNames`],
    });
};
const de_AutomatedAbrRule = (output, context) => {
    return smithyClient.take(output, {
        AllowedRenditions: [, (_) => de___listOfAllowedRenditionSize(_), `allowedRenditions`],
        ForceIncludeRenditions: [, (_) => de___listOfForceIncludeRenditionSize(_), `forceIncludeRenditions`],
        MinBottomRenditionSize: [, (_) => de_MinBottomRenditionSize(_), `minBottomRenditionSize`],
        MinTopRenditionSize: [, (_) => de_MinTopRenditionSize(_), `minTopRenditionSize`],
        Type: [, smithyClient.expectString, `type`],
    });
};
const de_AutomatedAbrSettings = (output, context) => {
    return smithyClient.take(output, {
        MaxAbrBitrate: [, smithyClient.expectInt32, `maxAbrBitrate`],
        MaxQualityLevel: [, smithyClient.limitedParseDouble, `maxQualityLevel`],
        MaxRenditions: [, smithyClient.expectInt32, `maxRenditions`],
        MinAbrBitrate: [, smithyClient.expectInt32, `minAbrBitrate`],
        Rules: [, (_) => de___listOfAutomatedAbrRule(_), `rules`],
    });
};
const de_AutomatedEncodingSettings = (output, context) => {
    return smithyClient.take(output, {
        AbrSettings: [, (_) => de_AutomatedAbrSettings(_), `abrSettings`],
    });
};
const de_Av1QvbrSettings = (output, context) => {
    return smithyClient.take(output, {
        QvbrQualityLevel: [, smithyClient.expectInt32, `qvbrQualityLevel`],
        QvbrQualityLevelFineTune: [, smithyClient.limitedParseDouble, `qvbrQualityLevelFineTune`],
    });
};
const de_Av1Settings = (output, context) => {
    return smithyClient.take(output, {
        AdaptiveQuantization: [, smithyClient.expectString, `adaptiveQuantization`],
        BitDepth: [, smithyClient.expectString, `bitDepth`],
        FilmGrainSynthesis: [, smithyClient.expectString, `filmGrainSynthesis`],
        FramerateControl: [, smithyClient.expectString, `framerateControl`],
        FramerateConversionAlgorithm: [, smithyClient.expectString, `framerateConversionAlgorithm`],
        FramerateDenominator: [, smithyClient.expectInt32, `framerateDenominator`],
        FramerateNumerator: [, smithyClient.expectInt32, `framerateNumerator`],
        GopSize: [, smithyClient.limitedParseDouble, `gopSize`],
        MaxBitrate: [, smithyClient.expectInt32, `maxBitrate`],
        NumberBFramesBetweenReferenceFrames: [, smithyClient.expectInt32, `numberBFramesBetweenReferenceFrames`],
        PerFrameMetrics: [, smithyClient._json, `perFrameMetrics`],
        QvbrSettings: [, (_) => de_Av1QvbrSettings(_), `qvbrSettings`],
        RateControlMode: [, smithyClient.expectString, `rateControlMode`],
        Slices: [, smithyClient.expectInt32, `slices`],
        SpatialAdaptiveQuantization: [, smithyClient.expectString, `spatialAdaptiveQuantization`],
    });
};
const de_AvailBlanking = (output, context) => {
    return smithyClient.take(output, {
        AvailBlankingImage: [, smithyClient.expectString, `availBlankingImage`],
    });
};
const de_AvcIntraSettings = (output, context) => {
    return smithyClient.take(output, {
        AvcIntraClass: [, smithyClient.expectString, `avcIntraClass`],
        AvcIntraUhdSettings: [, (_) => de_AvcIntraUhdSettings(_), `avcIntraUhdSettings`],
        FramerateControl: [, smithyClient.expectString, `framerateControl`],
        FramerateConversionAlgorithm: [, smithyClient.expectString, `framerateConversionAlgorithm`],
        FramerateDenominator: [, smithyClient.expectInt32, `framerateDenominator`],
        FramerateNumerator: [, smithyClient.expectInt32, `framerateNumerator`],
        InterlaceMode: [, smithyClient.expectString, `interlaceMode`],
        PerFrameMetrics: [, smithyClient._json, `perFrameMetrics`],
        ScanTypeConversionMode: [, smithyClient.expectString, `scanTypeConversionMode`],
        SlowPal: [, smithyClient.expectString, `slowPal`],
        Telecine: [, smithyClient.expectString, `telecine`],
    });
};
const de_AvcIntraUhdSettings = (output, context) => {
    return smithyClient.take(output, {
        QualityTuningLevel: [, smithyClient.expectString, `qualityTuningLevel`],
    });
};
const de_BandwidthReductionFilter = (output, context) => {
    return smithyClient.take(output, {
        Sharpening: [, smithyClient.expectString, `sharpening`],
        Strength: [, smithyClient.expectString, `strength`],
    });
};
const de_BurninDestinationSettings = (output, context) => {
    return smithyClient.take(output, {
        Alignment: [, smithyClient.expectString, `alignment`],
        ApplyFontColor: [, smithyClient.expectString, `applyFontColor`],
        BackgroundColor: [, smithyClient.expectString, `backgroundColor`],
        BackgroundOpacity: [, smithyClient.expectInt32, `backgroundOpacity`],
        FallbackFont: [, smithyClient.expectString, `fallbackFont`],
        FontColor: [, smithyClient.expectString, `fontColor`],
        FontFileBold: [, smithyClient.expectString, `fontFileBold`],
        FontFileBoldItalic: [, smithyClient.expectString, `fontFileBoldItalic`],
        FontFileItalic: [, smithyClient.expectString, `fontFileItalic`],
        FontFileRegular: [, smithyClient.expectString, `fontFileRegular`],
        FontOpacity: [, smithyClient.expectInt32, `fontOpacity`],
        FontResolution: [, smithyClient.expectInt32, `fontResolution`],
        FontScript: [, smithyClient.expectString, `fontScript`],
        FontSize: [, smithyClient.expectInt32, `fontSize`],
        HexFontColor: [, smithyClient.expectString, `hexFontColor`],
        OutlineColor: [, smithyClient.expectString, `outlineColor`],
        OutlineSize: [, smithyClient.expectInt32, `outlineSize`],
        RemoveRubyReserveAttributes: [, smithyClient.expectString, `removeRubyReserveAttributes`],
        ShadowColor: [, smithyClient.expectString, `shadowColor`],
        ShadowOpacity: [, smithyClient.expectInt32, `shadowOpacity`],
        ShadowXOffset: [, smithyClient.expectInt32, `shadowXOffset`],
        ShadowYOffset: [, smithyClient.expectInt32, `shadowYOffset`],
        StylePassthrough: [, smithyClient.expectString, `stylePassthrough`],
        TeletextSpacing: [, smithyClient.expectString, `teletextSpacing`],
        XPosition: [, smithyClient.expectInt32, `xPosition`],
        YPosition: [, smithyClient.expectInt32, `yPosition`],
    });
};
const de_CaptionDescription = (output, context) => {
    return smithyClient.take(output, {
        CaptionSelectorName: [, smithyClient.expectString, `captionSelectorName`],
        CustomLanguageCode: [, smithyClient.expectString, `customLanguageCode`],
        DestinationSettings: [, (_) => de_CaptionDestinationSettings(_), `destinationSettings`],
        LanguageCode: [, smithyClient.expectString, `languageCode`],
        LanguageDescription: [, smithyClient.expectString, `languageDescription`],
    });
};
const de_CaptionDescriptionPreset = (output, context) => {
    return smithyClient.take(output, {
        CustomLanguageCode: [, smithyClient.expectString, `customLanguageCode`],
        DestinationSettings: [, (_) => de_CaptionDestinationSettings(_), `destinationSettings`],
        LanguageCode: [, smithyClient.expectString, `languageCode`],
        LanguageDescription: [, smithyClient.expectString, `languageDescription`],
    });
};
const de_CaptionDestinationSettings = (output, context) => {
    return smithyClient.take(output, {
        BurninDestinationSettings: [, (_) => de_BurninDestinationSettings(_), `burninDestinationSettings`],
        DestinationType: [, smithyClient.expectString, `destinationType`],
        DvbSubDestinationSettings: [, (_) => de_DvbSubDestinationSettings(_), `dvbSubDestinationSettings`],
        EmbeddedDestinationSettings: [
            ,
            (_) => de_EmbeddedDestinationSettings(_),
            `embeddedDestinationSettings`,
        ],
        ImscDestinationSettings: [, (_) => de_ImscDestinationSettings(_), `imscDestinationSettings`],
        SccDestinationSettings: [, (_) => de_SccDestinationSettings(_), `sccDestinationSettings`],
        SrtDestinationSettings: [, (_) => de_SrtDestinationSettings(_), `srtDestinationSettings`],
        TeletextDestinationSettings: [
            ,
            (_) => de_TeletextDestinationSettings(_),
            `teletextDestinationSettings`,
        ],
        TtmlDestinationSettings: [, (_) => de_TtmlDestinationSettings(_), `ttmlDestinationSettings`],
        WebvttDestinationSettings: [, (_) => de_WebvttDestinationSettings(_), `webvttDestinationSettings`],
    });
};
const de_CaptionSelector = (output, context) => {
    return smithyClient.take(output, {
        CustomLanguageCode: [, smithyClient.expectString, `customLanguageCode`],
        LanguageCode: [, smithyClient.expectString, `languageCode`],
        SourceSettings: [, (_) => de_CaptionSourceSettings(_), `sourceSettings`],
    });
};
const de_CaptionSourceFramerate = (output, context) => {
    return smithyClient.take(output, {
        FramerateDenominator: [, smithyClient.expectInt32, `framerateDenominator`],
        FramerateNumerator: [, smithyClient.expectInt32, `framerateNumerator`],
    });
};
const de_CaptionSourceSettings = (output, context) => {
    return smithyClient.take(output, {
        AncillarySourceSettings: [, (_) => de_AncillarySourceSettings(_), `ancillarySourceSettings`],
        DvbSubSourceSettings: [, (_) => de_DvbSubSourceSettings(_), `dvbSubSourceSettings`],
        EmbeddedSourceSettings: [, (_) => de_EmbeddedSourceSettings(_), `embeddedSourceSettings`],
        FileSourceSettings: [, (_) => de_FileSourceSettings(_), `fileSourceSettings`],
        SourceType: [, smithyClient.expectString, `sourceType`],
        TeletextSourceSettings: [, (_) => de_TeletextSourceSettings(_), `teletextSourceSettings`],
        TrackSourceSettings: [, (_) => de_TrackSourceSettings(_), `trackSourceSettings`],
        WebvttHlsSourceSettings: [, (_) => de_WebvttHlsSourceSettings(_), `webvttHlsSourceSettings`],
    });
};
const de_ChannelMapping = (output, context) => {
    return smithyClient.take(output, {
        OutputChannels: [, (_) => de___listOfOutputChannelMapping(_), `outputChannels`],
    });
};
const de_ClipLimits = (output, context) => {
    return smithyClient.take(output, {
        MaximumRGBTolerance: [, smithyClient.expectInt32, `maximumRGBTolerance`],
        MaximumYUV: [, smithyClient.expectInt32, `maximumYUV`],
        MinimumRGBTolerance: [, smithyClient.expectInt32, `minimumRGBTolerance`],
        MinimumYUV: [, smithyClient.expectInt32, `minimumYUV`],
    });
};
const de_CmafAdditionalManifest = (output, context) => {
    return smithyClient.take(output, {
        ManifestNameModifier: [, smithyClient.expectString, `manifestNameModifier`],
        SelectedOutputs: [, smithyClient._json, `selectedOutputs`],
    });
};
const de_CmafEncryptionSettings = (output, context) => {
    return smithyClient.take(output, {
        ConstantInitializationVector: [, smithyClient.expectString, `constantInitializationVector`],
        EncryptionMethod: [, smithyClient.expectString, `encryptionMethod`],
        InitializationVectorInManifest: [, smithyClient.expectString, `initializationVectorInManifest`],
        SpekeKeyProvider: [, (_) => de_SpekeKeyProviderCmaf(_), `spekeKeyProvider`],
        StaticKeyProvider: [, (_) => de_StaticKeyProvider(_), `staticKeyProvider`],
        Type: [, smithyClient.expectString, `type`],
    });
};
const de_CmafGroupSettings = (output, context) => {
    return smithyClient.take(output, {
        AdditionalManifests: [, (_) => de___listOfCmafAdditionalManifest(_), `additionalManifests`],
        BaseUrl: [, smithyClient.expectString, `baseUrl`],
        ClientCache: [, smithyClient.expectString, `clientCache`],
        CodecSpecification: [, smithyClient.expectString, `codecSpecification`],
        DashIFrameTrickPlayNameModifier: [, smithyClient.expectString, `dashIFrameTrickPlayNameModifier`],
        DashManifestStyle: [, smithyClient.expectString, `dashManifestStyle`],
        Destination: [, smithyClient.expectString, `destination`],
        DestinationSettings: [, (_) => de_DestinationSettings(_), `destinationSettings`],
        Encryption: [, (_) => de_CmafEncryptionSettings(_), `encryption`],
        FragmentLength: [, smithyClient.expectInt32, `fragmentLength`],
        ImageBasedTrickPlay: [, smithyClient.expectString, `imageBasedTrickPlay`],
        ImageBasedTrickPlaySettings: [
            ,
            (_) => de_CmafImageBasedTrickPlaySettings(_),
            `imageBasedTrickPlaySettings`,
        ],
        ManifestCompression: [, smithyClient.expectString, `manifestCompression`],
        ManifestDurationFormat: [, smithyClient.expectString, `manifestDurationFormat`],
        MinBufferTime: [, smithyClient.expectInt32, `minBufferTime`],
        MinFinalSegmentLength: [, smithyClient.limitedParseDouble, `minFinalSegmentLength`],
        MpdManifestBandwidthType: [, smithyClient.expectString, `mpdManifestBandwidthType`],
        MpdProfile: [, smithyClient.expectString, `mpdProfile`],
        PtsOffsetHandlingForBFrames: [, smithyClient.expectString, `ptsOffsetHandlingForBFrames`],
        SegmentControl: [, smithyClient.expectString, `segmentControl`],
        SegmentLength: [, smithyClient.expectInt32, `segmentLength`],
        SegmentLengthControl: [, smithyClient.expectString, `segmentLengthControl`],
        StreamInfResolution: [, smithyClient.expectString, `streamInfResolution`],
        TargetDurationCompatibilityMode: [, smithyClient.expectString, `targetDurationCompatibilityMode`],
        VideoCompositionOffsets: [, smithyClient.expectString, `videoCompositionOffsets`],
        WriteDashManifest: [, smithyClient.expectString, `writeDashManifest`],
        WriteHlsManifest: [, smithyClient.expectString, `writeHlsManifest`],
        WriteSegmentTimelineInRepresentation: [, smithyClient.expectString, `writeSegmentTimelineInRepresentation`],
    });
};
const de_CmafImageBasedTrickPlaySettings = (output, context) => {
    return smithyClient.take(output, {
        IntervalCadence: [, smithyClient.expectString, `intervalCadence`],
        ThumbnailHeight: [, smithyClient.expectInt32, `thumbnailHeight`],
        ThumbnailInterval: [, smithyClient.limitedParseDouble, `thumbnailInterval`],
        ThumbnailWidth: [, smithyClient.expectInt32, `thumbnailWidth`],
        TileHeight: [, smithyClient.expectInt32, `tileHeight`],
        TileWidth: [, smithyClient.expectInt32, `tileWidth`],
    });
};
const de_CmfcSettings = (output, context) => {
    return smithyClient.take(output, {
        AudioDuration: [, smithyClient.expectString, `audioDuration`],
        AudioGroupId: [, smithyClient.expectString, `audioGroupId`],
        AudioRenditionSets: [, smithyClient.expectString, `audioRenditionSets`],
        AudioTrackType: [, smithyClient.expectString, `audioTrackType`],
        DescriptiveVideoServiceFlag: [, smithyClient.expectString, `descriptiveVideoServiceFlag`],
        IFrameOnlyManifest: [, smithyClient.expectString, `iFrameOnlyManifest`],
        KlvMetadata: [, smithyClient.expectString, `klvMetadata`],
        ManifestMetadataSignaling: [, smithyClient.expectString, `manifestMetadataSignaling`],
        Scte35Esam: [, smithyClient.expectString, `scte35Esam`],
        Scte35Source: [, smithyClient.expectString, `scte35Source`],
        TimedMetadata: [, smithyClient.expectString, `timedMetadata`],
        TimedMetadataBoxVersion: [, smithyClient.expectString, `timedMetadataBoxVersion`],
        TimedMetadataSchemeIdUri: [, smithyClient.expectString, `timedMetadataSchemeIdUri`],
        TimedMetadataValue: [, smithyClient.expectString, `timedMetadataValue`],
    });
};
const de_CodecMetadata = (output, context) => {
    return smithyClient.take(output, {
        BitDepth: [, smithyClient.expectInt32, `bitDepth`],
        ChromaSubsampling: [, smithyClient.expectString, `chromaSubsampling`],
        CodedFrameRate: [, (_) => de_FrameRate(_), `codedFrameRate`],
        ColorPrimaries: [, smithyClient.expectString, `colorPrimaries`],
        Height: [, smithyClient.expectInt32, `height`],
        Level: [, smithyClient.expectString, `level`],
        MatrixCoefficients: [, smithyClient.expectString, `matrixCoefficients`],
        Profile: [, smithyClient.expectString, `profile`],
        ScanType: [, smithyClient.expectString, `scanType`],
        TransferCharacteristics: [, smithyClient.expectString, `transferCharacteristics`],
        Width: [, smithyClient.expectInt32, `width`],
    });
};
const de_ColorConversion3DLUTSetting = (output, context) => {
    return smithyClient.take(output, {
        FileInput: [, smithyClient.expectString, `fileInput`],
        InputColorSpace: [, smithyClient.expectString, `inputColorSpace`],
        InputMasteringLuminance: [, smithyClient.expectInt32, `inputMasteringLuminance`],
        OutputColorSpace: [, smithyClient.expectString, `outputColorSpace`],
        OutputMasteringLuminance: [, smithyClient.expectInt32, `outputMasteringLuminance`],
    });
};
const de_ColorCorrector = (output, context) => {
    return smithyClient.take(output, {
        Brightness: [, smithyClient.expectInt32, `brightness`],
        ClipLimits: [, (_) => de_ClipLimits(_), `clipLimits`],
        ColorSpaceConversion: [, smithyClient.expectString, `colorSpaceConversion`],
        Contrast: [, smithyClient.expectInt32, `contrast`],
        Hdr10Metadata: [, (_) => de_Hdr10Metadata(_), `hdr10Metadata`],
        HdrToSdrToneMapper: [, smithyClient.expectString, `hdrToSdrToneMapper`],
        Hue: [, smithyClient.expectInt32, `hue`],
        MaxLuminance: [, smithyClient.expectInt32, `maxLuminance`],
        SampleRangeConversion: [, smithyClient.expectString, `sampleRangeConversion`],
        Saturation: [, smithyClient.expectInt32, `saturation`],
        SdrReferenceWhiteLevel: [, smithyClient.expectInt32, `sdrReferenceWhiteLevel`],
    });
};
const de_Container = (output, context) => {
    return smithyClient.take(output, {
        Duration: [, smithyClient.limitedParseDouble, `duration`],
        Format: [, smithyClient.expectString, `format`],
        Tracks: [, (_) => de___listOfTrack(_), `tracks`],
    });
};
const de_ContainerSettings = (output, context) => {
    return smithyClient.take(output, {
        CmfcSettings: [, (_) => de_CmfcSettings(_), `cmfcSettings`],
        Container: [, smithyClient.expectString, `container`],
        F4vSettings: [, (_) => de_F4vSettings(_), `f4vSettings`],
        M2tsSettings: [, (_) => de_M2tsSettings(_), `m2tsSettings`],
        M3u8Settings: [, (_) => de_M3u8Settings(_), `m3u8Settings`],
        MovSettings: [, (_) => de_MovSettings(_), `movSettings`],
        Mp4Settings: [, (_) => de_Mp4Settings(_), `mp4Settings`],
        MpdSettings: [, (_) => de_MpdSettings(_), `mpdSettings`],
        MxfSettings: [, (_) => de_MxfSettings(_), `mxfSettings`],
    });
};
const de_DashAdditionalManifest = (output, context) => {
    return smithyClient.take(output, {
        ManifestNameModifier: [, smithyClient.expectString, `manifestNameModifier`],
        SelectedOutputs: [, smithyClient._json, `selectedOutputs`],
    });
};
const de_DashIsoEncryptionSettings = (output, context) => {
    return smithyClient.take(output, {
        PlaybackDeviceCompatibility: [, smithyClient.expectString, `playbackDeviceCompatibility`],
        SpekeKeyProvider: [, (_) => de_SpekeKeyProvider(_), `spekeKeyProvider`],
    });
};
const de_DashIsoGroupSettings = (output, context) => {
    return smithyClient.take(output, {
        AdditionalManifests: [, (_) => de___listOfDashAdditionalManifest(_), `additionalManifests`],
        AudioChannelConfigSchemeIdUri: [, smithyClient.expectString, `audioChannelConfigSchemeIdUri`],
        BaseUrl: [, smithyClient.expectString, `baseUrl`],
        DashIFrameTrickPlayNameModifier: [, smithyClient.expectString, `dashIFrameTrickPlayNameModifier`],
        DashManifestStyle: [, smithyClient.expectString, `dashManifestStyle`],
        Destination: [, smithyClient.expectString, `destination`],
        DestinationSettings: [, (_) => de_DestinationSettings(_), `destinationSettings`],
        Encryption: [, (_) => de_DashIsoEncryptionSettings(_), `encryption`],
        FragmentLength: [, smithyClient.expectInt32, `fragmentLength`],
        HbbtvCompliance: [, smithyClient.expectString, `hbbtvCompliance`],
        ImageBasedTrickPlay: [, smithyClient.expectString, `imageBasedTrickPlay`],
        ImageBasedTrickPlaySettings: [
            ,
            (_) => de_DashIsoImageBasedTrickPlaySettings(_),
            `imageBasedTrickPlaySettings`,
        ],
        MinBufferTime: [, smithyClient.expectInt32, `minBufferTime`],
        MinFinalSegmentLength: [, smithyClient.limitedParseDouble, `minFinalSegmentLength`],
        MpdManifestBandwidthType: [, smithyClient.expectString, `mpdManifestBandwidthType`],
        MpdProfile: [, smithyClient.expectString, `mpdProfile`],
        PtsOffsetHandlingForBFrames: [, smithyClient.expectString, `ptsOffsetHandlingForBFrames`],
        SegmentControl: [, smithyClient.expectString, `segmentControl`],
        SegmentLength: [, smithyClient.expectInt32, `segmentLength`],
        SegmentLengthControl: [, smithyClient.expectString, `segmentLengthControl`],
        VideoCompositionOffsets: [, smithyClient.expectString, `videoCompositionOffsets`],
        WriteSegmentTimelineInRepresentation: [, smithyClient.expectString, `writeSegmentTimelineInRepresentation`],
    });
};
const de_DashIsoImageBasedTrickPlaySettings = (output, context) => {
    return smithyClient.take(output, {
        IntervalCadence: [, smithyClient.expectString, `intervalCadence`],
        ThumbnailHeight: [, smithyClient.expectInt32, `thumbnailHeight`],
        ThumbnailInterval: [, smithyClient.limitedParseDouble, `thumbnailInterval`],
        ThumbnailWidth: [, smithyClient.expectInt32, `thumbnailWidth`],
        TileHeight: [, smithyClient.expectInt32, `tileHeight`],
        TileWidth: [, smithyClient.expectInt32, `tileWidth`],
    });
};
const de_DataProperties = (output, context) => {
    return smithyClient.take(output, {
        LanguageCode: [, smithyClient.expectString, `languageCode`],
    });
};
const de_Deinterlacer = (output, context) => {
    return smithyClient.take(output, {
        Algorithm: [, smithyClient.expectString, `algorithm`],
        Control: [, smithyClient.expectString, `control`],
        Mode: [, smithyClient.expectString, `mode`],
    });
};
const de_DestinationSettings = (output, context) => {
    return smithyClient.take(output, {
        S3Settings: [, (_) => de_S3DestinationSettings(_), `s3Settings`],
    });
};
const de_DolbyVision = (output, context) => {
    return smithyClient.take(output, {
        L6Metadata: [, (_) => de_DolbyVisionLevel6Metadata(_), `l6Metadata`],
        L6Mode: [, smithyClient.expectString, `l6Mode`],
        Mapping: [, smithyClient.expectString, `mapping`],
        Profile: [, smithyClient.expectString, `profile`],
    });
};
const de_DolbyVisionLevel6Metadata = (output, context) => {
    return smithyClient.take(output, {
        MaxCll: [, smithyClient.expectInt32, `maxCll`],
        MaxFall: [, smithyClient.expectInt32, `maxFall`],
    });
};
const de_DvbNitSettings = (output, context) => {
    return smithyClient.take(output, {
        NetworkId: [, smithyClient.expectInt32, `networkId`],
        NetworkName: [, smithyClient.expectString, `networkName`],
        NitInterval: [, smithyClient.expectInt32, `nitInterval`],
    });
};
const de_DvbSdtSettings = (output, context) => {
    return smithyClient.take(output, {
        OutputSdt: [, smithyClient.expectString, `outputSdt`],
        SdtInterval: [, smithyClient.expectInt32, `sdtInterval`],
        ServiceName: [, smithyClient.expectString, `serviceName`],
        ServiceProviderName: [, smithyClient.expectString, `serviceProviderName`],
    });
};
const de_DvbSubDestinationSettings = (output, context) => {
    return smithyClient.take(output, {
        Alignment: [, smithyClient.expectString, `alignment`],
        ApplyFontColor: [, smithyClient.expectString, `applyFontColor`],
        BackgroundColor: [, smithyClient.expectString, `backgroundColor`],
        BackgroundOpacity: [, smithyClient.expectInt32, `backgroundOpacity`],
        DdsHandling: [, smithyClient.expectString, `ddsHandling`],
        DdsXCoordinate: [, smithyClient.expectInt32, `ddsXCoordinate`],
        DdsYCoordinate: [, smithyClient.expectInt32, `ddsYCoordinate`],
        FallbackFont: [, smithyClient.expectString, `fallbackFont`],
        FontColor: [, smithyClient.expectString, `fontColor`],
        FontFileBold: [, smithyClient.expectString, `fontFileBold`],
        FontFileBoldItalic: [, smithyClient.expectString, `fontFileBoldItalic`],
        FontFileItalic: [, smithyClient.expectString, `fontFileItalic`],
        FontFileRegular: [, smithyClient.expectString, `fontFileRegular`],
        FontOpacity: [, smithyClient.expectInt32, `fontOpacity`],
        FontResolution: [, smithyClient.expectInt32, `fontResolution`],
        FontScript: [, smithyClient.expectString, `fontScript`],
        FontSize: [, smithyClient.expectInt32, `fontSize`],
        Height: [, smithyClient.expectInt32, `height`],
        HexFontColor: [, smithyClient.expectString, `hexFontColor`],
        OutlineColor: [, smithyClient.expectString, `outlineColor`],
        OutlineSize: [, smithyClient.expectInt32, `outlineSize`],
        ShadowColor: [, smithyClient.expectString, `shadowColor`],
        ShadowOpacity: [, smithyClient.expectInt32, `shadowOpacity`],
        ShadowXOffset: [, smithyClient.expectInt32, `shadowXOffset`],
        ShadowYOffset: [, smithyClient.expectInt32, `shadowYOffset`],
        StylePassthrough: [, smithyClient.expectString, `stylePassthrough`],
        SubtitlingType: [, smithyClient.expectString, `subtitlingType`],
        TeletextSpacing: [, smithyClient.expectString, `teletextSpacing`],
        Width: [, smithyClient.expectInt32, `width`],
        XPosition: [, smithyClient.expectInt32, `xPosition`],
        YPosition: [, smithyClient.expectInt32, `yPosition`],
    });
};
const de_DvbSubSourceSettings = (output, context) => {
    return smithyClient.take(output, {
        Pid: [, smithyClient.expectInt32, `pid`],
    });
};
const de_DvbTdtSettings = (output, context) => {
    return smithyClient.take(output, {
        TdtInterval: [, smithyClient.expectInt32, `tdtInterval`],
    });
};
const de_DynamicAudioSelector = (output, context) => {
    return smithyClient.take(output, {
        AudioDurationCorrection: [, smithyClient.expectString, `audioDurationCorrection`],
        ExternalAudioFileInput: [, smithyClient.expectString, `externalAudioFileInput`],
        LanguageCode: [, smithyClient.expectString, `languageCode`],
        Offset: [, smithyClient.expectInt32, `offset`],
        SelectorType: [, smithyClient.expectString, `selectorType`],
    });
};
const de_Eac3AtmosSettings = (output, context) => {
    return smithyClient.take(output, {
        Bitrate: [, smithyClient.expectInt32, `bitrate`],
        BitstreamMode: [, smithyClient.expectString, `bitstreamMode`],
        CodingMode: [, smithyClient.expectString, `codingMode`],
        DialogueIntelligence: [, smithyClient.expectString, `dialogueIntelligence`],
        DownmixControl: [, smithyClient.expectString, `downmixControl`],
        DynamicRangeCompressionLine: [, smithyClient.expectString, `dynamicRangeCompressionLine`],
        DynamicRangeCompressionRf: [, smithyClient.expectString, `dynamicRangeCompressionRf`],
        DynamicRangeControl: [, smithyClient.expectString, `dynamicRangeControl`],
        LoRoCenterMixLevel: [, smithyClient.limitedParseDouble, `loRoCenterMixLevel`],
        LoRoSurroundMixLevel: [, smithyClient.limitedParseDouble, `loRoSurroundMixLevel`],
        LtRtCenterMixLevel: [, smithyClient.limitedParseDouble, `ltRtCenterMixLevel`],
        LtRtSurroundMixLevel: [, smithyClient.limitedParseDouble, `ltRtSurroundMixLevel`],
        MeteringMode: [, smithyClient.expectString, `meteringMode`],
        SampleRate: [, smithyClient.expectInt32, `sampleRate`],
        SpeechThreshold: [, smithyClient.expectInt32, `speechThreshold`],
        StereoDownmix: [, smithyClient.expectString, `stereoDownmix`],
        SurroundExMode: [, smithyClient.expectString, `surroundExMode`],
    });
};
const de_Eac3Settings = (output, context) => {
    return smithyClient.take(output, {
        AttenuationControl: [, smithyClient.expectString, `attenuationControl`],
        Bitrate: [, smithyClient.expectInt32, `bitrate`],
        BitstreamMode: [, smithyClient.expectString, `bitstreamMode`],
        CodingMode: [, smithyClient.expectString, `codingMode`],
        DcFilter: [, smithyClient.expectString, `dcFilter`],
        Dialnorm: [, smithyClient.expectInt32, `dialnorm`],
        DynamicRangeCompressionLine: [, smithyClient.expectString, `dynamicRangeCompressionLine`],
        DynamicRangeCompressionRf: [, smithyClient.expectString, `dynamicRangeCompressionRf`],
        LfeControl: [, smithyClient.expectString, `lfeControl`],
        LfeFilter: [, smithyClient.expectString, `lfeFilter`],
        LoRoCenterMixLevel: [, smithyClient.limitedParseDouble, `loRoCenterMixLevel`],
        LoRoSurroundMixLevel: [, smithyClient.limitedParseDouble, `loRoSurroundMixLevel`],
        LtRtCenterMixLevel: [, smithyClient.limitedParseDouble, `ltRtCenterMixLevel`],
        LtRtSurroundMixLevel: [, smithyClient.limitedParseDouble, `ltRtSurroundMixLevel`],
        MetadataControl: [, smithyClient.expectString, `metadataControl`],
        PassthroughControl: [, smithyClient.expectString, `passthroughControl`],
        PhaseControl: [, smithyClient.expectString, `phaseControl`],
        SampleRate: [, smithyClient.expectInt32, `sampleRate`],
        StereoDownmix: [, smithyClient.expectString, `stereoDownmix`],
        SurroundExMode: [, smithyClient.expectString, `surroundExMode`],
        SurroundMode: [, smithyClient.expectString, `surroundMode`],
    });
};
const de_EmbeddedDestinationSettings = (output, context) => {
    return smithyClient.take(output, {
        Destination608ChannelNumber: [, smithyClient.expectInt32, `destination608ChannelNumber`],
        Destination708ServiceNumber: [, smithyClient.expectInt32, `destination708ServiceNumber`],
    });
};
const de_EmbeddedSourceSettings = (output, context) => {
    return smithyClient.take(output, {
        Convert608To708: [, smithyClient.expectString, `convert608To708`],
        Source608ChannelNumber: [, smithyClient.expectInt32, `source608ChannelNumber`],
        Source608TrackNumber: [, smithyClient.expectInt32, `source608TrackNumber`],
        TerminateCaptions: [, smithyClient.expectString, `terminateCaptions`],
    });
};
const de_EncryptionContractConfiguration = (output, context) => {
    return smithyClient.take(output, {
        SpekeAudioPreset: [, smithyClient.expectString, `spekeAudioPreset`],
        SpekeVideoPreset: [, smithyClient.expectString, `spekeVideoPreset`],
    });
};
const de_Endpoint = (output, context) => {
    return smithyClient.take(output, {
        Url: [, smithyClient.expectString, `url`],
    });
};
const de_EsamManifestConfirmConditionNotification = (output, context) => {
    return smithyClient.take(output, {
        MccXml: [, smithyClient.expectString, `mccXml`],
    });
};
const de_EsamSettings = (output, context) => {
    return smithyClient.take(output, {
        ManifestConfirmConditionNotification: [
            ,
            (_) => de_EsamManifestConfirmConditionNotification(_),
            `manifestConfirmConditionNotification`,
        ],
        ResponseSignalPreroll: [, smithyClient.expectInt32, `responseSignalPreroll`],
        SignalProcessingNotification: [
            ,
            (_) => de_EsamSignalProcessingNotification(_),
            `signalProcessingNotification`,
        ],
    });
};
const de_EsamSignalProcessingNotification = (output, context) => {
    return smithyClient.take(output, {
        SccXml: [, smithyClient.expectString, `sccXml`],
    });
};
const de_ExtendedDataServices = (output, context) => {
    return smithyClient.take(output, {
        CopyProtectionAction: [, smithyClient.expectString, `copyProtectionAction`],
        VchipAction: [, smithyClient.expectString, `vchipAction`],
    });
};
const de_F4vSettings = (output, context) => {
    return smithyClient.take(output, {
        MoovPlacement: [, smithyClient.expectString, `moovPlacement`],
    });
};
const de_FileGroupSettings = (output, context) => {
    return smithyClient.take(output, {
        Destination: [, smithyClient.expectString, `destination`],
        DestinationSettings: [, (_) => de_DestinationSettings(_), `destinationSettings`],
    });
};
const de_FileSourceSettings = (output, context) => {
    return smithyClient.take(output, {
        ByteRateLimit: [, smithyClient.expectString, `byteRateLimit`],
        Convert608To708: [, smithyClient.expectString, `convert608To708`],
        ConvertPaintToPop: [, smithyClient.expectString, `convertPaintToPop`],
        Framerate: [, (_) => de_CaptionSourceFramerate(_), `framerate`],
        SourceFile: [, smithyClient.expectString, `sourceFile`],
        TimeDelta: [, smithyClient.expectInt32, `timeDelta`],
        TimeDeltaUnits: [, smithyClient.expectString, `timeDeltaUnits`],
        UpconvertSTLToTeletext: [, smithyClient.expectString, `upconvertSTLToTeletext`],
    });
};
const de_FlacSettings = (output, context) => {
    return smithyClient.take(output, {
        BitDepth: [, smithyClient.expectInt32, `bitDepth`],
        Channels: [, smithyClient.expectInt32, `channels`],
        SampleRate: [, smithyClient.expectInt32, `sampleRate`],
    });
};
const de_ForceIncludeRenditionSize = (output, context) => {
    return smithyClient.take(output, {
        Height: [, smithyClient.expectInt32, `height`],
        Width: [, smithyClient.expectInt32, `width`],
    });
};
const de_FrameCaptureSettings = (output, context) => {
    return smithyClient.take(output, {
        FramerateDenominator: [, smithyClient.expectInt32, `framerateDenominator`],
        FramerateNumerator: [, smithyClient.expectInt32, `framerateNumerator`],
        MaxCaptures: [, smithyClient.expectInt32, `maxCaptures`],
        Quality: [, smithyClient.expectInt32, `quality`],
    });
};
const de_FrameRate = (output, context) => {
    return smithyClient.take(output, {
        Denominator: [, smithyClient.expectInt32, `denominator`],
        Numerator: [, smithyClient.expectInt32, `numerator`],
    });
};
const de_GifSettings = (output, context) => {
    return smithyClient.take(output, {
        FramerateControl: [, smithyClient.expectString, `framerateControl`],
        FramerateConversionAlgorithm: [, smithyClient.expectString, `framerateConversionAlgorithm`],
        FramerateDenominator: [, smithyClient.expectInt32, `framerateDenominator`],
        FramerateNumerator: [, smithyClient.expectInt32, `framerateNumerator`],
    });
};
const de_H264QvbrSettings = (output, context) => {
    return smithyClient.take(output, {
        MaxAverageBitrate: [, smithyClient.expectInt32, `maxAverageBitrate`],
        QvbrQualityLevel: [, smithyClient.expectInt32, `qvbrQualityLevel`],
        QvbrQualityLevelFineTune: [, smithyClient.limitedParseDouble, `qvbrQualityLevelFineTune`],
    });
};
const de_H264Settings = (output, context) => {
    return smithyClient.take(output, {
        AdaptiveQuantization: [, smithyClient.expectString, `adaptiveQuantization`],
        BandwidthReductionFilter: [, (_) => de_BandwidthReductionFilter(_), `bandwidthReductionFilter`],
        Bitrate: [, smithyClient.expectInt32, `bitrate`],
        CodecLevel: [, smithyClient.expectString, `codecLevel`],
        CodecProfile: [, smithyClient.expectString, `codecProfile`],
        DynamicSubGop: [, smithyClient.expectString, `dynamicSubGop`],
        EndOfStreamMarkers: [, smithyClient.expectString, `endOfStreamMarkers`],
        EntropyEncoding: [, smithyClient.expectString, `entropyEncoding`],
        FieldEncoding: [, smithyClient.expectString, `fieldEncoding`],
        FlickerAdaptiveQuantization: [, smithyClient.expectString, `flickerAdaptiveQuantization`],
        FramerateControl: [, smithyClient.expectString, `framerateControl`],
        FramerateConversionAlgorithm: [, smithyClient.expectString, `framerateConversionAlgorithm`],
        FramerateDenominator: [, smithyClient.expectInt32, `framerateDenominator`],
        FramerateNumerator: [, smithyClient.expectInt32, `framerateNumerator`],
        GopBReference: [, smithyClient.expectString, `gopBReference`],
        GopClosedCadence: [, smithyClient.expectInt32, `gopClosedCadence`],
        GopSize: [, smithyClient.limitedParseDouble, `gopSize`],
        GopSizeUnits: [, smithyClient.expectString, `gopSizeUnits`],
        HrdBufferFinalFillPercentage: [, smithyClient.expectInt32, `hrdBufferFinalFillPercentage`],
        HrdBufferInitialFillPercentage: [, smithyClient.expectInt32, `hrdBufferInitialFillPercentage`],
        HrdBufferSize: [, smithyClient.expectInt32, `hrdBufferSize`],
        InterlaceMode: [, smithyClient.expectString, `interlaceMode`],
        MaxBitrate: [, smithyClient.expectInt32, `maxBitrate`],
        MinIInterval: [, smithyClient.expectInt32, `minIInterval`],
        NumberBFramesBetweenReferenceFrames: [, smithyClient.expectInt32, `numberBFramesBetweenReferenceFrames`],
        NumberReferenceFrames: [, smithyClient.expectInt32, `numberReferenceFrames`],
        ParControl: [, smithyClient.expectString, `parControl`],
        ParDenominator: [, smithyClient.expectInt32, `parDenominator`],
        ParNumerator: [, smithyClient.expectInt32, `parNumerator`],
        PerFrameMetrics: [, smithyClient._json, `perFrameMetrics`],
        QualityTuningLevel: [, smithyClient.expectString, `qualityTuningLevel`],
        QvbrSettings: [, (_) => de_H264QvbrSettings(_), `qvbrSettings`],
        RateControlMode: [, smithyClient.expectString, `rateControlMode`],
        RepeatPps: [, smithyClient.expectString, `repeatPps`],
        SaliencyAwareEncoding: [, smithyClient.expectString, `saliencyAwareEncoding`],
        ScanTypeConversionMode: [, smithyClient.expectString, `scanTypeConversionMode`],
        SceneChangeDetect: [, smithyClient.expectString, `sceneChangeDetect`],
        Slices: [, smithyClient.expectInt32, `slices`],
        SlowPal: [, smithyClient.expectString, `slowPal`],
        Softness: [, smithyClient.expectInt32, `softness`],
        SpatialAdaptiveQuantization: [, smithyClient.expectString, `spatialAdaptiveQuantization`],
        Syntax: [, smithyClient.expectString, `syntax`],
        Telecine: [, smithyClient.expectString, `telecine`],
        TemporalAdaptiveQuantization: [, smithyClient.expectString, `temporalAdaptiveQuantization`],
        UnregisteredSeiTimecode: [, smithyClient.expectString, `unregisteredSeiTimecode`],
        WriteMp4PackagingType: [, smithyClient.expectString, `writeMp4PackagingType`],
    });
};
const de_H265QvbrSettings = (output, context) => {
    return smithyClient.take(output, {
        MaxAverageBitrate: [, smithyClient.expectInt32, `maxAverageBitrate`],
        QvbrQualityLevel: [, smithyClient.expectInt32, `qvbrQualityLevel`],
        QvbrQualityLevelFineTune: [, smithyClient.limitedParseDouble, `qvbrQualityLevelFineTune`],
    });
};
const de_H265Settings = (output, context) => {
    return smithyClient.take(output, {
        AdaptiveQuantization: [, smithyClient.expectString, `adaptiveQuantization`],
        AlternateTransferFunctionSei: [, smithyClient.expectString, `alternateTransferFunctionSei`],
        BandwidthReductionFilter: [, (_) => de_BandwidthReductionFilter(_), `bandwidthReductionFilter`],
        Bitrate: [, smithyClient.expectInt32, `bitrate`],
        CodecLevel: [, smithyClient.expectString, `codecLevel`],
        CodecProfile: [, smithyClient.expectString, `codecProfile`],
        Deblocking: [, smithyClient.expectString, `deblocking`],
        DynamicSubGop: [, smithyClient.expectString, `dynamicSubGop`],
        EndOfStreamMarkers: [, smithyClient.expectString, `endOfStreamMarkers`],
        FlickerAdaptiveQuantization: [, smithyClient.expectString, `flickerAdaptiveQuantization`],
        FramerateControl: [, smithyClient.expectString, `framerateControl`],
        FramerateConversionAlgorithm: [, smithyClient.expectString, `framerateConversionAlgorithm`],
        FramerateDenominator: [, smithyClient.expectInt32, `framerateDenominator`],
        FramerateNumerator: [, smithyClient.expectInt32, `framerateNumerator`],
        GopBReference: [, smithyClient.expectString, `gopBReference`],
        GopClosedCadence: [, smithyClient.expectInt32, `gopClosedCadence`],
        GopSize: [, smithyClient.limitedParseDouble, `gopSize`],
        GopSizeUnits: [, smithyClient.expectString, `gopSizeUnits`],
        HrdBufferFinalFillPercentage: [, smithyClient.expectInt32, `hrdBufferFinalFillPercentage`],
        HrdBufferInitialFillPercentage: [, smithyClient.expectInt32, `hrdBufferInitialFillPercentage`],
        HrdBufferSize: [, smithyClient.expectInt32, `hrdBufferSize`],
        InterlaceMode: [, smithyClient.expectString, `interlaceMode`],
        MaxBitrate: [, smithyClient.expectInt32, `maxBitrate`],
        MinIInterval: [, smithyClient.expectInt32, `minIInterval`],
        NumberBFramesBetweenReferenceFrames: [, smithyClient.expectInt32, `numberBFramesBetweenReferenceFrames`],
        NumberReferenceFrames: [, smithyClient.expectInt32, `numberReferenceFrames`],
        ParControl: [, smithyClient.expectString, `parControl`],
        ParDenominator: [, smithyClient.expectInt32, `parDenominator`],
        ParNumerator: [, smithyClient.expectInt32, `parNumerator`],
        PerFrameMetrics: [, smithyClient._json, `perFrameMetrics`],
        QualityTuningLevel: [, smithyClient.expectString, `qualityTuningLevel`],
        QvbrSettings: [, (_) => de_H265QvbrSettings(_), `qvbrSettings`],
        RateControlMode: [, smithyClient.expectString, `rateControlMode`],
        SampleAdaptiveOffsetFilterMode: [, smithyClient.expectString, `sampleAdaptiveOffsetFilterMode`],
        ScanTypeConversionMode: [, smithyClient.expectString, `scanTypeConversionMode`],
        SceneChangeDetect: [, smithyClient.expectString, `sceneChangeDetect`],
        Slices: [, smithyClient.expectInt32, `slices`],
        SlowPal: [, smithyClient.expectString, `slowPal`],
        SpatialAdaptiveQuantization: [, smithyClient.expectString, `spatialAdaptiveQuantization`],
        Telecine: [, smithyClient.expectString, `telecine`],
        TemporalAdaptiveQuantization: [, smithyClient.expectString, `temporalAdaptiveQuantization`],
        TemporalIds: [, smithyClient.expectString, `temporalIds`],
        Tiles: [, smithyClient.expectString, `tiles`],
        UnregisteredSeiTimecode: [, smithyClient.expectString, `unregisteredSeiTimecode`],
        WriteMp4PackagingType: [, smithyClient.expectString, `writeMp4PackagingType`],
    });
};
const de_Hdr10Metadata = (output, context) => {
    return smithyClient.take(output, {
        BluePrimaryX: [, smithyClient.expectInt32, `bluePrimaryX`],
        BluePrimaryY: [, smithyClient.expectInt32, `bluePrimaryY`],
        GreenPrimaryX: [, smithyClient.expectInt32, `greenPrimaryX`],
        GreenPrimaryY: [, smithyClient.expectInt32, `greenPrimaryY`],
        MaxContentLightLevel: [, smithyClient.expectInt32, `maxContentLightLevel`],
        MaxFrameAverageLightLevel: [, smithyClient.expectInt32, `maxFrameAverageLightLevel`],
        MaxLuminance: [, smithyClient.expectInt32, `maxLuminance`],
        MinLuminance: [, smithyClient.expectInt32, `minLuminance`],
        RedPrimaryX: [, smithyClient.expectInt32, `redPrimaryX`],
        RedPrimaryY: [, smithyClient.expectInt32, `redPrimaryY`],
        WhitePointX: [, smithyClient.expectInt32, `whitePointX`],
        WhitePointY: [, smithyClient.expectInt32, `whitePointY`],
    });
};
const de_Hdr10Plus = (output, context) => {
    return smithyClient.take(output, {
        MasteringMonitorNits: [, smithyClient.expectInt32, `masteringMonitorNits`],
        TargetMonitorNits: [, smithyClient.expectInt32, `targetMonitorNits`],
    });
};
const de_HlsAdditionalManifest = (output, context) => {
    return smithyClient.take(output, {
        ManifestNameModifier: [, smithyClient.expectString, `manifestNameModifier`],
        SelectedOutputs: [, smithyClient._json, `selectedOutputs`],
    });
};
const de_HlsCaptionLanguageMapping = (output, context) => {
    return smithyClient.take(output, {
        CaptionChannel: [, smithyClient.expectInt32, `captionChannel`],
        CustomLanguageCode: [, smithyClient.expectString, `customLanguageCode`],
        LanguageCode: [, smithyClient.expectString, `languageCode`],
        LanguageDescription: [, smithyClient.expectString, `languageDescription`],
    });
};
const de_HlsEncryptionSettings = (output, context) => {
    return smithyClient.take(output, {
        ConstantInitializationVector: [, smithyClient.expectString, `constantInitializationVector`],
        EncryptionMethod: [, smithyClient.expectString, `encryptionMethod`],
        InitializationVectorInManifest: [, smithyClient.expectString, `initializationVectorInManifest`],
        OfflineEncrypted: [, smithyClient.expectString, `offlineEncrypted`],
        SpekeKeyProvider: [, (_) => de_SpekeKeyProvider(_), `spekeKeyProvider`],
        StaticKeyProvider: [, (_) => de_StaticKeyProvider(_), `staticKeyProvider`],
        Type: [, smithyClient.expectString, `type`],
    });
};
const de_HlsGroupSettings = (output, context) => {
    return smithyClient.take(output, {
        AdMarkers: [, smithyClient._json, `adMarkers`],
        AdditionalManifests: [, (_) => de___listOfHlsAdditionalManifest(_), `additionalManifests`],
        AudioOnlyHeader: [, smithyClient.expectString, `audioOnlyHeader`],
        BaseUrl: [, smithyClient.expectString, `baseUrl`],
        CaptionLanguageMappings: [
            ,
            (_) => de___listOfHlsCaptionLanguageMapping(_),
            `captionLanguageMappings`,
        ],
        CaptionLanguageSetting: [, smithyClient.expectString, `captionLanguageSetting`],
        CaptionSegmentLengthControl: [, smithyClient.expectString, `captionSegmentLengthControl`],
        ClientCache: [, smithyClient.expectString, `clientCache`],
        CodecSpecification: [, smithyClient.expectString, `codecSpecification`],
        Destination: [, smithyClient.expectString, `destination`],
        DestinationSettings: [, (_) => de_DestinationSettings(_), `destinationSettings`],
        DirectoryStructure: [, smithyClient.expectString, `directoryStructure`],
        Encryption: [, (_) => de_HlsEncryptionSettings(_), `encryption`],
        ImageBasedTrickPlay: [, smithyClient.expectString, `imageBasedTrickPlay`],
        ImageBasedTrickPlaySettings: [
            ,
            (_) => de_HlsImageBasedTrickPlaySettings(_),
            `imageBasedTrickPlaySettings`,
        ],
        ManifestCompression: [, smithyClient.expectString, `manifestCompression`],
        ManifestDurationFormat: [, smithyClient.expectString, `manifestDurationFormat`],
        MinFinalSegmentLength: [, smithyClient.limitedParseDouble, `minFinalSegmentLength`],
        MinSegmentLength: [, smithyClient.expectInt32, `minSegmentLength`],
        OutputSelection: [, smithyClient.expectString, `outputSelection`],
        ProgramDateTime: [, smithyClient.expectString, `programDateTime`],
        ProgramDateTimePeriod: [, smithyClient.expectInt32, `programDateTimePeriod`],
        ProgressiveWriteHlsManifest: [, smithyClient.expectString, `progressiveWriteHlsManifest`],
        SegmentControl: [, smithyClient.expectString, `segmentControl`],
        SegmentLength: [, smithyClient.expectInt32, `segmentLength`],
        SegmentLengthControl: [, smithyClient.expectString, `segmentLengthControl`],
        SegmentsPerSubdirectory: [, smithyClient.expectInt32, `segmentsPerSubdirectory`],
        StreamInfResolution: [, smithyClient.expectString, `streamInfResolution`],
        TargetDurationCompatibilityMode: [, smithyClient.expectString, `targetDurationCompatibilityMode`],
        TimedMetadataId3Frame: [, smithyClient.expectString, `timedMetadataId3Frame`],
        TimedMetadataId3Period: [, smithyClient.expectInt32, `timedMetadataId3Period`],
        TimestampDeltaMilliseconds: [, smithyClient.expectInt32, `timestampDeltaMilliseconds`],
    });
};
const de_HlsImageBasedTrickPlaySettings = (output, context) => {
    return smithyClient.take(output, {
        IntervalCadence: [, smithyClient.expectString, `intervalCadence`],
        ThumbnailHeight: [, smithyClient.expectInt32, `thumbnailHeight`],
        ThumbnailInterval: [, smithyClient.limitedParseDouble, `thumbnailInterval`],
        ThumbnailWidth: [, smithyClient.expectInt32, `thumbnailWidth`],
        TileHeight: [, smithyClient.expectInt32, `tileHeight`],
        TileWidth: [, smithyClient.expectInt32, `tileWidth`],
    });
};
const de_HlsRenditionGroupSettings = (output, context) => {
    return smithyClient.take(output, {
        RenditionGroupId: [, smithyClient.expectString, `renditionGroupId`],
        RenditionLanguageCode: [, smithyClient.expectString, `renditionLanguageCode`],
        RenditionName: [, smithyClient.expectString, `renditionName`],
    });
};
const de_HlsSettings = (output, context) => {
    return smithyClient.take(output, {
        AudioGroupId: [, smithyClient.expectString, `audioGroupId`],
        AudioOnlyContainer: [, smithyClient.expectString, `audioOnlyContainer`],
        AudioRenditionSets: [, smithyClient.expectString, `audioRenditionSets`],
        AudioTrackType: [, smithyClient.expectString, `audioTrackType`],
        DescriptiveVideoServiceFlag: [, smithyClient.expectString, `descriptiveVideoServiceFlag`],
        IFrameOnlyManifest: [, smithyClient.expectString, `iFrameOnlyManifest`],
        SegmentModifier: [, smithyClient.expectString, `segmentModifier`],
    });
};
const de_HopDestination = (output, context) => {
    return smithyClient.take(output, {
        Priority: [, smithyClient.expectInt32, `priority`],
        Queue: [, smithyClient.expectString, `queue`],
        WaitMinutes: [, smithyClient.expectInt32, `waitMinutes`],
    });
};
const de_Id3Insertion = (output, context) => {
    return smithyClient.take(output, {
        Id3: [, smithyClient.expectString, `id3`],
        Timecode: [, smithyClient.expectString, `timecode`],
    });
};
const de_ImageInserter = (output, context) => {
    return smithyClient.take(output, {
        InsertableImages: [, (_) => de___listOfInsertableImage(_), `insertableImages`],
        SdrReferenceWhiteLevel: [, smithyClient.expectInt32, `sdrReferenceWhiteLevel`],
    });
};
const de_ImscDestinationSettings = (output, context) => {
    return smithyClient.take(output, {
        Accessibility: [, smithyClient.expectString, `accessibility`],
        StylePassthrough: [, smithyClient.expectString, `stylePassthrough`],
    });
};
const de_Input = (output, context) => {
    return smithyClient.take(output, {
        AdvancedInputFilter: [, smithyClient.expectString, `advancedInputFilter`],
        AdvancedInputFilterSettings: [
            ,
            (_) => de_AdvancedInputFilterSettings(_),
            `advancedInputFilterSettings`,
        ],
        AudioSelectorGroups: [, (_) => de___mapOfAudioSelectorGroup(_), `audioSelectorGroups`],
        AudioSelectors: [, (_) => de___mapOfAudioSelector(_), `audioSelectors`],
        CaptionSelectors: [, (_) => de___mapOfCaptionSelector(_), `captionSelectors`],
        Crop: [, (_) => de_Rectangle(_), `crop`],
        DeblockFilter: [, smithyClient.expectString, `deblockFilter`],
        DecryptionSettings: [, (_) => de_InputDecryptionSettings(_), `decryptionSettings`],
        DenoiseFilter: [, smithyClient.expectString, `denoiseFilter`],
        DolbyVisionMetadataXml: [, smithyClient.expectString, `dolbyVisionMetadataXml`],
        DynamicAudioSelectors: [, (_) => de___mapOfDynamicAudioSelector(_), `dynamicAudioSelectors`],
        FileInput: [, smithyClient.expectString, `fileInput`],
        FilterEnable: [, smithyClient.expectString, `filterEnable`],
        FilterStrength: [, smithyClient.expectInt32, `filterStrength`],
        ImageInserter: [, (_) => de_ImageInserter(_), `imageInserter`],
        InputClippings: [, (_) => de___listOfInputClipping(_), `inputClippings`],
        InputScanType: [, smithyClient.expectString, `inputScanType`],
        Position: [, (_) => de_Rectangle(_), `position`],
        ProgramNumber: [, smithyClient.expectInt32, `programNumber`],
        PsiControl: [, smithyClient.expectString, `psiControl`],
        SupplementalImps: [, smithyClient._json, `supplementalImps`],
        TamsSettings: [, (_) => de_InputTamsSettings(_), `tamsSettings`],
        TimecodeSource: [, smithyClient.expectString, `timecodeSource`],
        TimecodeStart: [, smithyClient.expectString, `timecodeStart`],
        VideoGenerator: [, (_) => de_InputVideoGenerator(_), `videoGenerator`],
        VideoOverlays: [, (_) => de___listOfVideoOverlay(_), `videoOverlays`],
        VideoSelector: [, (_) => de_VideoSelector(_), `videoSelector`],
    });
};
const de_InputClipping = (output, context) => {
    return smithyClient.take(output, {
        EndTimecode: [, smithyClient.expectString, `endTimecode`],
        StartTimecode: [, smithyClient.expectString, `startTimecode`],
    });
};
const de_InputDecryptionSettings = (output, context) => {
    return smithyClient.take(output, {
        DecryptionMode: [, smithyClient.expectString, `decryptionMode`],
        EncryptedDecryptionKey: [, smithyClient.expectString, `encryptedDecryptionKey`],
        InitializationVector: [, smithyClient.expectString, `initializationVector`],
        KmsKeyRegion: [, smithyClient.expectString, `kmsKeyRegion`],
    });
};
const de_InputTamsSettings = (output, context) => {
    return smithyClient.take(output, {
        AuthConnectionArn: [, smithyClient.expectString, `authConnectionArn`],
        GapHandling: [, smithyClient.expectString, `gapHandling`],
        SourceId: [, smithyClient.expectString, `sourceId`],
        Timerange: [, smithyClient.expectString, `timerange`],
    });
};
const de_InputTemplate = (output, context) => {
    return smithyClient.take(output, {
        AdvancedInputFilter: [, smithyClient.expectString, `advancedInputFilter`],
        AdvancedInputFilterSettings: [
            ,
            (_) => de_AdvancedInputFilterSettings(_),
            `advancedInputFilterSettings`,
        ],
        AudioSelectorGroups: [, (_) => de___mapOfAudioSelectorGroup(_), `audioSelectorGroups`],
        AudioSelectors: [, (_) => de___mapOfAudioSelector(_), `audioSelectors`],
        CaptionSelectors: [, (_) => de___mapOfCaptionSelector(_), `captionSelectors`],
        Crop: [, (_) => de_Rectangle(_), `crop`],
        DeblockFilter: [, smithyClient.expectString, `deblockFilter`],
        DenoiseFilter: [, smithyClient.expectString, `denoiseFilter`],
        DolbyVisionMetadataXml: [, smithyClient.expectString, `dolbyVisionMetadataXml`],
        DynamicAudioSelectors: [, (_) => de___mapOfDynamicAudioSelector(_), `dynamicAudioSelectors`],
        FilterEnable: [, smithyClient.expectString, `filterEnable`],
        FilterStrength: [, smithyClient.expectInt32, `filterStrength`],
        ImageInserter: [, (_) => de_ImageInserter(_), `imageInserter`],
        InputClippings: [, (_) => de___listOfInputClipping(_), `inputClippings`],
        InputScanType: [, smithyClient.expectString, `inputScanType`],
        Position: [, (_) => de_Rectangle(_), `position`],
        ProgramNumber: [, smithyClient.expectInt32, `programNumber`],
        PsiControl: [, smithyClient.expectString, `psiControl`],
        TimecodeSource: [, smithyClient.expectString, `timecodeSource`],
        TimecodeStart: [, smithyClient.expectString, `timecodeStart`],
        VideoOverlays: [, (_) => de___listOfVideoOverlay(_), `videoOverlays`],
        VideoSelector: [, (_) => de_VideoSelector(_), `videoSelector`],
    });
};
const de_InputVideoGenerator = (output, context) => {
    return smithyClient.take(output, {
        Channels: [, smithyClient.expectInt32, `channels`],
        Duration: [, smithyClient.expectInt32, `duration`],
        FramerateDenominator: [, smithyClient.expectInt32, `framerateDenominator`],
        FramerateNumerator: [, smithyClient.expectInt32, `framerateNumerator`],
        Height: [, smithyClient.expectInt32, `height`],
        SampleRate: [, smithyClient.expectInt32, `sampleRate`],
        Width: [, smithyClient.expectInt32, `width`],
    });
};
const de_InsertableImage = (output, context) => {
    return smithyClient.take(output, {
        Duration: [, smithyClient.expectInt32, `duration`],
        FadeIn: [, smithyClient.expectInt32, `fadeIn`],
        FadeOut: [, smithyClient.expectInt32, `fadeOut`],
        Height: [, smithyClient.expectInt32, `height`],
        ImageInserterInput: [, smithyClient.expectString, `imageInserterInput`],
        ImageX: [, smithyClient.expectInt32, `imageX`],
        ImageY: [, smithyClient.expectInt32, `imageY`],
        Layer: [, smithyClient.expectInt32, `layer`],
        Opacity: [, smithyClient.expectInt32, `opacity`],
        StartTime: [, smithyClient.expectString, `startTime`],
        Width: [, smithyClient.expectInt32, `width`],
    });
};
const de_Job = (output, context) => {
    return smithyClient.take(output, {
        AccelerationSettings: [, (_) => de_AccelerationSettings(_), `accelerationSettings`],
        AccelerationStatus: [, smithyClient.expectString, `accelerationStatus`],
        Arn: [, smithyClient.expectString, `arn`],
        BillingTagsSource: [, smithyClient.expectString, `billingTagsSource`],
        ClientRequestToken: [, smithyClient.expectString, `clientRequestToken`],
        CreatedAt: [, (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))), `createdAt`],
        CurrentPhase: [, smithyClient.expectString, `currentPhase`],
        ErrorCode: [, smithyClient.expectInt32, `errorCode`],
        ErrorMessage: [, smithyClient.expectString, `errorMessage`],
        HopDestinations: [, (_) => de___listOfHopDestination(_), `hopDestinations`],
        Id: [, smithyClient.expectString, `id`],
        JobEngineVersionRequested: [, smithyClient.expectString, `jobEngineVersionRequested`],
        JobEngineVersionUsed: [, smithyClient.expectString, `jobEngineVersionUsed`],
        JobPercentComplete: [, smithyClient.expectInt32, `jobPercentComplete`],
        JobTemplate: [, smithyClient.expectString, `jobTemplate`],
        LastShareDetails: [, smithyClient.expectString, `lastShareDetails`],
        Messages: [, (_) => de_JobMessages(_), `messages`],
        OutputGroupDetails: [, (_) => de___listOfOutputGroupDetail(_), `outputGroupDetails`],
        Priority: [, smithyClient.expectInt32, `priority`],
        Queue: [, smithyClient.expectString, `queue`],
        QueueTransitions: [, (_) => de___listOfQueueTransition(_), `queueTransitions`],
        RetryCount: [, smithyClient.expectInt32, `retryCount`],
        Role: [, smithyClient.expectString, `role`],
        Settings: [, (_) => de_JobSettings(_), `settings`],
        ShareStatus: [, smithyClient.expectString, `shareStatus`],
        SimulateReservedQueue: [, smithyClient.expectString, `simulateReservedQueue`],
        Status: [, smithyClient.expectString, `status`],
        StatusUpdateInterval: [, smithyClient.expectString, `statusUpdateInterval`],
        Timing: [, (_) => de_Timing(_), `timing`],
        UserMetadata: [, smithyClient._json, `userMetadata`],
        Warnings: [, (_) => de___listOfWarningGroup(_), `warnings`],
    });
};
const de_JobEngineVersion = (output, context) => {
    return smithyClient.take(output, {
        ExpirationDate: [, (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))), `expirationDate`],
        Version: [, smithyClient.expectString, `version`],
    });
};
const de_JobMessages = (output, context) => {
    return smithyClient.take(output, {
        Info: [, smithyClient._json, `info`],
        Warning: [, smithyClient._json, `warning`],
    });
};
const de_JobSettings = (output, context) => {
    return smithyClient.take(output, {
        AdAvailOffset: [, smithyClient.expectInt32, `adAvailOffset`],
        AvailBlanking: [, (_) => de_AvailBlanking(_), `availBlanking`],
        ColorConversion3DLUTSettings: [
            ,
            (_) => de___listOfColorConversion3DLUTSetting(_),
            `colorConversion3DLUTSettings`,
        ],
        Esam: [, (_) => de_EsamSettings(_), `esam`],
        ExtendedDataServices: [, (_) => de_ExtendedDataServices(_), `extendedDataServices`],
        FollowSource: [, smithyClient.expectInt32, `followSource`],
        Inputs: [, (_) => de___listOfInput(_), `inputs`],
        KantarWatermark: [, (_) => de_KantarWatermarkSettings(_), `kantarWatermark`],
        MotionImageInserter: [, (_) => de_MotionImageInserter(_), `motionImageInserter`],
        NielsenConfiguration: [, (_) => de_NielsenConfiguration(_), `nielsenConfiguration`],
        NielsenNonLinearWatermark: [
            ,
            (_) => de_NielsenNonLinearWatermarkSettings(_),
            `nielsenNonLinearWatermark`,
        ],
        OutputGroups: [, (_) => de___listOfOutputGroup(_), `outputGroups`],
        TimecodeConfig: [, (_) => de_TimecodeConfig(_), `timecodeConfig`],
        TimedMetadataInsertion: [, (_) => de_TimedMetadataInsertion(_), `timedMetadataInsertion`],
    });
};
const de_JobTemplate = (output, context) => {
    return smithyClient.take(output, {
        AccelerationSettings: [, (_) => de_AccelerationSettings(_), `accelerationSettings`],
        Arn: [, smithyClient.expectString, `arn`],
        Category: [, smithyClient.expectString, `category`],
        CreatedAt: [, (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))), `createdAt`],
        Description: [, smithyClient.expectString, `description`],
        HopDestinations: [, (_) => de___listOfHopDestination(_), `hopDestinations`],
        LastUpdated: [, (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))), `lastUpdated`],
        Name: [, smithyClient.expectString, `name`],
        Priority: [, smithyClient.expectInt32, `priority`],
        Queue: [, smithyClient.expectString, `queue`],
        Settings: [, (_) => de_JobTemplateSettings(_), `settings`],
        StatusUpdateInterval: [, smithyClient.expectString, `statusUpdateInterval`],
        Type: [, smithyClient.expectString, `type`],
    });
};
const de_JobTemplateSettings = (output, context) => {
    return smithyClient.take(output, {
        AdAvailOffset: [, smithyClient.expectInt32, `adAvailOffset`],
        AvailBlanking: [, (_) => de_AvailBlanking(_), `availBlanking`],
        ColorConversion3DLUTSettings: [
            ,
            (_) => de___listOfColorConversion3DLUTSetting(_),
            `colorConversion3DLUTSettings`,
        ],
        Esam: [, (_) => de_EsamSettings(_), `esam`],
        ExtendedDataServices: [, (_) => de_ExtendedDataServices(_), `extendedDataServices`],
        FollowSource: [, smithyClient.expectInt32, `followSource`],
        Inputs: [, (_) => de___listOfInputTemplate(_), `inputs`],
        KantarWatermark: [, (_) => de_KantarWatermarkSettings(_), `kantarWatermark`],
        MotionImageInserter: [, (_) => de_MotionImageInserter(_), `motionImageInserter`],
        NielsenConfiguration: [, (_) => de_NielsenConfiguration(_), `nielsenConfiguration`],
        NielsenNonLinearWatermark: [
            ,
            (_) => de_NielsenNonLinearWatermarkSettings(_),
            `nielsenNonLinearWatermark`,
        ],
        OutputGroups: [, (_) => de___listOfOutputGroup(_), `outputGroups`],
        TimecodeConfig: [, (_) => de_TimecodeConfig(_), `timecodeConfig`],
        TimedMetadataInsertion: [, (_) => de_TimedMetadataInsertion(_), `timedMetadataInsertion`],
    });
};
const de_KantarWatermarkSettings = (output, context) => {
    return smithyClient.take(output, {
        ChannelName: [, smithyClient.expectString, `channelName`],
        ContentReference: [, smithyClient.expectString, `contentReference`],
        CredentialsSecretName: [, smithyClient.expectString, `credentialsSecretName`],
        FileOffset: [, smithyClient.limitedParseDouble, `fileOffset`],
        KantarLicenseId: [, smithyClient.expectInt32, `kantarLicenseId`],
        KantarServerUrl: [, smithyClient.expectString, `kantarServerUrl`],
        LogDestination: [, smithyClient.expectString, `logDestination`],
        Metadata3: [, smithyClient.expectString, `metadata3`],
        Metadata4: [, smithyClient.expectString, `metadata4`],
        Metadata5: [, smithyClient.expectString, `metadata5`],
        Metadata6: [, smithyClient.expectString, `metadata6`],
        Metadata7: [, smithyClient.expectString, `metadata7`],
        Metadata8: [, smithyClient.expectString, `metadata8`],
    });
};
const de_M2tsScte35Esam = (output, context) => {
    return smithyClient.take(output, {
        Scte35EsamPid: [, smithyClient.expectInt32, `scte35EsamPid`],
    });
};
const de_M2tsSettings = (output, context) => {
    return smithyClient.take(output, {
        AudioBufferModel: [, smithyClient.expectString, `audioBufferModel`],
        AudioDuration: [, smithyClient.expectString, `audioDuration`],
        AudioFramesPerPes: [, smithyClient.expectInt32, `audioFramesPerPes`],
        AudioPids: [, smithyClient._json, `audioPids`],
        AudioPtsOffsetDelta: [, smithyClient.expectInt32, `audioPtsOffsetDelta`],
        Bitrate: [, smithyClient.expectInt32, `bitrate`],
        BufferModel: [, smithyClient.expectString, `bufferModel`],
        DataPTSControl: [, smithyClient.expectString, `dataPTSControl`],
        DvbNitSettings: [, (_) => de_DvbNitSettings(_), `dvbNitSettings`],
        DvbSdtSettings: [, (_) => de_DvbSdtSettings(_), `dvbSdtSettings`],
        DvbSubPids: [, smithyClient._json, `dvbSubPids`],
        DvbTdtSettings: [, (_) => de_DvbTdtSettings(_), `dvbTdtSettings`],
        DvbTeletextPid: [, smithyClient.expectInt32, `dvbTeletextPid`],
        EbpAudioInterval: [, smithyClient.expectString, `ebpAudioInterval`],
        EbpPlacement: [, smithyClient.expectString, `ebpPlacement`],
        EsRateInPes: [, smithyClient.expectString, `esRateInPes`],
        ForceTsVideoEbpOrder: [, smithyClient.expectString, `forceTsVideoEbpOrder`],
        FragmentTime: [, smithyClient.limitedParseDouble, `fragmentTime`],
        KlvMetadata: [, smithyClient.expectString, `klvMetadata`],
        MaxPcrInterval: [, smithyClient.expectInt32, `maxPcrInterval`],
        MinEbpInterval: [, smithyClient.expectInt32, `minEbpInterval`],
        NielsenId3: [, smithyClient.expectString, `nielsenId3`],
        NullPacketBitrate: [, smithyClient.limitedParseDouble, `nullPacketBitrate`],
        PatInterval: [, smithyClient.expectInt32, `patInterval`],
        PcrControl: [, smithyClient.expectString, `pcrControl`],
        PcrPid: [, smithyClient.expectInt32, `pcrPid`],
        PmtInterval: [, smithyClient.expectInt32, `pmtInterval`],
        PmtPid: [, smithyClient.expectInt32, `pmtPid`],
        PreventBufferUnderflow: [, smithyClient.expectString, `preventBufferUnderflow`],
        PrivateMetadataPid: [, smithyClient.expectInt32, `privateMetadataPid`],
        ProgramNumber: [, smithyClient.expectInt32, `programNumber`],
        PtsOffset: [, smithyClient.expectInt32, `ptsOffset`],
        PtsOffsetMode: [, smithyClient.expectString, `ptsOffsetMode`],
        RateMode: [, smithyClient.expectString, `rateMode`],
        Scte35Esam: [, (_) => de_M2tsScte35Esam(_), `scte35Esam`],
        Scte35Pid: [, smithyClient.expectInt32, `scte35Pid`],
        Scte35Source: [, smithyClient.expectString, `scte35Source`],
        SegmentationMarkers: [, smithyClient.expectString, `segmentationMarkers`],
        SegmentationStyle: [, smithyClient.expectString, `segmentationStyle`],
        SegmentationTime: [, smithyClient.limitedParseDouble, `segmentationTime`],
        TimedMetadataPid: [, smithyClient.expectInt32, `timedMetadataPid`],
        TransportStreamId: [, smithyClient.expectInt32, `transportStreamId`],
        VideoPid: [, smithyClient.expectInt32, `videoPid`],
    });
};
const de_M3u8Settings = (output, context) => {
    return smithyClient.take(output, {
        AudioDuration: [, smithyClient.expectString, `audioDuration`],
        AudioFramesPerPes: [, smithyClient.expectInt32, `audioFramesPerPes`],
        AudioPids: [, smithyClient._json, `audioPids`],
        AudioPtsOffsetDelta: [, smithyClient.expectInt32, `audioPtsOffsetDelta`],
        DataPTSControl: [, smithyClient.expectString, `dataPTSControl`],
        MaxPcrInterval: [, smithyClient.expectInt32, `maxPcrInterval`],
        NielsenId3: [, smithyClient.expectString, `nielsenId3`],
        PatInterval: [, smithyClient.expectInt32, `patInterval`],
        PcrControl: [, smithyClient.expectString, `pcrControl`],
        PcrPid: [, smithyClient.expectInt32, `pcrPid`],
        PmtInterval: [, smithyClient.expectInt32, `pmtInterval`],
        PmtPid: [, smithyClient.expectInt32, `pmtPid`],
        PrivateMetadataPid: [, smithyClient.expectInt32, `privateMetadataPid`],
        ProgramNumber: [, smithyClient.expectInt32, `programNumber`],
        PtsOffset: [, smithyClient.expectInt32, `ptsOffset`],
        PtsOffsetMode: [, smithyClient.expectString, `ptsOffsetMode`],
        Scte35Pid: [, smithyClient.expectInt32, `scte35Pid`],
        Scte35Source: [, smithyClient.expectString, `scte35Source`],
        TimedMetadata: [, smithyClient.expectString, `timedMetadata`],
        TimedMetadataPid: [, smithyClient.expectInt32, `timedMetadataPid`],
        TransportStreamId: [, smithyClient.expectInt32, `transportStreamId`],
        VideoPid: [, smithyClient.expectInt32, `videoPid`],
    });
};
const de_Metadata = (output, context) => {
    return smithyClient.take(output, {
        ETag: [, smithyClient.expectString, `eTag`],
        FileSize: [, smithyClient.expectLong, `fileSize`],
        LastModified: [, (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))), `lastModified`],
        MimeType: [, smithyClient.expectString, `mimeType`],
    });
};
const de_MinBottomRenditionSize = (output, context) => {
    return smithyClient.take(output, {
        Height: [, smithyClient.expectInt32, `height`],
        Width: [, smithyClient.expectInt32, `width`],
    });
};
const de_MinTopRenditionSize = (output, context) => {
    return smithyClient.take(output, {
        Height: [, smithyClient.expectInt32, `height`],
        Width: [, smithyClient.expectInt32, `width`],
    });
};
const de_MotionImageInserter = (output, context) => {
    return smithyClient.take(output, {
        Framerate: [, (_) => de_MotionImageInsertionFramerate(_), `framerate`],
        Input: [, smithyClient.expectString, `input`],
        InsertionMode: [, smithyClient.expectString, `insertionMode`],
        Offset: [, (_) => de_MotionImageInsertionOffset(_), `offset`],
        Playback: [, smithyClient.expectString, `playback`],
        StartTime: [, smithyClient.expectString, `startTime`],
    });
};
const de_MotionImageInsertionFramerate = (output, context) => {
    return smithyClient.take(output, {
        FramerateDenominator: [, smithyClient.expectInt32, `framerateDenominator`],
        FramerateNumerator: [, smithyClient.expectInt32, `framerateNumerator`],
    });
};
const de_MotionImageInsertionOffset = (output, context) => {
    return smithyClient.take(output, {
        ImageX: [, smithyClient.expectInt32, `imageX`],
        ImageY: [, smithyClient.expectInt32, `imageY`],
    });
};
const de_MovSettings = (output, context) => {
    return smithyClient.take(output, {
        ClapAtom: [, smithyClient.expectString, `clapAtom`],
        CslgAtom: [, smithyClient.expectString, `cslgAtom`],
        Mpeg2FourCCControl: [, smithyClient.expectString, `mpeg2FourCCControl`],
        PaddingControl: [, smithyClient.expectString, `paddingControl`],
        Reference: [, smithyClient.expectString, `reference`],
    });
};
const de_Mp2Settings = (output, context) => {
    return smithyClient.take(output, {
        AudioDescriptionMix: [, smithyClient.expectString, `audioDescriptionMix`],
        Bitrate: [, smithyClient.expectInt32, `bitrate`],
        Channels: [, smithyClient.expectInt32, `channels`],
        SampleRate: [, smithyClient.expectInt32, `sampleRate`],
    });
};
const de_Mp3Settings = (output, context) => {
    return smithyClient.take(output, {
        Bitrate: [, smithyClient.expectInt32, `bitrate`],
        Channels: [, smithyClient.expectInt32, `channels`],
        RateControlMode: [, smithyClient.expectString, `rateControlMode`],
        SampleRate: [, smithyClient.expectInt32, `sampleRate`],
        VbrQuality: [, smithyClient.expectInt32, `vbrQuality`],
    });
};
const de_Mp4Settings = (output, context) => {
    return smithyClient.take(output, {
        AudioDuration: [, smithyClient.expectString, `audioDuration`],
        C2paManifest: [, smithyClient.expectString, `c2paManifest`],
        CertificateSecret: [, smithyClient.expectString, `certificateSecret`],
        CslgAtom: [, smithyClient.expectString, `cslgAtom`],
        CttsVersion: [, smithyClient.expectInt32, `cttsVersion`],
        FreeSpaceBox: [, smithyClient.expectString, `freeSpaceBox`],
        MoovPlacement: [, smithyClient.expectString, `moovPlacement`],
        Mp4MajorBrand: [, smithyClient.expectString, `mp4MajorBrand`],
        SigningKmsKey: [, smithyClient.expectString, `signingKmsKey`],
    });
};
const de_MpdSettings = (output, context) => {
    return smithyClient.take(output, {
        AccessibilityCaptionHints: [, smithyClient.expectString, `accessibilityCaptionHints`],
        AudioDuration: [, smithyClient.expectString, `audioDuration`],
        CaptionContainerType: [, smithyClient.expectString, `captionContainerType`],
        KlvMetadata: [, smithyClient.expectString, `klvMetadata`],
        ManifestMetadataSignaling: [, smithyClient.expectString, `manifestMetadataSignaling`],
        Scte35Esam: [, smithyClient.expectString, `scte35Esam`],
        Scte35Source: [, smithyClient.expectString, `scte35Source`],
        TimedMetadata: [, smithyClient.expectString, `timedMetadata`],
        TimedMetadataBoxVersion: [, smithyClient.expectString, `timedMetadataBoxVersion`],
        TimedMetadataSchemeIdUri: [, smithyClient.expectString, `timedMetadataSchemeIdUri`],
        TimedMetadataValue: [, smithyClient.expectString, `timedMetadataValue`],
    });
};
const de_Mpeg2Settings = (output, context) => {
    return smithyClient.take(output, {
        AdaptiveQuantization: [, smithyClient.expectString, `adaptiveQuantization`],
        Bitrate: [, smithyClient.expectInt32, `bitrate`],
        CodecLevel: [, smithyClient.expectString, `codecLevel`],
        CodecProfile: [, smithyClient.expectString, `codecProfile`],
        DynamicSubGop: [, smithyClient.expectString, `dynamicSubGop`],
        FramerateControl: [, smithyClient.expectString, `framerateControl`],
        FramerateConversionAlgorithm: [, smithyClient.expectString, `framerateConversionAlgorithm`],
        FramerateDenominator: [, smithyClient.expectInt32, `framerateDenominator`],
        FramerateNumerator: [, smithyClient.expectInt32, `framerateNumerator`],
        GopClosedCadence: [, smithyClient.expectInt32, `gopClosedCadence`],
        GopSize: [, smithyClient.limitedParseDouble, `gopSize`],
        GopSizeUnits: [, smithyClient.expectString, `gopSizeUnits`],
        HrdBufferFinalFillPercentage: [, smithyClient.expectInt32, `hrdBufferFinalFillPercentage`],
        HrdBufferInitialFillPercentage: [, smithyClient.expectInt32, `hrdBufferInitialFillPercentage`],
        HrdBufferSize: [, smithyClient.expectInt32, `hrdBufferSize`],
        InterlaceMode: [, smithyClient.expectString, `interlaceMode`],
        IntraDcPrecision: [, smithyClient.expectString, `intraDcPrecision`],
        MaxBitrate: [, smithyClient.expectInt32, `maxBitrate`],
        MinIInterval: [, smithyClient.expectInt32, `minIInterval`],
        NumberBFramesBetweenReferenceFrames: [, smithyClient.expectInt32, `numberBFramesBetweenReferenceFrames`],
        ParControl: [, smithyClient.expectString, `parControl`],
        ParDenominator: [, smithyClient.expectInt32, `parDenominator`],
        ParNumerator: [, smithyClient.expectInt32, `parNumerator`],
        PerFrameMetrics: [, smithyClient._json, `perFrameMetrics`],
        QualityTuningLevel: [, smithyClient.expectString, `qualityTuningLevel`],
        RateControlMode: [, smithyClient.expectString, `rateControlMode`],
        ScanTypeConversionMode: [, smithyClient.expectString, `scanTypeConversionMode`],
        SceneChangeDetect: [, smithyClient.expectString, `sceneChangeDetect`],
        SlowPal: [, smithyClient.expectString, `slowPal`],
        Softness: [, smithyClient.expectInt32, `softness`],
        SpatialAdaptiveQuantization: [, smithyClient.expectString, `spatialAdaptiveQuantization`],
        Syntax: [, smithyClient.expectString, `syntax`],
        Telecine: [, smithyClient.expectString, `telecine`],
        TemporalAdaptiveQuantization: [, smithyClient.expectString, `temporalAdaptiveQuantization`],
    });
};
const de_MsSmoothAdditionalManifest = (output, context) => {
    return smithyClient.take(output, {
        ManifestNameModifier: [, smithyClient.expectString, `manifestNameModifier`],
        SelectedOutputs: [, smithyClient._json, `selectedOutputs`],
    });
};
const de_MsSmoothEncryptionSettings = (output, context) => {
    return smithyClient.take(output, {
        SpekeKeyProvider: [, (_) => de_SpekeKeyProvider(_), `spekeKeyProvider`],
    });
};
const de_MsSmoothGroupSettings = (output, context) => {
    return smithyClient.take(output, {
        AdditionalManifests: [, (_) => de___listOfMsSmoothAdditionalManifest(_), `additionalManifests`],
        AudioDeduplication: [, smithyClient.expectString, `audioDeduplication`],
        Destination: [, smithyClient.expectString, `destination`],
        DestinationSettings: [, (_) => de_DestinationSettings(_), `destinationSettings`],
        Encryption: [, (_) => de_MsSmoothEncryptionSettings(_), `encryption`],
        FragmentLength: [, smithyClient.expectInt32, `fragmentLength`],
        FragmentLengthControl: [, smithyClient.expectString, `fragmentLengthControl`],
        ManifestEncoding: [, smithyClient.expectString, `manifestEncoding`],
    });
};
const de_MxfSettings = (output, context) => {
    return smithyClient.take(output, {
        AfdSignaling: [, smithyClient.expectString, `afdSignaling`],
        Profile: [, smithyClient.expectString, `profile`],
        XavcProfileSettings: [, (_) => de_MxfXavcProfileSettings(_), `xavcProfileSettings`],
    });
};
const de_MxfXavcProfileSettings = (output, context) => {
    return smithyClient.take(output, {
        DurationMode: [, smithyClient.expectString, `durationMode`],
        MaxAncDataSize: [, smithyClient.expectInt32, `maxAncDataSize`],
    });
};
const de_NexGuardFileMarkerSettings = (output, context) => {
    return smithyClient.take(output, {
        License: [, smithyClient.expectString, `license`],
        Payload: [, smithyClient.expectInt32, `payload`],
        Preset: [, smithyClient.expectString, `preset`],
        Strength: [, smithyClient.expectString, `strength`],
    });
};
const de_NielsenConfiguration = (output, context) => {
    return smithyClient.take(output, {
        BreakoutCode: [, smithyClient.expectInt32, `breakoutCode`],
        DistributorId: [, smithyClient.expectString, `distributorId`],
    });
};
const de_NielsenNonLinearWatermarkSettings = (output, context) => {
    return smithyClient.take(output, {
        ActiveWatermarkProcess: [, smithyClient.expectString, `activeWatermarkProcess`],
        AdiFilename: [, smithyClient.expectString, `adiFilename`],
        AssetId: [, smithyClient.expectString, `assetId`],
        AssetName: [, smithyClient.expectString, `assetName`],
        CbetSourceId: [, smithyClient.expectString, `cbetSourceId`],
        EpisodeId: [, smithyClient.expectString, `episodeId`],
        MetadataDestination: [, smithyClient.expectString, `metadataDestination`],
        SourceId: [, smithyClient.expectInt32, `sourceId`],
        SourceWatermarkStatus: [, smithyClient.expectString, `sourceWatermarkStatus`],
        TicServerUrl: [, smithyClient.expectString, `ticServerUrl`],
        UniqueTicPerAudioTrack: [, smithyClient.expectString, `uniqueTicPerAudioTrack`],
    });
};
const de_NoiseReducer = (output, context) => {
    return smithyClient.take(output, {
        Filter: [, smithyClient.expectString, `filter`],
        FilterSettings: [, (_) => de_NoiseReducerFilterSettings(_), `filterSettings`],
        SpatialFilterSettings: [, (_) => de_NoiseReducerSpatialFilterSettings(_), `spatialFilterSettings`],
        TemporalFilterSettings: [, (_) => de_NoiseReducerTemporalFilterSettings(_), `temporalFilterSettings`],
    });
};
const de_NoiseReducerFilterSettings = (output, context) => {
    return smithyClient.take(output, {
        Strength: [, smithyClient.expectInt32, `strength`],
    });
};
const de_NoiseReducerSpatialFilterSettings = (output, context) => {
    return smithyClient.take(output, {
        PostFilterSharpenStrength: [, smithyClient.expectInt32, `postFilterSharpenStrength`],
        Speed: [, smithyClient.expectInt32, `speed`],
        Strength: [, smithyClient.expectInt32, `strength`],
    });
};
const de_NoiseReducerTemporalFilterSettings = (output, context) => {
    return smithyClient.take(output, {
        AggressiveMode: [, smithyClient.expectInt32, `aggressiveMode`],
        PostTemporalSharpening: [, smithyClient.expectString, `postTemporalSharpening`],
        PostTemporalSharpeningStrength: [, smithyClient.expectString, `postTemporalSharpeningStrength`],
        Speed: [, smithyClient.expectInt32, `speed`],
        Strength: [, smithyClient.expectInt32, `strength`],
    });
};
const de_OpusSettings = (output, context) => {
    return smithyClient.take(output, {
        Bitrate: [, smithyClient.expectInt32, `bitrate`],
        Channels: [, smithyClient.expectInt32, `channels`],
        SampleRate: [, smithyClient.expectInt32, `sampleRate`],
    });
};
const de_Output = (output, context) => {
    return smithyClient.take(output, {
        AudioDescriptions: [, (_) => de___listOfAudioDescription(_), `audioDescriptions`],
        CaptionDescriptions: [, (_) => de___listOfCaptionDescription(_), `captionDescriptions`],
        ContainerSettings: [, (_) => de_ContainerSettings(_), `containerSettings`],
        Extension: [, smithyClient.expectString, `extension`],
        NameModifier: [, smithyClient.expectString, `nameModifier`],
        OutputSettings: [, (_) => de_OutputSettings(_), `outputSettings`],
        Preset: [, smithyClient.expectString, `preset`],
        VideoDescription: [, (_) => de_VideoDescription(_), `videoDescription`],
    });
};
const de_OutputChannelMapping = (output, context) => {
    return smithyClient.take(output, {
        InputChannels: [, smithyClient._json, `inputChannels`],
        InputChannelsFineTune: [, (_) => de___listOf__doubleMinNegative60Max6(_), `inputChannelsFineTune`],
    });
};
const de_OutputDetail = (output, context) => {
    return smithyClient.take(output, {
        DurationInMs: [, smithyClient.expectInt32, `durationInMs`],
        VideoDetails: [, (_) => de_VideoDetail(_), `videoDetails`],
    });
};
const de_OutputGroup = (output, context) => {
    return smithyClient.take(output, {
        AutomatedEncodingSettings: [, (_) => de_AutomatedEncodingSettings(_), `automatedEncodingSettings`],
        CustomName: [, smithyClient.expectString, `customName`],
        Name: [, smithyClient.expectString, `name`],
        OutputGroupSettings: [, (_) => de_OutputGroupSettings(_), `outputGroupSettings`],
        Outputs: [, (_) => de___listOfOutput(_), `outputs`],
    });
};
const de_OutputGroupDetail = (output, context) => {
    return smithyClient.take(output, {
        OutputDetails: [, (_) => de___listOfOutputDetail(_), `outputDetails`],
    });
};
const de_OutputGroupSettings = (output, context) => {
    return smithyClient.take(output, {
        CmafGroupSettings: [, (_) => de_CmafGroupSettings(_), `cmafGroupSettings`],
        DashIsoGroupSettings: [, (_) => de_DashIsoGroupSettings(_), `dashIsoGroupSettings`],
        FileGroupSettings: [, (_) => de_FileGroupSettings(_), `fileGroupSettings`],
        HlsGroupSettings: [, (_) => de_HlsGroupSettings(_), `hlsGroupSettings`],
        MsSmoothGroupSettings: [, (_) => de_MsSmoothGroupSettings(_), `msSmoothGroupSettings`],
        PerFrameMetrics: [, smithyClient._json, `perFrameMetrics`],
        Type: [, smithyClient.expectString, `type`],
    });
};
const de_OutputSettings = (output, context) => {
    return smithyClient.take(output, {
        HlsSettings: [, (_) => de_HlsSettings(_), `hlsSettings`],
    });
};
const de_PartnerWatermarking = (output, context) => {
    return smithyClient.take(output, {
        NexguardFileMarkerSettings: [, (_) => de_NexGuardFileMarkerSettings(_), `nexguardFileMarkerSettings`],
    });
};
const de_Policy = (output, context) => {
    return smithyClient.take(output, {
        HttpInputs: [, smithyClient.expectString, `httpInputs`],
        HttpsInputs: [, smithyClient.expectString, `httpsInputs`],
        S3Inputs: [, smithyClient.expectString, `s3Inputs`],
    });
};
const de_Preset = (output, context) => {
    return smithyClient.take(output, {
        Arn: [, smithyClient.expectString, `arn`],
        Category: [, smithyClient.expectString, `category`],
        CreatedAt: [, (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))), `createdAt`],
        Description: [, smithyClient.expectString, `description`],
        LastUpdated: [, (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))), `lastUpdated`],
        Name: [, smithyClient.expectString, `name`],
        Settings: [, (_) => de_PresetSettings(_), `settings`],
        Type: [, smithyClient.expectString, `type`],
    });
};
const de_PresetSettings = (output, context) => {
    return smithyClient.take(output, {
        AudioDescriptions: [, (_) => de___listOfAudioDescription(_), `audioDescriptions`],
        CaptionDescriptions: [, (_) => de___listOfCaptionDescriptionPreset(_), `captionDescriptions`],
        ContainerSettings: [, (_) => de_ContainerSettings(_), `containerSettings`],
        VideoDescription: [, (_) => de_VideoDescription(_), `videoDescription`],
    });
};
const de_ProbeResult = (output, context) => {
    return smithyClient.take(output, {
        Container: [, (_) => de_Container(_), `container`],
        Metadata: [, (_) => de_Metadata(_), `metadata`],
        TrackMappings: [, (_) => de___listOfTrackMapping(_), `trackMappings`],
    });
};
const de_ProresSettings = (output, context) => {
    return smithyClient.take(output, {
        ChromaSampling: [, smithyClient.expectString, `chromaSampling`],
        CodecProfile: [, smithyClient.expectString, `codecProfile`],
        FramerateControl: [, smithyClient.expectString, `framerateControl`],
        FramerateConversionAlgorithm: [, smithyClient.expectString, `framerateConversionAlgorithm`],
        FramerateDenominator: [, smithyClient.expectInt32, `framerateDenominator`],
        FramerateNumerator: [, smithyClient.expectInt32, `framerateNumerator`],
        InterlaceMode: [, smithyClient.expectString, `interlaceMode`],
        ParControl: [, smithyClient.expectString, `parControl`],
        ParDenominator: [, smithyClient.expectInt32, `parDenominator`],
        ParNumerator: [, smithyClient.expectInt32, `parNumerator`],
        PerFrameMetrics: [, smithyClient._json, `perFrameMetrics`],
        ScanTypeConversionMode: [, smithyClient.expectString, `scanTypeConversionMode`],
        SlowPal: [, smithyClient.expectString, `slowPal`],
        Telecine: [, smithyClient.expectString, `telecine`],
    });
};
const de_Queue = (output, context) => {
    return smithyClient.take(output, {
        Arn: [, smithyClient.expectString, `arn`],
        ConcurrentJobs: [, smithyClient.expectInt32, `concurrentJobs`],
        CreatedAt: [, (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))), `createdAt`],
        Description: [, smithyClient.expectString, `description`],
        LastUpdated: [, (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))), `lastUpdated`],
        Name: [, smithyClient.expectString, `name`],
        PricingPlan: [, smithyClient.expectString, `pricingPlan`],
        ProgressingJobsCount: [, smithyClient.expectInt32, `progressingJobsCount`],
        ReservationPlan: [, (_) => de_ReservationPlan(_), `reservationPlan`],
        ServiceOverrides: [, (_) => de___listOfServiceOverride(_), `serviceOverrides`],
        Status: [, smithyClient.expectString, `status`],
        SubmittedJobsCount: [, smithyClient.expectInt32, `submittedJobsCount`],
        Type: [, smithyClient.expectString, `type`],
    });
};
const de_QueueTransition = (output, context) => {
    return smithyClient.take(output, {
        DestinationQueue: [, smithyClient.expectString, `destinationQueue`],
        SourceQueue: [, smithyClient.expectString, `sourceQueue`],
        Timestamp: [, (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))), `timestamp`],
    });
};
const de_Rectangle = (output, context) => {
    return smithyClient.take(output, {
        Height: [, smithyClient.expectInt32, `height`],
        Width: [, smithyClient.expectInt32, `width`],
        X: [, smithyClient.expectInt32, `x`],
        Y: [, smithyClient.expectInt32, `y`],
    });
};
const de_RemixSettings = (output, context) => {
    return smithyClient.take(output, {
        AudioDescriptionAudioChannel: [, smithyClient.expectInt32, `audioDescriptionAudioChannel`],
        AudioDescriptionDataChannel: [, smithyClient.expectInt32, `audioDescriptionDataChannel`],
        ChannelMapping: [, (_) => de_ChannelMapping(_), `channelMapping`],
        ChannelsIn: [, smithyClient.expectInt32, `channelsIn`],
        ChannelsOut: [, smithyClient.expectInt32, `channelsOut`],
    });
};
const de_ReservationPlan = (output, context) => {
    return smithyClient.take(output, {
        Commitment: [, smithyClient.expectString, `commitment`],
        ExpiresAt: [, (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))), `expiresAt`],
        PurchasedAt: [, (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))), `purchasedAt`],
        RenewalType: [, smithyClient.expectString, `renewalType`],
        ReservedSlots: [, smithyClient.expectInt32, `reservedSlots`],
        Status: [, smithyClient.expectString, `status`],
    });
};
const de_ResourceTags = (output, context) => {
    return smithyClient.take(output, {
        Arn: [, smithyClient.expectString, `arn`],
        Tags: [, smithyClient._json, `tags`],
    });
};
const de_S3DestinationAccessControl = (output, context) => {
    return smithyClient.take(output, {
        CannedAcl: [, smithyClient.expectString, `cannedAcl`],
    });
};
const de_S3DestinationSettings = (output, context) => {
    return smithyClient.take(output, {
        AccessControl: [, (_) => de_S3DestinationAccessControl(_), `accessControl`],
        Encryption: [, (_) => de_S3EncryptionSettings(_), `encryption`],
        StorageClass: [, smithyClient.expectString, `storageClass`],
    });
};
const de_S3EncryptionSettings = (output, context) => {
    return smithyClient.take(output, {
        EncryptionType: [, smithyClient.expectString, `encryptionType`],
        KmsEncryptionContext: [, smithyClient.expectString, `kmsEncryptionContext`],
        KmsKeyArn: [, smithyClient.expectString, `kmsKeyArn`],
    });
};
const de_SccDestinationSettings = (output, context) => {
    return smithyClient.take(output, {
        Framerate: [, smithyClient.expectString, `framerate`],
    });
};
const de_ServiceOverride = (output, context) => {
    return smithyClient.take(output, {
        Message: [, smithyClient.expectString, `message`],
        Name: [, smithyClient.expectString, `name`],
        OverrideValue: [, smithyClient.expectString, `overrideValue`],
        Value: [, smithyClient.expectString, `value`],
    });
};
const de_SpekeKeyProvider = (output, context) => {
    return smithyClient.take(output, {
        CertificateArn: [, smithyClient.expectString, `certificateArn`],
        EncryptionContractConfiguration: [
            ,
            (_) => de_EncryptionContractConfiguration(_),
            `encryptionContractConfiguration`,
        ],
        ResourceId: [, smithyClient.expectString, `resourceId`],
        SystemIds: [, smithyClient._json, `systemIds`],
        Url: [, smithyClient.expectString, `url`],
    });
};
const de_SpekeKeyProviderCmaf = (output, context) => {
    return smithyClient.take(output, {
        CertificateArn: [, smithyClient.expectString, `certificateArn`],
        DashSignaledSystemIds: [, smithyClient._json, `dashSignaledSystemIds`],
        EncryptionContractConfiguration: [
            ,
            (_) => de_EncryptionContractConfiguration(_),
            `encryptionContractConfiguration`,
        ],
        HlsSignaledSystemIds: [, smithyClient._json, `hlsSignaledSystemIds`],
        ResourceId: [, smithyClient.expectString, `resourceId`],
        Url: [, smithyClient.expectString, `url`],
    });
};
const de_SrtDestinationSettings = (output, context) => {
    return smithyClient.take(output, {
        StylePassthrough: [, smithyClient.expectString, `stylePassthrough`],
    });
};
const de_StaticKeyProvider = (output, context) => {
    return smithyClient.take(output, {
        KeyFormat: [, smithyClient.expectString, `keyFormat`],
        KeyFormatVersions: [, smithyClient.expectString, `keyFormatVersions`],
        StaticKeyValue: [, smithyClient.expectString, `staticKeyValue`],
        Url: [, smithyClient.expectString, `url`],
    });
};
const de_TeletextDestinationSettings = (output, context) => {
    return smithyClient.take(output, {
        PageNumber: [, smithyClient.expectString, `pageNumber`],
        PageTypes: [, smithyClient._json, `pageTypes`],
    });
};
const de_TeletextSourceSettings = (output, context) => {
    return smithyClient.take(output, {
        PageNumber: [, smithyClient.expectString, `pageNumber`],
    });
};
const de_TimecodeBurnin = (output, context) => {
    return smithyClient.take(output, {
        FontSize: [, smithyClient.expectInt32, `fontSize`],
        Position: [, smithyClient.expectString, `position`],
        Prefix: [, smithyClient.expectString, `prefix`],
    });
};
const de_TimecodeConfig = (output, context) => {
    return smithyClient.take(output, {
        Anchor: [, smithyClient.expectString, `anchor`],
        Source: [, smithyClient.expectString, `source`],
        Start: [, smithyClient.expectString, `start`],
        TimestampOffset: [, smithyClient.expectString, `timestampOffset`],
    });
};
const de_TimedMetadataInsertion = (output, context) => {
    return smithyClient.take(output, {
        Id3Insertions: [, (_) => de___listOfId3Insertion(_), `id3Insertions`],
    });
};
const de_Timing = (output, context) => {
    return smithyClient.take(output, {
        FinishTime: [, (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))), `finishTime`],
        StartTime: [, (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))), `startTime`],
        SubmitTime: [, (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))), `submitTime`],
    });
};
const de_Track = (output, context) => {
    return smithyClient.take(output, {
        AudioProperties: [, (_) => de_AudioProperties(_), `audioProperties`],
        Codec: [, smithyClient.expectString, `codec`],
        DataProperties: [, (_) => de_DataProperties(_), `dataProperties`],
        Duration: [, smithyClient.limitedParseDouble, `duration`],
        Index: [, smithyClient.expectInt32, `index`],
        TrackType: [, smithyClient.expectString, `trackType`],
        VideoProperties: [, (_) => de_VideoProperties(_), `videoProperties`],
    });
};
const de_TrackMapping = (output, context) => {
    return smithyClient.take(output, {
        AudioTrackIndexes: [, smithyClient._json, `audioTrackIndexes`],
        DataTrackIndexes: [, smithyClient._json, `dataTrackIndexes`],
        VideoTrackIndexes: [, smithyClient._json, `videoTrackIndexes`],
    });
};
const de_TrackSourceSettings = (output, context) => {
    return smithyClient.take(output, {
        TrackNumber: [, smithyClient.expectInt32, `trackNumber`],
    });
};
const de_TtmlDestinationSettings = (output, context) => {
    return smithyClient.take(output, {
        StylePassthrough: [, smithyClient.expectString, `stylePassthrough`],
    });
};
const de_UncompressedSettings = (output, context) => {
    return smithyClient.take(output, {
        Fourcc: [, smithyClient.expectString, `fourcc`],
        FramerateControl: [, smithyClient.expectString, `framerateControl`],
        FramerateConversionAlgorithm: [, smithyClient.expectString, `framerateConversionAlgorithm`],
        FramerateDenominator: [, smithyClient.expectInt32, `framerateDenominator`],
        FramerateNumerator: [, smithyClient.expectInt32, `framerateNumerator`],
        InterlaceMode: [, smithyClient.expectString, `interlaceMode`],
        ScanTypeConversionMode: [, smithyClient.expectString, `scanTypeConversionMode`],
        SlowPal: [, smithyClient.expectString, `slowPal`],
        Telecine: [, smithyClient.expectString, `telecine`],
    });
};
const de_Vc3Settings = (output, context) => {
    return smithyClient.take(output, {
        FramerateControl: [, smithyClient.expectString, `framerateControl`],
        FramerateConversionAlgorithm: [, smithyClient.expectString, `framerateConversionAlgorithm`],
        FramerateDenominator: [, smithyClient.expectInt32, `framerateDenominator`],
        FramerateNumerator: [, smithyClient.expectInt32, `framerateNumerator`],
        InterlaceMode: [, smithyClient.expectString, `interlaceMode`],
        ScanTypeConversionMode: [, smithyClient.expectString, `scanTypeConversionMode`],
        SlowPal: [, smithyClient.expectString, `slowPal`],
        Telecine: [, smithyClient.expectString, `telecine`],
        Vc3Class: [, smithyClient.expectString, `vc3Class`],
    });
};
const de_VideoCodecSettings = (output, context) => {
    return smithyClient.take(output, {
        Av1Settings: [, (_) => de_Av1Settings(_), `av1Settings`],
        AvcIntraSettings: [, (_) => de_AvcIntraSettings(_), `avcIntraSettings`],
        Codec: [, smithyClient.expectString, `codec`],
        FrameCaptureSettings: [, (_) => de_FrameCaptureSettings(_), `frameCaptureSettings`],
        GifSettings: [, (_) => de_GifSettings(_), `gifSettings`],
        H264Settings: [, (_) => de_H264Settings(_), `h264Settings`],
        H265Settings: [, (_) => de_H265Settings(_), `h265Settings`],
        Mpeg2Settings: [, (_) => de_Mpeg2Settings(_), `mpeg2Settings`],
        ProresSettings: [, (_) => de_ProresSettings(_), `proresSettings`],
        UncompressedSettings: [, (_) => de_UncompressedSettings(_), `uncompressedSettings`],
        Vc3Settings: [, (_) => de_Vc3Settings(_), `vc3Settings`],
        Vp8Settings: [, (_) => de_Vp8Settings(_), `vp8Settings`],
        Vp9Settings: [, (_) => de_Vp9Settings(_), `vp9Settings`],
        XavcSettings: [, (_) => de_XavcSettings(_), `xavcSettings`],
    });
};
const de_VideoDescription = (output, context) => {
    return smithyClient.take(output, {
        AfdSignaling: [, smithyClient.expectString, `afdSignaling`],
        AntiAlias: [, smithyClient.expectString, `antiAlias`],
        ChromaPositionMode: [, smithyClient.expectString, `chromaPositionMode`],
        CodecSettings: [, (_) => de_VideoCodecSettings(_), `codecSettings`],
        ColorMetadata: [, smithyClient.expectString, `colorMetadata`],
        Crop: [, (_) => de_Rectangle(_), `crop`],
        DropFrameTimecode: [, smithyClient.expectString, `dropFrameTimecode`],
        FixedAfd: [, smithyClient.expectInt32, `fixedAfd`],
        Height: [, smithyClient.expectInt32, `height`],
        Position: [, (_) => de_Rectangle(_), `position`],
        RespondToAfd: [, smithyClient.expectString, `respondToAfd`],
        ScalingBehavior: [, smithyClient.expectString, `scalingBehavior`],
        Sharpness: [, smithyClient.expectInt32, `sharpness`],
        TimecodeInsertion: [, smithyClient.expectString, `timecodeInsertion`],
        TimecodeTrack: [, smithyClient.expectString, `timecodeTrack`],
        VideoPreprocessors: [, (_) => de_VideoPreprocessor(_), `videoPreprocessors`],
        Width: [, smithyClient.expectInt32, `width`],
    });
};
const de_VideoDetail = (output, context) => {
    return smithyClient.take(output, {
        HeightInPx: [, smithyClient.expectInt32, `heightInPx`],
        WidthInPx: [, smithyClient.expectInt32, `widthInPx`],
    });
};
const de_VideoOverlay = (output, context) => {
    return smithyClient.take(output, {
        Crop: [, (_) => de_VideoOverlayCrop(_), `crop`],
        EndTimecode: [, smithyClient.expectString, `endTimecode`],
        InitialPosition: [, (_) => de_VideoOverlayPosition(_), `initialPosition`],
        Input: [, (_) => de_VideoOverlayInput(_), `input`],
        Playback: [, smithyClient.expectString, `playback`],
        StartTimecode: [, smithyClient.expectString, `startTimecode`],
        Transitions: [, (_) => de___listOfVideoOverlayTransition(_), `transitions`],
    });
};
const de_VideoOverlayCrop = (output, context) => {
    return smithyClient.take(output, {
        Height: [, smithyClient.expectInt32, `height`],
        Unit: [, smithyClient.expectString, `unit`],
        Width: [, smithyClient.expectInt32, `width`],
        X: [, smithyClient.expectInt32, `x`],
        Y: [, smithyClient.expectInt32, `y`],
    });
};
const de_VideoOverlayInput = (output, context) => {
    return smithyClient.take(output, {
        FileInput: [, smithyClient.expectString, `fileInput`],
        InputClippings: [, (_) => de___listOfVideoOverlayInputClipping(_), `inputClippings`],
        TimecodeSource: [, smithyClient.expectString, `timecodeSource`],
        TimecodeStart: [, smithyClient.expectString, `timecodeStart`],
    });
};
const de_VideoOverlayInputClipping = (output, context) => {
    return smithyClient.take(output, {
        EndTimecode: [, smithyClient.expectString, `endTimecode`],
        StartTimecode: [, smithyClient.expectString, `startTimecode`],
    });
};
const de_VideoOverlayPosition = (output, context) => {
    return smithyClient.take(output, {
        Height: [, smithyClient.expectInt32, `height`],
        Unit: [, smithyClient.expectString, `unit`],
        Width: [, smithyClient.expectInt32, `width`],
        XPosition: [, smithyClient.expectInt32, `xPosition`],
        YPosition: [, smithyClient.expectInt32, `yPosition`],
    });
};
const de_VideoOverlayTransition = (output, context) => {
    return smithyClient.take(output, {
        EndPosition: [, (_) => de_VideoOverlayPosition(_), `endPosition`],
        EndTimecode: [, smithyClient.expectString, `endTimecode`],
        StartTimecode: [, smithyClient.expectString, `startTimecode`],
    });
};
const de_VideoPreprocessor = (output, context) => {
    return smithyClient.take(output, {
        ColorCorrector: [, (_) => de_ColorCorrector(_), `colorCorrector`],
        Deinterlacer: [, (_) => de_Deinterlacer(_), `deinterlacer`],
        DolbyVision: [, (_) => de_DolbyVision(_), `dolbyVision`],
        Hdr10Plus: [, (_) => de_Hdr10Plus(_), `hdr10Plus`],
        ImageInserter: [, (_) => de_ImageInserter(_), `imageInserter`],
        NoiseReducer: [, (_) => de_NoiseReducer(_), `noiseReducer`],
        PartnerWatermarking: [, (_) => de_PartnerWatermarking(_), `partnerWatermarking`],
        TimecodeBurnin: [, (_) => de_TimecodeBurnin(_), `timecodeBurnin`],
    });
};
const de_VideoProperties = (output, context) => {
    return smithyClient.take(output, {
        BitDepth: [, smithyClient.expectInt32, `bitDepth`],
        BitRate: [, smithyClient.expectLong, `bitRate`],
        CodecMetadata: [, (_) => de_CodecMetadata(_), `codecMetadata`],
        ColorPrimaries: [, smithyClient.expectString, `colorPrimaries`],
        FrameRate: [, (_) => de_FrameRate(_), `frameRate`],
        Height: [, smithyClient.expectInt32, `height`],
        MatrixCoefficients: [, smithyClient.expectString, `matrixCoefficients`],
        TransferCharacteristics: [, smithyClient.expectString, `transferCharacteristics`],
        Width: [, smithyClient.expectInt32, `width`],
    });
};
const de_VideoSelector = (output, context) => {
    return smithyClient.take(output, {
        AlphaBehavior: [, smithyClient.expectString, `alphaBehavior`],
        ColorSpace: [, smithyClient.expectString, `colorSpace`],
        ColorSpaceUsage: [, smithyClient.expectString, `colorSpaceUsage`],
        EmbeddedTimecodeOverride: [, smithyClient.expectString, `embeddedTimecodeOverride`],
        Hdr10Metadata: [, (_) => de_Hdr10Metadata(_), `hdr10Metadata`],
        MaxLuminance: [, smithyClient.expectInt32, `maxLuminance`],
        PadVideo: [, smithyClient.expectString, `padVideo`],
        Pid: [, smithyClient.expectInt32, `pid`],
        ProgramNumber: [, smithyClient.expectInt32, `programNumber`],
        Rotate: [, smithyClient.expectString, `rotate`],
        SampleRange: [, smithyClient.expectString, `sampleRange`],
        SelectorType: [, smithyClient.expectString, `selectorType`],
        Streams: [, smithyClient._json, `streams`],
    });
};
const de_VorbisSettings = (output, context) => {
    return smithyClient.take(output, {
        Channels: [, smithyClient.expectInt32, `channels`],
        SampleRate: [, smithyClient.expectInt32, `sampleRate`],
        VbrQuality: [, smithyClient.expectInt32, `vbrQuality`],
    });
};
const de_Vp8Settings = (output, context) => {
    return smithyClient.take(output, {
        Bitrate: [, smithyClient.expectInt32, `bitrate`],
        FramerateControl: [, smithyClient.expectString, `framerateControl`],
        FramerateConversionAlgorithm: [, smithyClient.expectString, `framerateConversionAlgorithm`],
        FramerateDenominator: [, smithyClient.expectInt32, `framerateDenominator`],
        FramerateNumerator: [, smithyClient.expectInt32, `framerateNumerator`],
        GopSize: [, smithyClient.limitedParseDouble, `gopSize`],
        HrdBufferSize: [, smithyClient.expectInt32, `hrdBufferSize`],
        MaxBitrate: [, smithyClient.expectInt32, `maxBitrate`],
        ParControl: [, smithyClient.expectString, `parControl`],
        ParDenominator: [, smithyClient.expectInt32, `parDenominator`],
        ParNumerator: [, smithyClient.expectInt32, `parNumerator`],
        QualityTuningLevel: [, smithyClient.expectString, `qualityTuningLevel`],
        RateControlMode: [, smithyClient.expectString, `rateControlMode`],
    });
};
const de_Vp9Settings = (output, context) => {
    return smithyClient.take(output, {
        Bitrate: [, smithyClient.expectInt32, `bitrate`],
        FramerateControl: [, smithyClient.expectString, `framerateControl`],
        FramerateConversionAlgorithm: [, smithyClient.expectString, `framerateConversionAlgorithm`],
        FramerateDenominator: [, smithyClient.expectInt32, `framerateDenominator`],
        FramerateNumerator: [, smithyClient.expectInt32, `framerateNumerator`],
        GopSize: [, smithyClient.limitedParseDouble, `gopSize`],
        HrdBufferSize: [, smithyClient.expectInt32, `hrdBufferSize`],
        MaxBitrate: [, smithyClient.expectInt32, `maxBitrate`],
        ParControl: [, smithyClient.expectString, `parControl`],
        ParDenominator: [, smithyClient.expectInt32, `parDenominator`],
        ParNumerator: [, smithyClient.expectInt32, `parNumerator`],
        QualityTuningLevel: [, smithyClient.expectString, `qualityTuningLevel`],
        RateControlMode: [, smithyClient.expectString, `rateControlMode`],
    });
};
const de_WarningGroup = (output, context) => {
    return smithyClient.take(output, {
        Code: [, smithyClient.expectInt32, `code`],
        Count: [, smithyClient.expectInt32, `count`],
    });
};
const de_WavSettings = (output, context) => {
    return smithyClient.take(output, {
        BitDepth: [, smithyClient.expectInt32, `bitDepth`],
        Channels: [, smithyClient.expectInt32, `channels`],
        Format: [, smithyClient.expectString, `format`],
        SampleRate: [, smithyClient.expectInt32, `sampleRate`],
    });
};
const de_WebvttDestinationSettings = (output, context) => {
    return smithyClient.take(output, {
        Accessibility: [, smithyClient.expectString, `accessibility`],
        StylePassthrough: [, smithyClient.expectString, `stylePassthrough`],
    });
};
const de_WebvttHlsSourceSettings = (output, context) => {
    return smithyClient.take(output, {
        RenditionGroupId: [, smithyClient.expectString, `renditionGroupId`],
        RenditionLanguageCode: [, smithyClient.expectString, `renditionLanguageCode`],
        RenditionName: [, smithyClient.expectString, `renditionName`],
    });
};
const de_Xavc4kIntraCbgProfileSettings = (output, context) => {
    return smithyClient.take(output, {
        XavcClass: [, smithyClient.expectString, `xavcClass`],
    });
};
const de_Xavc4kIntraVbrProfileSettings = (output, context) => {
    return smithyClient.take(output, {
        XavcClass: [, smithyClient.expectString, `xavcClass`],
    });
};
const de_Xavc4kProfileSettings = (output, context) => {
    return smithyClient.take(output, {
        BitrateClass: [, smithyClient.expectString, `bitrateClass`],
        CodecProfile: [, smithyClient.expectString, `codecProfile`],
        FlickerAdaptiveQuantization: [, smithyClient.expectString, `flickerAdaptiveQuantization`],
        GopBReference: [, smithyClient.expectString, `gopBReference`],
        GopClosedCadence: [, smithyClient.expectInt32, `gopClosedCadence`],
        HrdBufferSize: [, smithyClient.expectInt32, `hrdBufferSize`],
        QualityTuningLevel: [, smithyClient.expectString, `qualityTuningLevel`],
        Slices: [, smithyClient.expectInt32, `slices`],
    });
};
const de_XavcHdIntraCbgProfileSettings = (output, context) => {
    return smithyClient.take(output, {
        XavcClass: [, smithyClient.expectString, `xavcClass`],
    });
};
const de_XavcHdProfileSettings = (output, context) => {
    return smithyClient.take(output, {
        BitrateClass: [, smithyClient.expectString, `bitrateClass`],
        FlickerAdaptiveQuantization: [, smithyClient.expectString, `flickerAdaptiveQuantization`],
        GopBReference: [, smithyClient.expectString, `gopBReference`],
        GopClosedCadence: [, smithyClient.expectInt32, `gopClosedCadence`],
        HrdBufferSize: [, smithyClient.expectInt32, `hrdBufferSize`],
        InterlaceMode: [, smithyClient.expectString, `interlaceMode`],
        QualityTuningLevel: [, smithyClient.expectString, `qualityTuningLevel`],
        Slices: [, smithyClient.expectInt32, `slices`],
        Telecine: [, smithyClient.expectString, `telecine`],
    });
};
const de_XavcSettings = (output, context) => {
    return smithyClient.take(output, {
        AdaptiveQuantization: [, smithyClient.expectString, `adaptiveQuantization`],
        EntropyEncoding: [, smithyClient.expectString, `entropyEncoding`],
        FramerateControl: [, smithyClient.expectString, `framerateControl`],
        FramerateConversionAlgorithm: [, smithyClient.expectString, `framerateConversionAlgorithm`],
        FramerateDenominator: [, smithyClient.expectInt32, `framerateDenominator`],
        FramerateNumerator: [, smithyClient.expectInt32, `framerateNumerator`],
        PerFrameMetrics: [, smithyClient._json, `perFrameMetrics`],
        Profile: [, smithyClient.expectString, `profile`],
        SlowPal: [, smithyClient.expectString, `slowPal`],
        Softness: [, smithyClient.expectInt32, `softness`],
        SpatialAdaptiveQuantization: [, smithyClient.expectString, `spatialAdaptiveQuantization`],
        TemporalAdaptiveQuantization: [, smithyClient.expectString, `temporalAdaptiveQuantization`],
        Xavc4kIntraCbgProfileSettings: [
            ,
            (_) => de_Xavc4kIntraCbgProfileSettings(_),
            `xavc4kIntraCbgProfileSettings`,
        ],
        Xavc4kIntraVbrProfileSettings: [
            ,
            (_) => de_Xavc4kIntraVbrProfileSettings(_),
            `xavc4kIntraVbrProfileSettings`,
        ],
        Xavc4kProfileSettings: [, (_) => de_Xavc4kProfileSettings(_), `xavc4kProfileSettings`],
        XavcHdIntraCbgProfileSettings: [
            ,
            (_) => de_XavcHdIntraCbgProfileSettings(_),
            `xavcHdIntraCbgProfileSettings`,
        ],
        XavcHdProfileSettings: [, (_) => de_XavcHdProfileSettings(_), `xavcHdProfileSettings`],
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const _C = "Category";
const _IF = "InputFile";
const _LB = "ListBy";
const _MR = "MaxResults";
const _NT = "NextToken";
const _O = "Order";
const _Q = "Queue";
const _S = "Status";
const _c = "category";
const _iF = "inputFile";
const _lB = "listBy";
const _mR = "maxResults";
const _nT = "nextToken";
const _o = "order";
const _q = "queue";
const _s = "status";

class AssociateCertificateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "AssociateCertificate", {})
    .n("MediaConvertClient", "AssociateCertificateCommand")
    .f(void 0, void 0)
    .ser(se_AssociateCertificateCommand)
    .de(de_AssociateCertificateCommand)
    .build() {
}

class CancelJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "CancelJob", {})
    .n("MediaConvertClient", "CancelJobCommand")
    .f(void 0, void 0)
    .ser(se_CancelJobCommand)
    .de(de_CancelJobCommand)
    .build() {
}

class CreateJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "CreateJob", {})
    .n("MediaConvertClient", "CreateJobCommand")
    .f(void 0, void 0)
    .ser(se_CreateJobCommand)
    .de(de_CreateJobCommand)
    .build() {
}

class CreateJobTemplateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "CreateJobTemplate", {})
    .n("MediaConvertClient", "CreateJobTemplateCommand")
    .f(void 0, void 0)
    .ser(se_CreateJobTemplateCommand)
    .de(de_CreateJobTemplateCommand)
    .build() {
}

class CreatePresetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "CreatePreset", {})
    .n("MediaConvertClient", "CreatePresetCommand")
    .f(void 0, void 0)
    .ser(se_CreatePresetCommand)
    .de(de_CreatePresetCommand)
    .build() {
}

class CreateQueueCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "CreateQueue", {})
    .n("MediaConvertClient", "CreateQueueCommand")
    .f(void 0, void 0)
    .ser(se_CreateQueueCommand)
    .de(de_CreateQueueCommand)
    .build() {
}

class CreateResourceShareCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "CreateResourceShare", {})
    .n("MediaConvertClient", "CreateResourceShareCommand")
    .f(void 0, void 0)
    .ser(se_CreateResourceShareCommand)
    .de(de_CreateResourceShareCommand)
    .build() {
}

class DeleteJobTemplateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "DeleteJobTemplate", {})
    .n("MediaConvertClient", "DeleteJobTemplateCommand")
    .f(void 0, void 0)
    .ser(se_DeleteJobTemplateCommand)
    .de(de_DeleteJobTemplateCommand)
    .build() {
}

class DeletePolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "DeletePolicy", {})
    .n("MediaConvertClient", "DeletePolicyCommand")
    .f(void 0, void 0)
    .ser(se_DeletePolicyCommand)
    .de(de_DeletePolicyCommand)
    .build() {
}

class DeletePresetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "DeletePreset", {})
    .n("MediaConvertClient", "DeletePresetCommand")
    .f(void 0, void 0)
    .ser(se_DeletePresetCommand)
    .de(de_DeletePresetCommand)
    .build() {
}

class DeleteQueueCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "DeleteQueue", {})
    .n("MediaConvertClient", "DeleteQueueCommand")
    .f(void 0, void 0)
    .ser(se_DeleteQueueCommand)
    .de(de_DeleteQueueCommand)
    .build() {
}

class DescribeEndpointsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "DescribeEndpoints", {})
    .n("MediaConvertClient", "DescribeEndpointsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeEndpointsCommand)
    .de(de_DescribeEndpointsCommand)
    .build() {
}

class DisassociateCertificateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "DisassociateCertificate", {})
    .n("MediaConvertClient", "DisassociateCertificateCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateCertificateCommand)
    .de(de_DisassociateCertificateCommand)
    .build() {
}

class GetJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "GetJob", {})
    .n("MediaConvertClient", "GetJobCommand")
    .f(void 0, void 0)
    .ser(se_GetJobCommand)
    .de(de_GetJobCommand)
    .build() {
}

class GetJobsQueryResultsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "GetJobsQueryResults", {})
    .n("MediaConvertClient", "GetJobsQueryResultsCommand")
    .f(void 0, void 0)
    .ser(se_GetJobsQueryResultsCommand)
    .de(de_GetJobsQueryResultsCommand)
    .build() {
}

class GetJobTemplateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "GetJobTemplate", {})
    .n("MediaConvertClient", "GetJobTemplateCommand")
    .f(void 0, void 0)
    .ser(se_GetJobTemplateCommand)
    .de(de_GetJobTemplateCommand)
    .build() {
}

class GetPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "GetPolicy", {})
    .n("MediaConvertClient", "GetPolicyCommand")
    .f(void 0, void 0)
    .ser(se_GetPolicyCommand)
    .de(de_GetPolicyCommand)
    .build() {
}

class GetPresetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "GetPreset", {})
    .n("MediaConvertClient", "GetPresetCommand")
    .f(void 0, void 0)
    .ser(se_GetPresetCommand)
    .de(de_GetPresetCommand)
    .build() {
}

class GetQueueCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "GetQueue", {})
    .n("MediaConvertClient", "GetQueueCommand")
    .f(void 0, void 0)
    .ser(se_GetQueueCommand)
    .de(de_GetQueueCommand)
    .build() {
}

class ListJobsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "ListJobs", {})
    .n("MediaConvertClient", "ListJobsCommand")
    .f(void 0, void 0)
    .ser(se_ListJobsCommand)
    .de(de_ListJobsCommand)
    .build() {
}

class ListJobTemplatesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "ListJobTemplates", {})
    .n("MediaConvertClient", "ListJobTemplatesCommand")
    .f(void 0, void 0)
    .ser(se_ListJobTemplatesCommand)
    .de(de_ListJobTemplatesCommand)
    .build() {
}

class ListPresetsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "ListPresets", {})
    .n("MediaConvertClient", "ListPresetsCommand")
    .f(void 0, void 0)
    .ser(se_ListPresetsCommand)
    .de(de_ListPresetsCommand)
    .build() {
}

class ListQueuesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "ListQueues", {})
    .n("MediaConvertClient", "ListQueuesCommand")
    .f(void 0, void 0)
    .ser(se_ListQueuesCommand)
    .de(de_ListQueuesCommand)
    .build() {
}

class ListTagsForResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "ListTagsForResource", {})
    .n("MediaConvertClient", "ListTagsForResourceCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForResourceCommand)
    .de(de_ListTagsForResourceCommand)
    .build() {
}

class ListVersionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "ListVersions", {})
    .n("MediaConvertClient", "ListVersionsCommand")
    .f(void 0, void 0)
    .ser(se_ListVersionsCommand)
    .de(de_ListVersionsCommand)
    .build() {
}

class ProbeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "Probe", {})
    .n("MediaConvertClient", "ProbeCommand")
    .f(void 0, void 0)
    .ser(se_ProbeCommand)
    .de(de_ProbeCommand)
    .build() {
}

class PutPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "PutPolicy", {})
    .n("MediaConvertClient", "PutPolicyCommand")
    .f(void 0, void 0)
    .ser(se_PutPolicyCommand)
    .de(de_PutPolicyCommand)
    .build() {
}

class SearchJobsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "SearchJobs", {})
    .n("MediaConvertClient", "SearchJobsCommand")
    .f(void 0, void 0)
    .ser(se_SearchJobsCommand)
    .de(de_SearchJobsCommand)
    .build() {
}

class StartJobsQueryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "StartJobsQuery", {})
    .n("MediaConvertClient", "StartJobsQueryCommand")
    .f(void 0, void 0)
    .ser(se_StartJobsQueryCommand)
    .de(de_StartJobsQueryCommand)
    .build() {
}

class TagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "TagResource", {})
    .n("MediaConvertClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(se_TagResourceCommand)
    .de(de_TagResourceCommand)
    .build() {
}

class UntagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "UntagResource", {})
    .n("MediaConvertClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(se_UntagResourceCommand)
    .de(de_UntagResourceCommand)
    .build() {
}

class UpdateJobTemplateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "UpdateJobTemplate", {})
    .n("MediaConvertClient", "UpdateJobTemplateCommand")
    .f(void 0, void 0)
    .ser(se_UpdateJobTemplateCommand)
    .de(de_UpdateJobTemplateCommand)
    .build() {
}

class UpdatePresetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "UpdatePreset", {})
    .n("MediaConvertClient", "UpdatePresetCommand")
    .f(void 0, void 0)
    .ser(se_UpdatePresetCommand)
    .de(de_UpdatePresetCommand)
    .build() {
}

class UpdateQueueCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("MediaConvert", "UpdateQueue", {})
    .n("MediaConvertClient", "UpdateQueueCommand")
    .f(void 0, void 0)
    .ser(se_UpdateQueueCommand)
    .de(de_UpdateQueueCommand)
    .build() {
}

const commands = {
    AssociateCertificateCommand,
    CancelJobCommand,
    CreateJobCommand,
    CreateJobTemplateCommand,
    CreatePresetCommand,
    CreateQueueCommand,
    CreateResourceShareCommand,
    DeleteJobTemplateCommand,
    DeletePolicyCommand,
    DeletePresetCommand,
    DeleteQueueCommand,
    DescribeEndpointsCommand,
    DisassociateCertificateCommand,
    GetJobCommand,
    GetJobsQueryResultsCommand,
    GetJobTemplateCommand,
    GetPolicyCommand,
    GetPresetCommand,
    GetQueueCommand,
    ListJobsCommand,
    ListJobTemplatesCommand,
    ListPresetsCommand,
    ListQueuesCommand,
    ListTagsForResourceCommand,
    ListVersionsCommand,
    ProbeCommand,
    PutPolicyCommand,
    SearchJobsCommand,
    StartJobsQueryCommand,
    TagResourceCommand,
    UntagResourceCommand,
    UpdateJobTemplateCommand,
    UpdatePresetCommand,
    UpdateQueueCommand,
};
class MediaConvert extends MediaConvertClient {
}
smithyClient.createAggregatedClient(commands, MediaConvert);

const paginateDescribeEndpoints = core.createPaginator(MediaConvertClient, DescribeEndpointsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListJobTemplates = core.createPaginator(MediaConvertClient, ListJobTemplatesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListJobs = core.createPaginator(MediaConvertClient, ListJobsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListPresets = core.createPaginator(MediaConvertClient, ListPresetsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListQueues = core.createPaginator(MediaConvertClient, ListQueuesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListVersions = core.createPaginator(MediaConvertClient, ListVersionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateSearchJobs = core.createPaginator(MediaConvertClient, SearchJobsCommand, "NextToken", "NextToken", "MaxResults");

const RequiredFlag = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const AudioChannelTag = {
    C: "C",
    CS: "CS",
    HI: "HI",
    L: "L",
    LC: "LC",
    LFE: "LFE",
    LFE2: "LFE2",
    LS: "LS",
    LSD: "LSD",
    LT: "LT",
    LW: "LW",
    M: "M",
    NAR: "NAR",
    R: "R",
    RC: "RC",
    RS: "RS",
    RSD: "RSD",
    RSL: "RSL",
    RSR: "RSR",
    RT: "RT",
    RW: "RW",
    TBC: "TBC",
    TBL: "TBL",
    TBR: "TBR",
    TCS: "TCS",
    VHC: "VHC",
    VHL: "VHL",
    VHR: "VHR",
};
const AudioNormalizationAlgorithm = {
    ITU_BS_1770_1: "ITU_BS_1770_1",
    ITU_BS_1770_2: "ITU_BS_1770_2",
    ITU_BS_1770_3: "ITU_BS_1770_3",
    ITU_BS_1770_4: "ITU_BS_1770_4",
};
const AudioNormalizationAlgorithmControl = {
    CORRECT_AUDIO: "CORRECT_AUDIO",
    MEASURE_ONLY: "MEASURE_ONLY",
};
const AudioNormalizationLoudnessLogging = {
    DONT_LOG: "DONT_LOG",
    LOG: "LOG",
};
const AudioNormalizationPeakCalculation = {
    NONE: "NONE",
    TRUE_PEAK: "TRUE_PEAK",
};
const AudioTypeControl = {
    FOLLOW_INPUT: "FOLLOW_INPUT",
    USE_CONFIGURED: "USE_CONFIGURED",
};
const AacAudioDescriptionBroadcasterMix = {
    BROADCASTER_MIXED_AD: "BROADCASTER_MIXED_AD",
    NORMAL: "NORMAL",
};
const AacCodecProfile = {
    HEV1: "HEV1",
    HEV2: "HEV2",
    LC: "LC",
    XHE: "XHE",
};
const AacCodingMode = {
    AD_RECEIVER_MIX: "AD_RECEIVER_MIX",
    CODING_MODE_1_0: "CODING_MODE_1_0",
    CODING_MODE_1_1: "CODING_MODE_1_1",
    CODING_MODE_2_0: "CODING_MODE_2_0",
    CODING_MODE_5_1: "CODING_MODE_5_1",
};
const AacLoudnessMeasurementMode = {
    ANCHOR: "ANCHOR",
    PROGRAM: "PROGRAM",
};
const AacRateControlMode = {
    CBR: "CBR",
    VBR: "VBR",
};
const AacRawFormat = {
    LATM_LOAS: "LATM_LOAS",
    NONE: "NONE",
};
const AacSpecification = {
    MPEG2: "MPEG2",
    MPEG4: "MPEG4",
};
const AacVbrQuality = {
    HIGH: "HIGH",
    LOW: "LOW",
    MEDIUM_HIGH: "MEDIUM_HIGH",
    MEDIUM_LOW: "MEDIUM_LOW",
};
const Ac3BitstreamMode = {
    COMMENTARY: "COMMENTARY",
    COMPLETE_MAIN: "COMPLETE_MAIN",
    DIALOGUE: "DIALOGUE",
    EMERGENCY: "EMERGENCY",
    HEARING_IMPAIRED: "HEARING_IMPAIRED",
    MUSIC_AND_EFFECTS: "MUSIC_AND_EFFECTS",
    VISUALLY_IMPAIRED: "VISUALLY_IMPAIRED",
    VOICE_OVER: "VOICE_OVER",
};
const Ac3CodingMode = {
    CODING_MODE_1_0: "CODING_MODE_1_0",
    CODING_MODE_1_1: "CODING_MODE_1_1",
    CODING_MODE_2_0: "CODING_MODE_2_0",
    CODING_MODE_3_2_LFE: "CODING_MODE_3_2_LFE",
};
const Ac3DynamicRangeCompressionLine = {
    FILM_LIGHT: "FILM_LIGHT",
    FILM_STANDARD: "FILM_STANDARD",
    MUSIC_LIGHT: "MUSIC_LIGHT",
    MUSIC_STANDARD: "MUSIC_STANDARD",
    NONE: "NONE",
    SPEECH: "SPEECH",
};
const Ac3DynamicRangeCompressionProfile = {
    FILM_STANDARD: "FILM_STANDARD",
    NONE: "NONE",
};
const Ac3DynamicRangeCompressionRf = {
    FILM_LIGHT: "FILM_LIGHT",
    FILM_STANDARD: "FILM_STANDARD",
    MUSIC_LIGHT: "MUSIC_LIGHT",
    MUSIC_STANDARD: "MUSIC_STANDARD",
    NONE: "NONE",
    SPEECH: "SPEECH",
};
const Ac3LfeFilter = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const Ac3MetadataControl = {
    FOLLOW_INPUT: "FOLLOW_INPUT",
    USE_CONFIGURED: "USE_CONFIGURED",
};
const AudioCodec = {
    AAC: "AAC",
    AC3: "AC3",
    AIFF: "AIFF",
    EAC3: "EAC3",
    EAC3_ATMOS: "EAC3_ATMOS",
    FLAC: "FLAC",
    MP2: "MP2",
    MP3: "MP3",
    OPUS: "OPUS",
    PASSTHROUGH: "PASSTHROUGH",
    VORBIS: "VORBIS",
    WAV: "WAV",
};
const Eac3AtmosBitstreamMode = {
    COMPLETE_MAIN: "COMPLETE_MAIN",
};
const Eac3AtmosCodingMode = {
    CODING_MODE_5_1_4: "CODING_MODE_5_1_4",
    CODING_MODE_7_1_4: "CODING_MODE_7_1_4",
    CODING_MODE_9_1_6: "CODING_MODE_9_1_6",
    CODING_MODE_AUTO: "CODING_MODE_AUTO",
};
const Eac3AtmosDialogueIntelligence = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const Eac3AtmosDownmixControl = {
    INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
    SPECIFIED: "SPECIFIED",
};
const Eac3AtmosDynamicRangeCompressionLine = {
    FILM_LIGHT: "FILM_LIGHT",
    FILM_STANDARD: "FILM_STANDARD",
    MUSIC_LIGHT: "MUSIC_LIGHT",
    MUSIC_STANDARD: "MUSIC_STANDARD",
    NONE: "NONE",
    SPEECH: "SPEECH",
};
const Eac3AtmosDynamicRangeCompressionRf = {
    FILM_LIGHT: "FILM_LIGHT",
    FILM_STANDARD: "FILM_STANDARD",
    MUSIC_LIGHT: "MUSIC_LIGHT",
    MUSIC_STANDARD: "MUSIC_STANDARD",
    NONE: "NONE",
    SPEECH: "SPEECH",
};
const Eac3AtmosDynamicRangeControl = {
    INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
    SPECIFIED: "SPECIFIED",
};
const Eac3AtmosMeteringMode = {
    ITU_BS_1770_1: "ITU_BS_1770_1",
    ITU_BS_1770_2: "ITU_BS_1770_2",
    ITU_BS_1770_3: "ITU_BS_1770_3",
    ITU_BS_1770_4: "ITU_BS_1770_4",
    LEQ_A: "LEQ_A",
};
const Eac3AtmosStereoDownmix = {
    DPL2: "DPL2",
    NOT_INDICATED: "NOT_INDICATED",
    STEREO: "STEREO",
    SURROUND: "SURROUND",
};
const Eac3AtmosSurroundExMode = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
    NOT_INDICATED: "NOT_INDICATED",
};
const Eac3AttenuationControl = {
    ATTENUATE_3_DB: "ATTENUATE_3_DB",
    NONE: "NONE",
};
const Eac3BitstreamMode = {
    COMMENTARY: "COMMENTARY",
    COMPLETE_MAIN: "COMPLETE_MAIN",
    EMERGENCY: "EMERGENCY",
    HEARING_IMPAIRED: "HEARING_IMPAIRED",
    VISUALLY_IMPAIRED: "VISUALLY_IMPAIRED",
};
const Eac3CodingMode = {
    CODING_MODE_1_0: "CODING_MODE_1_0",
    CODING_MODE_2_0: "CODING_MODE_2_0",
    CODING_MODE_3_2: "CODING_MODE_3_2",
};
const Eac3DcFilter = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const Eac3DynamicRangeCompressionLine = {
    FILM_LIGHT: "FILM_LIGHT",
    FILM_STANDARD: "FILM_STANDARD",
    MUSIC_LIGHT: "MUSIC_LIGHT",
    MUSIC_STANDARD: "MUSIC_STANDARD",
    NONE: "NONE",
    SPEECH: "SPEECH",
};
const Eac3DynamicRangeCompressionRf = {
    FILM_LIGHT: "FILM_LIGHT",
    FILM_STANDARD: "FILM_STANDARD",
    MUSIC_LIGHT: "MUSIC_LIGHT",
    MUSIC_STANDARD: "MUSIC_STANDARD",
    NONE: "NONE",
    SPEECH: "SPEECH",
};
const Eac3LfeControl = {
    LFE: "LFE",
    NO_LFE: "NO_LFE",
};
const Eac3LfeFilter = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const Eac3MetadataControl = {
    FOLLOW_INPUT: "FOLLOW_INPUT",
    USE_CONFIGURED: "USE_CONFIGURED",
};
const Eac3PassthroughControl = {
    NO_PASSTHROUGH: "NO_PASSTHROUGH",
    WHEN_POSSIBLE: "WHEN_POSSIBLE",
};
const Eac3PhaseControl = {
    NO_SHIFT: "NO_SHIFT",
    SHIFT_90_DEGREES: "SHIFT_90_DEGREES",
};
const Eac3StereoDownmix = {
    DPL2: "DPL2",
    LO_RO: "LO_RO",
    LT_RT: "LT_RT",
    NOT_INDICATED: "NOT_INDICATED",
};
const Eac3SurroundExMode = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
    NOT_INDICATED: "NOT_INDICATED",
};
const Eac3SurroundMode = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
    NOT_INDICATED: "NOT_INDICATED",
};
const Mp2AudioDescriptionMix = {
    BROADCASTER_MIXED_AD: "BROADCASTER_MIXED_AD",
    NONE: "NONE",
};
const Mp3RateControlMode = {
    CBR: "CBR",
    VBR: "VBR",
};
const WavFormat = {
    EXTENSIBLE: "EXTENSIBLE",
    RF64: "RF64",
    RIFF: "RIFF",
};
const LanguageCode = {
    AAR: "AAR",
    ABK: "ABK",
    AFR: "AFR",
    AKA: "AKA",
    AMH: "AMH",
    ARA: "ARA",
    ARG: "ARG",
    ASM: "ASM",
    AVA: "AVA",
    AVE: "AVE",
    AYM: "AYM",
    AZE: "AZE",
    BAK: "BAK",
    BAM: "BAM",
    BEL: "BEL",
    BEN: "BEN",
    BIH: "BIH",
    BIS: "BIS",
    BOD: "BOD",
    BOS: "BOS",
    BRE: "BRE",
    BUL: "BUL",
    CAT: "CAT",
    CES: "CES",
    CHA: "CHA",
    CHE: "CHE",
    CHU: "CHU",
    CHV: "CHV",
    COR: "COR",
    COS: "COS",
    CRE: "CRE",
    CYM: "CYM",
    DAN: "DAN",
    DEU: "DEU",
    DIV: "DIV",
    DZO: "DZO",
    ELL: "ELL",
    ENG: "ENG",
    ENM: "ENM",
    EPO: "EPO",
    EST: "EST",
    EUS: "EUS",
    EWE: "EWE",
    FAO: "FAO",
    FAS: "FAS",
    FIJ: "FIJ",
    FIN: "FIN",
    FRA: "FRA",
    FRM: "FRM",
    FRY: "FRY",
    FUL: "FUL",
    GER: "GER",
    GLA: "GLA",
    GLE: "GLE",
    GLG: "GLG",
    GLV: "GLV",
    GRN: "GRN",
    GUJ: "GUJ",
    HAT: "HAT",
    HAU: "HAU",
    HEB: "HEB",
    HER: "HER",
    HIN: "HIN",
    HMO: "HMO",
    HRV: "HRV",
    HUN: "HUN",
    HYE: "HYE",
    IBO: "IBO",
    IDO: "IDO",
    III: "III",
    IKU: "IKU",
    ILE: "ILE",
    INA: "INA",
    IND: "IND",
    IPK: "IPK",
    ISL: "ISL",
    ITA: "ITA",
    JAV: "JAV",
    JPN: "JPN",
    KAL: "KAL",
    KAN: "KAN",
    KAS: "KAS",
    KAT: "KAT",
    KAU: "KAU",
    KAZ: "KAZ",
    KHM: "KHM",
    KIK: "KIK",
    KIN: "KIN",
    KIR: "KIR",
    KOM: "KOM",
    KON: "KON",
    KOR: "KOR",
    KUA: "KUA",
    KUR: "KUR",
    LAO: "LAO",
    LAT: "LAT",
    LAV: "LAV",
    LIM: "LIM",
    LIN: "LIN",
    LIT: "LIT",
    LTZ: "LTZ",
    LUB: "LUB",
    LUG: "LUG",
    MAH: "MAH",
    MAL: "MAL",
    MAR: "MAR",
    MKD: "MKD",
    MLG: "MLG",
    MLT: "MLT",
    MON: "MON",
    MRI: "MRI",
    MSA: "MSA",
    MYA: "MYA",
    NAU: "NAU",
    NAV: "NAV",
    NBL: "NBL",
    NDE: "NDE",
    NDO: "NDO",
    NEP: "NEP",
    NLD: "NLD",
    NNO: "NNO",
    NOB: "NOB",
    NOR: "NOR",
    NYA: "NYA",
    OCI: "OCI",
    OJI: "OJI",
    ORI: "ORI",
    ORJ: "ORJ",
    ORM: "ORM",
    OSS: "OSS",
    PAN: "PAN",
    PLI: "PLI",
    POL: "POL",
    POR: "POR",
    PUS: "PUS",
    QAA: "QAA",
    QPC: "QPC",
    QUE: "QUE",
    ROH: "ROH",
    RON: "RON",
    RUN: "RUN",
    RUS: "RUS",
    SAG: "SAG",
    SAN: "SAN",
    SIN: "SIN",
    SLK: "SLK",
    SLV: "SLV",
    SME: "SME",
    SMO: "SMO",
    SNA: "SNA",
    SND: "SND",
    SOM: "SOM",
    SOT: "SOT",
    SPA: "SPA",
    SQI: "SQI",
    SRB: "SRB",
    SRD: "SRD",
    SRP: "SRP",
    SSW: "SSW",
    SUN: "SUN",
    SWA: "SWA",
    SWE: "SWE",
    TAH: "TAH",
    TAM: "TAM",
    TAT: "TAT",
    TEL: "TEL",
    TGK: "TGK",
    TGL: "TGL",
    THA: "THA",
    TIR: "TIR",
    TNG: "TNG",
    TON: "TON",
    TSN: "TSN",
    TSO: "TSO",
    TUK: "TUK",
    TUR: "TUR",
    TWI: "TWI",
    UIG: "UIG",
    UKR: "UKR",
    URD: "URD",
    UZB: "UZB",
    VEN: "VEN",
    VIE: "VIE",
    VOL: "VOL",
    WLN: "WLN",
    WOL: "WOL",
    XHO: "XHO",
    YID: "YID",
    YOR: "YOR",
    ZHA: "ZHA",
    ZHO: "ZHO",
    ZUL: "ZUL",
};
const AudioLanguageCodeControl = {
    FOLLOW_INPUT: "FOLLOW_INPUT",
    USE_CONFIGURED: "USE_CONFIGURED",
};
const RuleType = {
    ALLOWED_RENDITIONS: "ALLOWED_RENDITIONS",
    FORCE_INCLUDE_RENDITIONS: "FORCE_INCLUDE_RENDITIONS",
    MIN_BOTTOM_RENDITION_SIZE: "MIN_BOTTOM_RENDITION_SIZE",
    MIN_TOP_RENDITION_SIZE: "MIN_TOP_RENDITION_SIZE",
};
const BurninSubtitleAlignment = {
    AUTO: "AUTO",
    CENTERED: "CENTERED",
    LEFT: "LEFT",
};
const BurninSubtitleApplyFontColor = {
    ALL_TEXT: "ALL_TEXT",
    WHITE_TEXT_ONLY: "WHITE_TEXT_ONLY",
};
const BurninSubtitleBackgroundColor = {
    AUTO: "AUTO",
    BLACK: "BLACK",
    NONE: "NONE",
    WHITE: "WHITE",
};
const BurninSubtitleFallbackFont = {
    BEST_MATCH: "BEST_MATCH",
    MONOSPACED_SANSSERIF: "MONOSPACED_SANSSERIF",
    MONOSPACED_SERIF: "MONOSPACED_SERIF",
    PROPORTIONAL_SANSSERIF: "PROPORTIONAL_SANSSERIF",
    PROPORTIONAL_SERIF: "PROPORTIONAL_SERIF",
};
const BurninSubtitleFontColor = {
    AUTO: "AUTO",
    BLACK: "BLACK",
    BLUE: "BLUE",
    GREEN: "GREEN",
    HEX: "HEX",
    RED: "RED",
    WHITE: "WHITE",
    YELLOW: "YELLOW",
};
const FontScript = {
    AUTOMATIC: "AUTOMATIC",
    HANS: "HANS",
    HANT: "HANT",
};
const BurninSubtitleOutlineColor = {
    AUTO: "AUTO",
    BLACK: "BLACK",
    BLUE: "BLUE",
    GREEN: "GREEN",
    RED: "RED",
    WHITE: "WHITE",
    YELLOW: "YELLOW",
};
const RemoveRubyReserveAttributes = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const BurninSubtitleShadowColor = {
    AUTO: "AUTO",
    BLACK: "BLACK",
    NONE: "NONE",
    WHITE: "WHITE",
};
const BurnInSubtitleStylePassthrough = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const BurninSubtitleTeletextSpacing = {
    AUTO: "AUTO",
    FIXED_GRID: "FIXED_GRID",
    PROPORTIONAL: "PROPORTIONAL",
};
const CaptionDestinationType = {
    BURN_IN: "BURN_IN",
    DVB_SUB: "DVB_SUB",
    EMBEDDED: "EMBEDDED",
    EMBEDDED_PLUS_SCTE20: "EMBEDDED_PLUS_SCTE20",
    IMSC: "IMSC",
    SCC: "SCC",
    SCTE20_PLUS_EMBEDDED: "SCTE20_PLUS_EMBEDDED",
    SMI: "SMI",
    SRT: "SRT",
    TELETEXT: "TELETEXT",
    TTML: "TTML",
    WEBVTT: "WEBVTT",
};
const DvbSubtitleAlignment = {
    AUTO: "AUTO",
    CENTERED: "CENTERED",
    LEFT: "LEFT",
};
const DvbSubtitleApplyFontColor = {
    ALL_TEXT: "ALL_TEXT",
    WHITE_TEXT_ONLY: "WHITE_TEXT_ONLY",
};
const DvbSubtitleBackgroundColor = {
    AUTO: "AUTO",
    BLACK: "BLACK",
    NONE: "NONE",
    WHITE: "WHITE",
};
const DvbddsHandling = {
    NONE: "NONE",
    NO_DISPLAY_WINDOW: "NO_DISPLAY_WINDOW",
    SPECIFIED: "SPECIFIED",
    SPECIFIED_OPTIMAL: "SPECIFIED_OPTIMAL",
};
const DvbSubSubtitleFallbackFont = {
    BEST_MATCH: "BEST_MATCH",
    MONOSPACED_SANSSERIF: "MONOSPACED_SANSSERIF",
    MONOSPACED_SERIF: "MONOSPACED_SERIF",
    PROPORTIONAL_SANSSERIF: "PROPORTIONAL_SANSSERIF",
    PROPORTIONAL_SERIF: "PROPORTIONAL_SERIF",
};
const DvbSubtitleFontColor = {
    AUTO: "AUTO",
    BLACK: "BLACK",
    BLUE: "BLUE",
    GREEN: "GREEN",
    HEX: "HEX",
    RED: "RED",
    WHITE: "WHITE",
    YELLOW: "YELLOW",
};
const DvbSubtitleOutlineColor = {
    AUTO: "AUTO",
    BLACK: "BLACK",
    BLUE: "BLUE",
    GREEN: "GREEN",
    RED: "RED",
    WHITE: "WHITE",
    YELLOW: "YELLOW",
};
const DvbSubtitleShadowColor = {
    AUTO: "AUTO",
    BLACK: "BLACK",
    NONE: "NONE",
    WHITE: "WHITE",
};
const DvbSubtitleStylePassthrough = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const DvbSubtitlingType = {
    HEARING_IMPAIRED: "HEARING_IMPAIRED",
    STANDARD: "STANDARD",
};
const DvbSubtitleTeletextSpacing = {
    AUTO: "AUTO",
    FIXED_GRID: "FIXED_GRID",
    PROPORTIONAL: "PROPORTIONAL",
};
const ImscAccessibilitySubs = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const ImscStylePassthrough = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const SccDestinationFramerate = {
    FRAMERATE_23_97: "FRAMERATE_23_97",
    FRAMERATE_24: "FRAMERATE_24",
    FRAMERATE_25: "FRAMERATE_25",
    FRAMERATE_29_97_DROPFRAME: "FRAMERATE_29_97_DROPFRAME",
    FRAMERATE_29_97_NON_DROPFRAME: "FRAMERATE_29_97_NON_DROPFRAME",
};
const SrtStylePassthrough = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const TeletextPageType = {
    PAGE_TYPE_ADDL_INFO: "PAGE_TYPE_ADDL_INFO",
    PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE: "PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE",
    PAGE_TYPE_INITIAL: "PAGE_TYPE_INITIAL",
    PAGE_TYPE_PROGRAM_SCHEDULE: "PAGE_TYPE_PROGRAM_SCHEDULE",
    PAGE_TYPE_SUBTITLE: "PAGE_TYPE_SUBTITLE",
};
const TtmlStylePassthrough = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const WebvttAccessibilitySubs = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const WebvttStylePassthrough = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
    MERGE: "MERGE",
    STRICT: "STRICT",
};
const ColorSpace = {
    FOLLOW: "FOLLOW",
    HDR10: "HDR10",
    HLG_2020: "HLG_2020",
    P3D65_HDR: "P3D65_HDR",
    P3D65_SDR: "P3D65_SDR",
    P3DCI: "P3DCI",
    REC_601: "REC_601",
    REC_709: "REC_709",
};
const FrameMetricType = {
    MS_SSIM: "MS_SSIM",
    PSNR: "PSNR",
    PSNR_HVS: "PSNR_HVS",
    QVBR: "QVBR",
    SHOT_CHANGE: "SHOT_CHANGE",
    SSIM: "SSIM",
    VMAF: "VMAF",
};
const HlsAdMarkers = {
    ELEMENTAL: "ELEMENTAL",
    ELEMENTAL_SCTE35: "ELEMENTAL_SCTE35",
};
const AdvancedInputFilter = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const AdvancedInputFilterAddTexture = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const AdvancedInputFilterSharpen = {
    HIGH: "HIGH",
    LOW: "LOW",
    OFF: "OFF",
};
const AudioDurationCorrection = {
    AUTO: "AUTO",
    DISABLED: "DISABLED",
    FORCE: "FORCE",
    FRAME: "FRAME",
    TRACK: "TRACK",
};
const AudioDefaultSelection = {
    DEFAULT: "DEFAULT",
    NOT_DEFAULT: "NOT_DEFAULT",
};
const AudioSelectorType = {
    ALL_PCM: "ALL_PCM",
    HLS_RENDITION_GROUP: "HLS_RENDITION_GROUP",
    LANGUAGE_CODE: "LANGUAGE_CODE",
    PID: "PID",
    TRACK: "TRACK",
};
const AncillaryConvert608To708 = {
    DISABLED: "DISABLED",
    UPCONVERT: "UPCONVERT",
};
const AncillaryTerminateCaptions = {
    DISABLED: "DISABLED",
    END_OF_INPUT: "END_OF_INPUT",
};
const EmbeddedConvert608To708 = {
    DISABLED: "DISABLED",
    UPCONVERT: "UPCONVERT",
};
const EmbeddedTerminateCaptions = {
    DISABLED: "DISABLED",
    END_OF_INPUT: "END_OF_INPUT",
};
const CaptionSourceByteRateLimit = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const FileSourceConvert608To708 = {
    DISABLED: "DISABLED",
    UPCONVERT: "UPCONVERT",
};
const CaptionSourceConvertPaintOnToPopOn = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const FileSourceTimeDeltaUnits = {
    MILLISECONDS: "MILLISECONDS",
    SECONDS: "SECONDS",
};
const CaptionSourceUpconvertSTLToTeletext = {
    DISABLED: "DISABLED",
    UPCONVERT: "UPCONVERT",
};
const CaptionSourceType = {
    ANCILLARY: "ANCILLARY",
    DVB_SUB: "DVB_SUB",
    EMBEDDED: "EMBEDDED",
    IMSC: "IMSC",
    NULL_SOURCE: "NULL_SOURCE",
    SCC: "SCC",
    SCTE20: "SCTE20",
    SMI: "SMI",
    SMPTE_TT: "SMPTE_TT",
    SRT: "SRT",
    STL: "STL",
    TELETEXT: "TELETEXT",
    TTML: "TTML",
    WEBVTT: "WEBVTT",
};
const InputDeblockFilter = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const DecryptionMode = {
    AES_CBC: "AES_CBC",
    AES_CTR: "AES_CTR",
    AES_GCM: "AES_GCM",
};
const InputDenoiseFilter = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const DynamicAudioSelectorType = {
    ALL_TRACKS: "ALL_TRACKS",
    LANGUAGE_CODE: "LANGUAGE_CODE",
};
const InputFilterEnable = {
    AUTO: "AUTO",
    DISABLE: "DISABLE",
    FORCE: "FORCE",
};
const InputScanType = {
    AUTO: "AUTO",
    PSF: "PSF",
};
const InputPsiControl = {
    IGNORE_PSI: "IGNORE_PSI",
    USE_PSI: "USE_PSI",
};
const TamsGapHandling = {
    FILL_WITH_BLACK: "FILL_WITH_BLACK",
    HOLD_LAST_FRAME: "HOLD_LAST_FRAME",
    SKIP_GAPS: "SKIP_GAPS",
};
const InputTimecodeSource = {
    EMBEDDED: "EMBEDDED",
    SPECIFIEDSTART: "SPECIFIEDSTART",
    ZEROBASED: "ZEROBASED",
};
const VideoOverlayUnit = {
    PERCENTAGE: "PERCENTAGE",
    PIXELS: "PIXELS",
};
const VideoOverlayPlayBackMode = {
    ONCE: "ONCE",
    REPEAT: "REPEAT",
};
const AlphaBehavior = {
    DISCARD: "DISCARD",
    REMAP_TO_LUMA: "REMAP_TO_LUMA",
};
const ColorSpaceUsage = {
    FALLBACK: "FALLBACK",
    FORCE: "FORCE",
};
const EmbeddedTimecodeOverride = {
    NONE: "NONE",
    USE_MDPM: "USE_MDPM",
};
const PadVideo = {
    BLACK: "BLACK",
    DISABLED: "DISABLED",
};
const InputRotate = {
    AUTO: "AUTO",
    DEGREES_180: "DEGREES_180",
    DEGREES_270: "DEGREES_270",
    DEGREES_90: "DEGREES_90",
    DEGREE_0: "DEGREE_0",
};
const InputSampleRange = {
    FOLLOW: "FOLLOW",
    FULL_RANGE: "FULL_RANGE",
    LIMITED_RANGE: "LIMITED_RANGE",
};
const VideoSelectorType = {
    AUTO: "AUTO",
    STREAM: "STREAM",
};
const AccelerationMode = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
    PREFERRED: "PREFERRED",
};
const AccelerationStatus = {
    ACCELERATED: "ACCELERATED",
    IN_PROGRESS: "IN_PROGRESS",
    NOT_ACCELERATED: "NOT_ACCELERATED",
    NOT_APPLICABLE: "NOT_APPLICABLE",
};
const BillingTagsSource = {
    JOB: "JOB",
    JOB_TEMPLATE: "JOB_TEMPLATE",
    PRESET: "PRESET",
    QUEUE: "QUEUE",
};
const JobPhase = {
    PROBING: "PROBING",
    TRANSCODING: "TRANSCODING",
    UPLOADING: "UPLOADING",
};
const CopyProtectionAction = {
    PASSTHROUGH: "PASSTHROUGH",
    STRIP: "STRIP",
};
const VchipAction = {
    PASSTHROUGH: "PASSTHROUGH",
    STRIP: "STRIP",
};
const MotionImageInsertionMode = {
    MOV: "MOV",
    PNG: "PNG",
};
const MotionImagePlayback = {
    ONCE: "ONCE",
    REPEAT: "REPEAT",
};
const NielsenActiveWatermarkProcessType = {
    CBET: "CBET",
    NAES2_AND_NW: "NAES2_AND_NW",
    NAES2_AND_NW_AND_CBET: "NAES2_AND_NW_AND_CBET",
};
const NielsenSourceWatermarkStatusType = {
    CLEAN: "CLEAN",
    WATERMARKED: "WATERMARKED",
};
const NielsenUniqueTicPerAudioTrackType = {
    RESERVE_UNIQUE_TICS_PER_TRACK: "RESERVE_UNIQUE_TICS_PER_TRACK",
    SAME_TICS_PER_TRACK: "SAME_TICS_PER_TRACK",
};
const CmafClientCache = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const CmafCodecSpecification = {
    RFC_4281: "RFC_4281",
    RFC_6381: "RFC_6381",
};
const DashManifestStyle = {
    BASIC: "BASIC",
    COMPACT: "COMPACT",
    DISTINCT: "DISTINCT",
};
const S3ObjectCannedAcl = {
    AUTHENTICATED_READ: "AUTHENTICATED_READ",
    BUCKET_OWNER_FULL_CONTROL: "BUCKET_OWNER_FULL_CONTROL",
    BUCKET_OWNER_READ: "BUCKET_OWNER_READ",
    PUBLIC_READ: "PUBLIC_READ",
};
const S3ServerSideEncryptionType = {
    SERVER_SIDE_ENCRYPTION_KMS: "SERVER_SIDE_ENCRYPTION_KMS",
    SERVER_SIDE_ENCRYPTION_S3: "SERVER_SIDE_ENCRYPTION_S3",
};
const S3StorageClass = {
    DEEP_ARCHIVE: "DEEP_ARCHIVE",
    GLACIER: "GLACIER",
    INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
    ONEZONE_IA: "ONEZONE_IA",
    REDUCED_REDUNDANCY: "REDUCED_REDUNDANCY",
    STANDARD: "STANDARD",
    STANDARD_IA: "STANDARD_IA",
};
const CmafEncryptionType = {
    AES_CTR: "AES_CTR",
    SAMPLE_AES: "SAMPLE_AES",
};
const CmafInitializationVectorInManifest = {
    EXCLUDE: "EXCLUDE",
    INCLUDE: "INCLUDE",
};
const PresetSpeke20Audio = {
    PRESET_AUDIO_1: "PRESET_AUDIO_1",
    PRESET_AUDIO_2: "PRESET_AUDIO_2",
    PRESET_AUDIO_3: "PRESET_AUDIO_3",
    SHARED: "SHARED",
    UNENCRYPTED: "UNENCRYPTED",
};
const PresetSpeke20Video = {
    PRESET_VIDEO_1: "PRESET_VIDEO_1",
    PRESET_VIDEO_2: "PRESET_VIDEO_2",
    PRESET_VIDEO_3: "PRESET_VIDEO_3",
    PRESET_VIDEO_4: "PRESET_VIDEO_4",
    PRESET_VIDEO_5: "PRESET_VIDEO_5",
    PRESET_VIDEO_6: "PRESET_VIDEO_6",
    PRESET_VIDEO_7: "PRESET_VIDEO_7",
    PRESET_VIDEO_8: "PRESET_VIDEO_8",
    SHARED: "SHARED",
    UNENCRYPTED: "UNENCRYPTED",
};
const CmafKeyProviderType = {
    SPEKE: "SPEKE",
    STATIC_KEY: "STATIC_KEY",
};
const CmafImageBasedTrickPlay = {
    ADVANCED: "ADVANCED",
    NONE: "NONE",
    THUMBNAIL: "THUMBNAIL",
    THUMBNAIL_AND_FULLFRAME: "THUMBNAIL_AND_FULLFRAME",
};
const CmafIntervalCadence = {
    FOLLOW_CUSTOM: "FOLLOW_CUSTOM",
    FOLLOW_IFRAME: "FOLLOW_IFRAME",
};
const CmafManifestCompression = {
    GZIP: "GZIP",
    NONE: "NONE",
};
const CmafManifestDurationFormat = {
    FLOATING_POINT: "FLOATING_POINT",
    INTEGER: "INTEGER",
};
const CmafMpdManifestBandwidthType = {
    AVERAGE: "AVERAGE",
    MAX: "MAX",
};
const CmafMpdProfile = {
    MAIN_PROFILE: "MAIN_PROFILE",
    ON_DEMAND_PROFILE: "ON_DEMAND_PROFILE",
};
const CmafPtsOffsetHandlingForBFrames = {
    MATCH_INITIAL_PTS: "MATCH_INITIAL_PTS",
    ZERO_BASED: "ZERO_BASED",
};
const CmafSegmentControl = {
    SEGMENTED_FILES: "SEGMENTED_FILES",
    SINGLE_FILE: "SINGLE_FILE",
};
const CmafSegmentLengthControl = {
    EXACT: "EXACT",
    GOP_MULTIPLE: "GOP_MULTIPLE",
    MATCH: "MATCH",
};
const CmafStreamInfResolution = {
    EXCLUDE: "EXCLUDE",
    INCLUDE: "INCLUDE",
};
const CmafTargetDurationCompatibilityMode = {
    LEGACY: "LEGACY",
    SPEC_COMPLIANT: "SPEC_COMPLIANT",
};
const CmafVideoCompositionOffsets = {
    SIGNED: "SIGNED",
    UNSIGNED: "UNSIGNED",
};
const CmafWriteDASHManifest = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const CmafWriteHLSManifest = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const CmafWriteSegmentTimelineInRepresentation = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const DashIsoGroupAudioChannelConfigSchemeIdUri = {
    DOLBY_CHANNEL_CONFIGURATION: "DOLBY_CHANNEL_CONFIGURATION",
    MPEG_CHANNEL_CONFIGURATION: "MPEG_CHANNEL_CONFIGURATION",
};
const DashIsoPlaybackDeviceCompatibility = {
    CENC_V1: "CENC_V1",
    UNENCRYPTED_SEI: "UNENCRYPTED_SEI",
};
const DashIsoHbbtvCompliance = {
    HBBTV_1_5: "HBBTV_1_5",
    NONE: "NONE",
};
const DashIsoImageBasedTrickPlay = {
    ADVANCED: "ADVANCED",
    NONE: "NONE",
    THUMBNAIL: "THUMBNAIL",
    THUMBNAIL_AND_FULLFRAME: "THUMBNAIL_AND_FULLFRAME",
};
const DashIsoIntervalCadence = {
    FOLLOW_CUSTOM: "FOLLOW_CUSTOM",
    FOLLOW_IFRAME: "FOLLOW_IFRAME",
};
const DashIsoMpdManifestBandwidthType = {
    AVERAGE: "AVERAGE",
    MAX: "MAX",
};
const DashIsoMpdProfile = {
    MAIN_PROFILE: "MAIN_PROFILE",
    ON_DEMAND_PROFILE: "ON_DEMAND_PROFILE",
};
const DashIsoPtsOffsetHandlingForBFrames = {
    MATCH_INITIAL_PTS: "MATCH_INITIAL_PTS",
    ZERO_BASED: "ZERO_BASED",
};
const DashIsoSegmentControl = {
    SEGMENTED_FILES: "SEGMENTED_FILES",
    SINGLE_FILE: "SINGLE_FILE",
};
const DashIsoSegmentLengthControl = {
    EXACT: "EXACT",
    GOP_MULTIPLE: "GOP_MULTIPLE",
    MATCH: "MATCH",
};
const DashIsoVideoCompositionOffsets = {
    SIGNED: "SIGNED",
    UNSIGNED: "UNSIGNED",
};
const DashIsoWriteSegmentTimelineInRepresentation = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const HlsAudioOnlyHeader = {
    EXCLUDE: "EXCLUDE",
    INCLUDE: "INCLUDE",
};
const HlsCaptionLanguageSetting = {
    INSERT: "INSERT",
    NONE: "NONE",
    OMIT: "OMIT",
};
const HlsCaptionSegmentLengthControl = {
    LARGE_SEGMENTS: "LARGE_SEGMENTS",
    MATCH_VIDEO: "MATCH_VIDEO",
};
const HlsClientCache = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const HlsCodecSpecification = {
    RFC_4281: "RFC_4281",
    RFC_6381: "RFC_6381",
};
const HlsDirectoryStructure = {
    SINGLE_DIRECTORY: "SINGLE_DIRECTORY",
    SUBDIRECTORY_PER_STREAM: "SUBDIRECTORY_PER_STREAM",
};
const HlsEncryptionType = {
    AES128: "AES128",
    SAMPLE_AES: "SAMPLE_AES",
};
const HlsInitializationVectorInManifest = {
    EXCLUDE: "EXCLUDE",
    INCLUDE: "INCLUDE",
};
const HlsOfflineEncrypted = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const HlsKeyProviderType = {
    SPEKE: "SPEKE",
    STATIC_KEY: "STATIC_KEY",
};
const HlsImageBasedTrickPlay = {
    ADVANCED: "ADVANCED",
    NONE: "NONE",
    THUMBNAIL: "THUMBNAIL",
    THUMBNAIL_AND_FULLFRAME: "THUMBNAIL_AND_FULLFRAME",
};
const HlsIntervalCadence = {
    FOLLOW_CUSTOM: "FOLLOW_CUSTOM",
    FOLLOW_IFRAME: "FOLLOW_IFRAME",
};
const HlsManifestCompression = {
    GZIP: "GZIP",
    NONE: "NONE",
};
const HlsManifestDurationFormat = {
    FLOATING_POINT: "FLOATING_POINT",
    INTEGER: "INTEGER",
};
const HlsOutputSelection = {
    MANIFESTS_AND_SEGMENTS: "MANIFESTS_AND_SEGMENTS",
    SEGMENTS_ONLY: "SEGMENTS_ONLY",
};
const HlsProgramDateTime = {
    EXCLUDE: "EXCLUDE",
    INCLUDE: "INCLUDE",
};
const HlsProgressiveWriteHlsManifest = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const HlsSegmentControl = {
    SEGMENTED_FILES: "SEGMENTED_FILES",
    SINGLE_FILE: "SINGLE_FILE",
};
const HlsSegmentLengthControl = {
    EXACT: "EXACT",
    GOP_MULTIPLE: "GOP_MULTIPLE",
    MATCH: "MATCH",
};

const HlsStreamInfResolution = {
    EXCLUDE: "EXCLUDE",
    INCLUDE: "INCLUDE",
};
const HlsTargetDurationCompatibilityMode = {
    LEGACY: "LEGACY",
    SPEC_COMPLIANT: "SPEC_COMPLIANT",
};
const HlsTimedMetadataId3Frame = {
    NONE: "NONE",
    PRIV: "PRIV",
    TDRL: "TDRL",
};
const MsSmoothAudioDeduplication = {
    COMBINE_DUPLICATE_STREAMS: "COMBINE_DUPLICATE_STREAMS",
    NONE: "NONE",
};
const MsSmoothFragmentLengthControl = {
    EXACT: "EXACT",
    GOP_MULTIPLE: "GOP_MULTIPLE",
};
const MsSmoothManifestEncoding = {
    UTF16: "UTF16",
    UTF8: "UTF8",
};
const OutputGroupType = {
    CMAF_GROUP_SETTINGS: "CMAF_GROUP_SETTINGS",
    DASH_ISO_GROUP_SETTINGS: "DASH_ISO_GROUP_SETTINGS",
    FILE_GROUP_SETTINGS: "FILE_GROUP_SETTINGS",
    HLS_GROUP_SETTINGS: "HLS_GROUP_SETTINGS",
    MS_SMOOTH_GROUP_SETTINGS: "MS_SMOOTH_GROUP_SETTINGS",
};
const CmfcAudioDuration = {
    DEFAULT_CODEC_DURATION: "DEFAULT_CODEC_DURATION",
    MATCH_VIDEO_DURATION: "MATCH_VIDEO_DURATION",
};
const CmfcAudioTrackType = {
    ALTERNATE_AUDIO_AUTO_SELECT: "ALTERNATE_AUDIO_AUTO_SELECT",
    ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT: "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT",
    ALTERNATE_AUDIO_NOT_AUTO_SELECT: "ALTERNATE_AUDIO_NOT_AUTO_SELECT",
    AUDIO_ONLY_VARIANT_STREAM: "AUDIO_ONLY_VARIANT_STREAM",
};
const CmfcDescriptiveVideoServiceFlag = {
    DONT_FLAG: "DONT_FLAG",
    FLAG: "FLAG",
};
const CmfcIFrameOnlyManifest = {
    EXCLUDE: "EXCLUDE",
    INCLUDE: "INCLUDE",
};
const CmfcKlvMetadata = {
    NONE: "NONE",
    PASSTHROUGH: "PASSTHROUGH",
};
const CmfcManifestMetadataSignaling = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const CmfcScte35Esam = {
    INSERT: "INSERT",
    NONE: "NONE",
};
const CmfcScte35Source = {
    NONE: "NONE",
    PASSTHROUGH: "PASSTHROUGH",
};
const CmfcTimedMetadata = {
    NONE: "NONE",
    PASSTHROUGH: "PASSTHROUGH",
};
const CmfcTimedMetadataBoxVersion = {
    VERSION_0: "VERSION_0",
    VERSION_1: "VERSION_1",
};
const ContainerType = {
    CMFC: "CMFC",
    F4V: "F4V",
    GIF: "GIF",
    ISMV: "ISMV",
    M2TS: "M2TS",
    M3U8: "M3U8",
    MOV: "MOV",
    MP4: "MP4",
    MPD: "MPD",
    MXF: "MXF",
    OGG: "OGG",
    RAW: "RAW",
    WEBM: "WEBM",
    Y4M: "Y4M",
};
const F4vMoovPlacement = {
    NORMAL: "NORMAL",
    PROGRESSIVE_DOWNLOAD: "PROGRESSIVE_DOWNLOAD",
};
const M2tsAudioBufferModel = {
    ATSC: "ATSC",
    DVB: "DVB",
};
const M2tsAudioDuration = {
    DEFAULT_CODEC_DURATION: "DEFAULT_CODEC_DURATION",
    MATCH_VIDEO_DURATION: "MATCH_VIDEO_DURATION",
};
const M2tsBufferModel = {
    MULTIPLEX: "MULTIPLEX",
    NONE: "NONE",
};
const M2tsDataPtsControl = {
    ALIGN_TO_VIDEO: "ALIGN_TO_VIDEO",
    AUTO: "AUTO",
};
const OutputSdt = {
    SDT_FOLLOW: "SDT_FOLLOW",
    SDT_FOLLOW_IF_PRESENT: "SDT_FOLLOW_IF_PRESENT",
    SDT_MANUAL: "SDT_MANUAL",
    SDT_NONE: "SDT_NONE",
};
const M2tsEbpAudioInterval = {
    VIDEO_AND_FIXED_INTERVALS: "VIDEO_AND_FIXED_INTERVALS",
    VIDEO_INTERVAL: "VIDEO_INTERVAL",
};
const M2tsEbpPlacement = {
    VIDEO_AND_AUDIO_PIDS: "VIDEO_AND_AUDIO_PIDS",
    VIDEO_PID: "VIDEO_PID",
};
const M2tsEsRateInPes = {
    EXCLUDE: "EXCLUDE",
    INCLUDE: "INCLUDE",
};
const M2tsForceTsVideoEbpOrder = {
    DEFAULT: "DEFAULT",
    FORCE: "FORCE",
};
const M2tsKlvMetadata = {
    NONE: "NONE",
    PASSTHROUGH: "PASSTHROUGH",
};
const M2tsNielsenId3 = {
    INSERT: "INSERT",
    NONE: "NONE",
};
const M2tsPcrControl = {
    CONFIGURED_PCR_PERIOD: "CONFIGURED_PCR_PERIOD",
    PCR_EVERY_PES_PACKET: "PCR_EVERY_PES_PACKET",
};
const M2tsPreventBufferUnderflow = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const TsPtsOffset = {
    AUTO: "AUTO",
    MILLISECONDS: "MILLISECONDS",
    SECONDS: "SECONDS",
};
const M2tsRateMode = {
    CBR: "CBR",
    VBR: "VBR",
};
const M2tsScte35Source = {
    NONE: "NONE",
    PASSTHROUGH: "PASSTHROUGH",
};
const M2tsSegmentationMarkers = {
    EBP: "EBP",
    EBP_LEGACY: "EBP_LEGACY",
    NONE: "NONE",
    PSI_SEGSTART: "PSI_SEGSTART",
    RAI_ADAPT: "RAI_ADAPT",
    RAI_SEGSTART: "RAI_SEGSTART",
};
const M2tsSegmentationStyle = {
    MAINTAIN_CADENCE: "MAINTAIN_CADENCE",
    RESET_CADENCE: "RESET_CADENCE",
};
const M3u8AudioDuration = {
    DEFAULT_CODEC_DURATION: "DEFAULT_CODEC_DURATION",
    MATCH_VIDEO_DURATION: "MATCH_VIDEO_DURATION",
};
const M3u8DataPtsControl = {
    ALIGN_TO_VIDEO: "ALIGN_TO_VIDEO",
    AUTO: "AUTO",
};
const M3u8NielsenId3 = {
    INSERT: "INSERT",
    NONE: "NONE",
};
const M3u8PcrControl = {
    CONFIGURED_PCR_PERIOD: "CONFIGURED_PCR_PERIOD",
    PCR_EVERY_PES_PACKET: "PCR_EVERY_PES_PACKET",
};
const M3u8Scte35Source = {
    NONE: "NONE",
    PASSTHROUGH: "PASSTHROUGH",
};
const TimedMetadata = {
    NONE: "NONE",
    PASSTHROUGH: "PASSTHROUGH",
};
const MovClapAtom = {
    EXCLUDE: "EXCLUDE",
    INCLUDE: "INCLUDE",
};
const MovCslgAtom = {
    EXCLUDE: "EXCLUDE",
    INCLUDE: "INCLUDE",
};
const MovMpeg2FourCCControl = {
    MPEG: "MPEG",
    XDCAM: "XDCAM",
};
const MovPaddingControl = {
    NONE: "NONE",
    OMNEON: "OMNEON",
};
const MovReference = {
    EXTERNAL: "EXTERNAL",
    SELF_CONTAINED: "SELF_CONTAINED",
};
const Mp4C2paManifest = {
    EXCLUDE: "EXCLUDE",
    INCLUDE: "INCLUDE",
};
const Mp4CslgAtom = {
    EXCLUDE: "EXCLUDE",
    INCLUDE: "INCLUDE",
};
const Mp4FreeSpaceBox = {
    EXCLUDE: "EXCLUDE",
    INCLUDE: "INCLUDE",
};
const Mp4MoovPlacement = {
    NORMAL: "NORMAL",
    PROGRESSIVE_DOWNLOAD: "PROGRESSIVE_DOWNLOAD",
};
const MpdAccessibilityCaptionHints = {
    EXCLUDE: "EXCLUDE",
    INCLUDE: "INCLUDE",
};
const MpdAudioDuration = {
    DEFAULT_CODEC_DURATION: "DEFAULT_CODEC_DURATION",
    MATCH_VIDEO_DURATION: "MATCH_VIDEO_DURATION",
};
const MpdCaptionContainerType = {
    FRAGMENTED_MP4: "FRAGMENTED_MP4",
    RAW: "RAW",
};
const MpdKlvMetadata = {
    NONE: "NONE",
    PASSTHROUGH: "PASSTHROUGH",
};
const MpdManifestMetadataSignaling = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const MpdScte35Esam = {
    INSERT: "INSERT",
    NONE: "NONE",
};
const MpdScte35Source = {
    NONE: "NONE",
    PASSTHROUGH: "PASSTHROUGH",
};
const MpdTimedMetadata = {
    NONE: "NONE",
    PASSTHROUGH: "PASSTHROUGH",
};
const MpdTimedMetadataBoxVersion = {
    VERSION_0: "VERSION_0",
    VERSION_1: "VERSION_1",
};
const MxfAfdSignaling = {
    COPY_FROM_VIDEO: "COPY_FROM_VIDEO",
    NO_COPY: "NO_COPY",
};
const MxfProfile = {
    D_10: "D_10",
    OP1A: "OP1A",
    XAVC: "XAVC",
    XDCAM: "XDCAM",
    XDCAM_RDD9: "XDCAM_RDD9",
};
const MxfXavcDurationMode = {
    ALLOW_ANY_DURATION: "ALLOW_ANY_DURATION",
    DROP_FRAMES_FOR_COMPLIANCE: "DROP_FRAMES_FOR_COMPLIANCE",
};
const HlsAudioOnlyContainer = {
    AUTOMATIC: "AUTOMATIC",
    M2TS: "M2TS",
};
const HlsAudioTrackType = {
    ALTERNATE_AUDIO_AUTO_SELECT: "ALTERNATE_AUDIO_AUTO_SELECT",
    ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT: "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT",
    ALTERNATE_AUDIO_NOT_AUTO_SELECT: "ALTERNATE_AUDIO_NOT_AUTO_SELECT",
    AUDIO_ONLY_VARIANT_STREAM: "AUDIO_ONLY_VARIANT_STREAM",
};
const HlsDescriptiveVideoServiceFlag = {
    DONT_FLAG: "DONT_FLAG",
    FLAG: "FLAG",
};
const HlsIFrameOnlyManifest = {
    EXCLUDE: "EXCLUDE",
    INCLUDE: "INCLUDE",
    INCLUDE_AS_TS: "INCLUDE_AS_TS",
};
const AfdSignaling = {
    AUTO: "AUTO",
    FIXED: "FIXED",
    NONE: "NONE",
};
const AntiAlias = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const ChromaPositionMode = {
    AUTO: "AUTO",
    FORCE_CENTER: "FORCE_CENTER",
    FORCE_TOP_LEFT: "FORCE_TOP_LEFT",
};
const Av1AdaptiveQuantization = {
    HIGH: "HIGH",
    HIGHER: "HIGHER",
    LOW: "LOW",
    MAX: "MAX",
    MEDIUM: "MEDIUM",
    OFF: "OFF",
};
const Av1BitDepth = {
    BIT_10: "BIT_10",
    BIT_8: "BIT_8",
};
const Av1FilmGrainSynthesis = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const Av1FramerateControl = {
    INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
    SPECIFIED: "SPECIFIED",
};
const Av1FramerateConversionAlgorithm = {
    DUPLICATE_DROP: "DUPLICATE_DROP",
    FRAMEFORMER: "FRAMEFORMER",
    INTERPOLATE: "INTERPOLATE",
    MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT",
};
const Av1RateControlMode = {
    QVBR: "QVBR",
};
const Av1SpatialAdaptiveQuantization = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const AvcIntraClass = {
    CLASS_100: "CLASS_100",
    CLASS_200: "CLASS_200",
    CLASS_4K_2K: "CLASS_4K_2K",
    CLASS_50: "CLASS_50",
};
const AvcIntraUhdQualityTuningLevel = {
    MULTI_PASS: "MULTI_PASS",
    SINGLE_PASS: "SINGLE_PASS",
};
const AvcIntraFramerateControl = {
    INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
    SPECIFIED: "SPECIFIED",
};
const AvcIntraFramerateConversionAlgorithm = {
    DUPLICATE_DROP: "DUPLICATE_DROP",
    FRAMEFORMER: "FRAMEFORMER",
    INTERPOLATE: "INTERPOLATE",
    MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT",
};
const AvcIntraInterlaceMode = {
    BOTTOM_FIELD: "BOTTOM_FIELD",
    FOLLOW_BOTTOM_FIELD: "FOLLOW_BOTTOM_FIELD",
    FOLLOW_TOP_FIELD: "FOLLOW_TOP_FIELD",
    PROGRESSIVE: "PROGRESSIVE",
    TOP_FIELD: "TOP_FIELD",
};
const AvcIntraScanTypeConversionMode = {
    INTERLACED: "INTERLACED",
    INTERLACED_OPTIMIZE: "INTERLACED_OPTIMIZE",
};
const AvcIntraSlowPal = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const AvcIntraTelecine = {
    HARD: "HARD",
    NONE: "NONE",
};
const VideoCodec = {
    AV1: "AV1",
    AVC_INTRA: "AVC_INTRA",
    FRAME_CAPTURE: "FRAME_CAPTURE",
    GIF: "GIF",
    H_264: "H_264",
    H_265: "H_265",
    MPEG2: "MPEG2",
    PASSTHROUGH: "PASSTHROUGH",
    PRORES: "PRORES",
    UNCOMPRESSED: "UNCOMPRESSED",
    VC3: "VC3",
    VP8: "VP8",
    VP9: "VP9",
    XAVC: "XAVC",
};
const GifFramerateControl = {
    INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
    SPECIFIED: "SPECIFIED",
};
const GifFramerateConversionAlgorithm = {
    DUPLICATE_DROP: "DUPLICATE_DROP",
    INTERPOLATE: "INTERPOLATE",
};
const H264AdaptiveQuantization = {
    AUTO: "AUTO",
    HIGH: "HIGH",
    HIGHER: "HIGHER",
    LOW: "LOW",
    MAX: "MAX",
    MEDIUM: "MEDIUM",
    OFF: "OFF",
};
const BandwidthReductionFilterSharpening = {
    HIGH: "HIGH",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
    OFF: "OFF",
};
const BandwidthReductionFilterStrength = {
    AUTO: "AUTO",
    HIGH: "HIGH",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
    OFF: "OFF",
};
const H264CodecLevel = {
    AUTO: "AUTO",
    LEVEL_1: "LEVEL_1",
    LEVEL_1_1: "LEVEL_1_1",
    LEVEL_1_2: "LEVEL_1_2",
    LEVEL_1_3: "LEVEL_1_3",
    LEVEL_2: "LEVEL_2",
    LEVEL_2_1: "LEVEL_2_1",
    LEVEL_2_2: "LEVEL_2_2",
    LEVEL_3: "LEVEL_3",
    LEVEL_3_1: "LEVEL_3_1",
    LEVEL_3_2: "LEVEL_3_2",
    LEVEL_4: "LEVEL_4",
    LEVEL_4_1: "LEVEL_4_1",
    LEVEL_4_2: "LEVEL_4_2",
    LEVEL_5: "LEVEL_5",
    LEVEL_5_1: "LEVEL_5_1",
    LEVEL_5_2: "LEVEL_5_2",
};
const H264CodecProfile = {
    BASELINE: "BASELINE",
    HIGH: "HIGH",
    HIGH_10BIT: "HIGH_10BIT",
    HIGH_422: "HIGH_422",
    HIGH_422_10BIT: "HIGH_422_10BIT",
    MAIN: "MAIN",
};
const H264DynamicSubGop = {
    ADAPTIVE: "ADAPTIVE",
    STATIC: "STATIC",
};
const H264EndOfStreamMarkers = {
    INCLUDE: "INCLUDE",
    SUPPRESS: "SUPPRESS",
};
const H264EntropyEncoding = {
    CABAC: "CABAC",
    CAVLC: "CAVLC",
};
const H264FieldEncoding = {
    FORCE_FIELD: "FORCE_FIELD",
    MBAFF: "MBAFF",
    PAFF: "PAFF",
};
const H264FlickerAdaptiveQuantization = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const H264FramerateControl = {
    INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
    SPECIFIED: "SPECIFIED",
};
const H264FramerateConversionAlgorithm = {
    DUPLICATE_DROP: "DUPLICATE_DROP",
    FRAMEFORMER: "FRAMEFORMER",
    INTERPOLATE: "INTERPOLATE",
    MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT",
};
const H264GopBReference = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const H264GopSizeUnits = {
    AUTO: "AUTO",
    FRAMES: "FRAMES",
    SECONDS: "SECONDS",
};
const H264InterlaceMode = {
    BOTTOM_FIELD: "BOTTOM_FIELD",
    FOLLOW_BOTTOM_FIELD: "FOLLOW_BOTTOM_FIELD",
    FOLLOW_TOP_FIELD: "FOLLOW_TOP_FIELD",
    PROGRESSIVE: "PROGRESSIVE",
    TOP_FIELD: "TOP_FIELD",
};
const H264ParControl = {
    INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
    SPECIFIED: "SPECIFIED",
};
const H264QualityTuningLevel = {
    MULTI_PASS_HQ: "MULTI_PASS_HQ",
    SINGLE_PASS: "SINGLE_PASS",
    SINGLE_PASS_HQ: "SINGLE_PASS_HQ",
};
const H264RateControlMode = {
    CBR: "CBR",
    QVBR: "QVBR",
    VBR: "VBR",
};
const H264RepeatPps = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const H264SaliencyAwareEncoding = {
    DISABLED: "DISABLED",
    PREFERRED: "PREFERRED",
};
const H264ScanTypeConversionMode = {
    INTERLACED: "INTERLACED",
    INTERLACED_OPTIMIZE: "INTERLACED_OPTIMIZE",
};
const H264SceneChangeDetect = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
    TRANSITION_DETECTION: "TRANSITION_DETECTION",
};
const H264SlowPal = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const H264SpatialAdaptiveQuantization = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const H264Syntax = {
    DEFAULT: "DEFAULT",
    RP2027: "RP2027",
};
const H264Telecine = {
    HARD: "HARD",
    NONE: "NONE",
    SOFT: "SOFT",
};
const H264TemporalAdaptiveQuantization = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const H264UnregisteredSeiTimecode = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const H264WriteMp4PackagingType = {
    AVC1: "AVC1",
    AVC3: "AVC3",
};
const H265AdaptiveQuantization = {
    AUTO: "AUTO",
    HIGH: "HIGH",
    HIGHER: "HIGHER",
    LOW: "LOW",
    MAX: "MAX",
    MEDIUM: "MEDIUM",
    OFF: "OFF",
};
const H265AlternateTransferFunctionSei = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const H265CodecLevel = {
    AUTO: "AUTO",
    LEVEL_1: "LEVEL_1",
    LEVEL_2: "LEVEL_2",
    LEVEL_2_1: "LEVEL_2_1",
    LEVEL_3: "LEVEL_3",
    LEVEL_3_1: "LEVEL_3_1",
    LEVEL_4: "LEVEL_4",
    LEVEL_4_1: "LEVEL_4_1",
    LEVEL_5: "LEVEL_5",
    LEVEL_5_1: "LEVEL_5_1",
    LEVEL_5_2: "LEVEL_5_2",
    LEVEL_6: "LEVEL_6",
    LEVEL_6_1: "LEVEL_6_1",
    LEVEL_6_2: "LEVEL_6_2",
};
const H265CodecProfile = {
    MAIN10_HIGH: "MAIN10_HIGH",
    MAIN10_MAIN: "MAIN10_MAIN",
    MAIN_422_10BIT_HIGH: "MAIN_422_10BIT_HIGH",
    MAIN_422_10BIT_MAIN: "MAIN_422_10BIT_MAIN",
    MAIN_422_8BIT_HIGH: "MAIN_422_8BIT_HIGH",
    MAIN_422_8BIT_MAIN: "MAIN_422_8BIT_MAIN",
    MAIN_HIGH: "MAIN_HIGH",
    MAIN_MAIN: "MAIN_MAIN",
};
const H265Deblocking = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const H265DynamicSubGop = {
    ADAPTIVE: "ADAPTIVE",
    STATIC: "STATIC",
};
const H265EndOfStreamMarkers = {
    INCLUDE: "INCLUDE",
    SUPPRESS: "SUPPRESS",
};
const H265FlickerAdaptiveQuantization = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const H265FramerateControl = {
    INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
    SPECIFIED: "SPECIFIED",
};
const H265FramerateConversionAlgorithm = {
    DUPLICATE_DROP: "DUPLICATE_DROP",
    FRAMEFORMER: "FRAMEFORMER",
    INTERPOLATE: "INTERPOLATE",
    MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT",
};
const H265GopBReference = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const H265GopSizeUnits = {
    AUTO: "AUTO",
    FRAMES: "FRAMES",
    SECONDS: "SECONDS",
};
const H265InterlaceMode = {
    BOTTOM_FIELD: "BOTTOM_FIELD",
    FOLLOW_BOTTOM_FIELD: "FOLLOW_BOTTOM_FIELD",
    FOLLOW_TOP_FIELD: "FOLLOW_TOP_FIELD",
    PROGRESSIVE: "PROGRESSIVE",
    TOP_FIELD: "TOP_FIELD",
};
const H265ParControl = {
    INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
    SPECIFIED: "SPECIFIED",
};
const H265QualityTuningLevel = {
    MULTI_PASS_HQ: "MULTI_PASS_HQ",
    SINGLE_PASS: "SINGLE_PASS",
    SINGLE_PASS_HQ: "SINGLE_PASS_HQ",
};
const H265RateControlMode = {
    CBR: "CBR",
    QVBR: "QVBR",
    VBR: "VBR",
};
const H265SampleAdaptiveOffsetFilterMode = {
    ADAPTIVE: "ADAPTIVE",
    DEFAULT: "DEFAULT",
    OFF: "OFF",
};
const H265ScanTypeConversionMode = {
    INTERLACED: "INTERLACED",
    INTERLACED_OPTIMIZE: "INTERLACED_OPTIMIZE",
};
const H265SceneChangeDetect = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
    TRANSITION_DETECTION: "TRANSITION_DETECTION",
};
const H265SlowPal = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const H265SpatialAdaptiveQuantization = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const H265Telecine = {
    HARD: "HARD",
    NONE: "NONE",
    SOFT: "SOFT",
};
const H265TemporalAdaptiveQuantization = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const H265TemporalIds = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const H265Tiles = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const H265UnregisteredSeiTimecode = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const H265WriteMp4PackagingType = {
    HEV1: "HEV1",
    HVC1: "HVC1",
};
const Mpeg2AdaptiveQuantization = {
    HIGH: "HIGH",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
    OFF: "OFF",
};
const Mpeg2CodecLevel = {
    AUTO: "AUTO",
    HIGH: "HIGH",
    HIGH1440: "HIGH1440",
    LOW: "LOW",
    MAIN: "MAIN",
};
const Mpeg2CodecProfile = {
    MAIN: "MAIN",
    PROFILE_422: "PROFILE_422",
};
const Mpeg2DynamicSubGop = {
    ADAPTIVE: "ADAPTIVE",
    STATIC: "STATIC",
};
const Mpeg2FramerateControl = {
    INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
    SPECIFIED: "SPECIFIED",
};
const Mpeg2FramerateConversionAlgorithm = {
    DUPLICATE_DROP: "DUPLICATE_DROP",
    FRAMEFORMER: "FRAMEFORMER",
    INTERPOLATE: "INTERPOLATE",
    MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT",
};
const Mpeg2GopSizeUnits = {
    FRAMES: "FRAMES",
    SECONDS: "SECONDS",
};
const Mpeg2InterlaceMode = {
    BOTTOM_FIELD: "BOTTOM_FIELD",
    FOLLOW_BOTTOM_FIELD: "FOLLOW_BOTTOM_FIELD",
    FOLLOW_TOP_FIELD: "FOLLOW_TOP_FIELD",
    PROGRESSIVE: "PROGRESSIVE",
    TOP_FIELD: "TOP_FIELD",
};
const Mpeg2IntraDcPrecision = {
    AUTO: "AUTO",
    INTRA_DC_PRECISION_10: "INTRA_DC_PRECISION_10",
    INTRA_DC_PRECISION_11: "INTRA_DC_PRECISION_11",
    INTRA_DC_PRECISION_8: "INTRA_DC_PRECISION_8",
    INTRA_DC_PRECISION_9: "INTRA_DC_PRECISION_9",
};
const Mpeg2ParControl = {
    INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
    SPECIFIED: "SPECIFIED",
};
const Mpeg2QualityTuningLevel = {
    MULTI_PASS: "MULTI_PASS",
    SINGLE_PASS: "SINGLE_PASS",
};
const Mpeg2RateControlMode = {
    CBR: "CBR",
    VBR: "VBR",
};
const Mpeg2ScanTypeConversionMode = {
    INTERLACED: "INTERLACED",
    INTERLACED_OPTIMIZE: "INTERLACED_OPTIMIZE",
};
const Mpeg2SceneChangeDetect = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const Mpeg2SlowPal = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const Mpeg2SpatialAdaptiveQuantization = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const Mpeg2Syntax = {
    DEFAULT: "DEFAULT",
    D_10: "D_10",
};
const Mpeg2Telecine = {
    HARD: "HARD",
    NONE: "NONE",
    SOFT: "SOFT",
};
const Mpeg2TemporalAdaptiveQuantization = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const ProresChromaSampling = {
    PRESERVE_444_SAMPLING: "PRESERVE_444_SAMPLING",
    SUBSAMPLE_TO_422: "SUBSAMPLE_TO_422",
};
const ProresCodecProfile = {
    APPLE_PRORES_422: "APPLE_PRORES_422",
    APPLE_PRORES_422_HQ: "APPLE_PRORES_422_HQ",
    APPLE_PRORES_422_LT: "APPLE_PRORES_422_LT",
    APPLE_PRORES_422_PROXY: "APPLE_PRORES_422_PROXY",
    APPLE_PRORES_4444: "APPLE_PRORES_4444",
    APPLE_PRORES_4444_XQ: "APPLE_PRORES_4444_XQ",
};
const ProresFramerateControl = {
    INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
    SPECIFIED: "SPECIFIED",
};
const ProresFramerateConversionAlgorithm = {
    DUPLICATE_DROP: "DUPLICATE_DROP",
    FRAMEFORMER: "FRAMEFORMER",
    INTERPOLATE: "INTERPOLATE",
    MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT",
};
const ProresInterlaceMode = {
    BOTTOM_FIELD: "BOTTOM_FIELD",
    FOLLOW_BOTTOM_FIELD: "FOLLOW_BOTTOM_FIELD",
    FOLLOW_TOP_FIELD: "FOLLOW_TOP_FIELD",
    PROGRESSIVE: "PROGRESSIVE",
    TOP_FIELD: "TOP_FIELD",
};
const ProresParControl = {
    INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
    SPECIFIED: "SPECIFIED",
};
const ProresScanTypeConversionMode = {
    INTERLACED: "INTERLACED",
    INTERLACED_OPTIMIZE: "INTERLACED_OPTIMIZE",
};
const ProresSlowPal = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const ProresTelecine = {
    HARD: "HARD",
    NONE: "NONE",
};
const UncompressedFourcc = {
    I420: "I420",
    I422: "I422",
    I444: "I444",
};
const UncompressedFramerateControl = {
    INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
    SPECIFIED: "SPECIFIED",
};
const UncompressedFramerateConversionAlgorithm = {
    DUPLICATE_DROP: "DUPLICATE_DROP",
    FRAMEFORMER: "FRAMEFORMER",
    INTERPOLATE: "INTERPOLATE",
    MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT",
};
const UncompressedInterlaceMode = {
    INTERLACED: "INTERLACED",
    PROGRESSIVE: "PROGRESSIVE",
};
const UncompressedScanTypeConversionMode = {
    INTERLACED: "INTERLACED",
    INTERLACED_OPTIMIZE: "INTERLACED_OPTIMIZE",
};
const UncompressedSlowPal = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const UncompressedTelecine = {
    HARD: "HARD",
    NONE: "NONE",
};
const Vc3FramerateControl = {
    INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
    SPECIFIED: "SPECIFIED",
};
const Vc3FramerateConversionAlgorithm = {
    DUPLICATE_DROP: "DUPLICATE_DROP",
    FRAMEFORMER: "FRAMEFORMER",
    INTERPOLATE: "INTERPOLATE",
    MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT",
};
const Vc3InterlaceMode = {
    INTERLACED: "INTERLACED",
    PROGRESSIVE: "PROGRESSIVE",
};
const Vc3ScanTypeConversionMode = {
    INTERLACED: "INTERLACED",
    INTERLACED_OPTIMIZE: "INTERLACED_OPTIMIZE",
};
const Vc3SlowPal = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const Vc3Telecine = {
    HARD: "HARD",
    NONE: "NONE",
};
const Vc3Class = {
    CLASS_145_8BIT: "CLASS_145_8BIT",
    CLASS_220_10BIT: "CLASS_220_10BIT",
    CLASS_220_8BIT: "CLASS_220_8BIT",
};
const Vp8FramerateControl = {
    INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
    SPECIFIED: "SPECIFIED",
};
const Vp8FramerateConversionAlgorithm = {
    DUPLICATE_DROP: "DUPLICATE_DROP",
    FRAMEFORMER: "FRAMEFORMER",
    INTERPOLATE: "INTERPOLATE",
    MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT",
};
const Vp8ParControl = {
    INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
    SPECIFIED: "SPECIFIED",
};
const Vp8QualityTuningLevel = {
    MULTI_PASS: "MULTI_PASS",
    MULTI_PASS_HQ: "MULTI_PASS_HQ",
};
const Vp8RateControlMode = {
    VBR: "VBR",
};
const Vp9FramerateControl = {
    INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
    SPECIFIED: "SPECIFIED",
};
const Vp9FramerateConversionAlgorithm = {
    DUPLICATE_DROP: "DUPLICATE_DROP",
    FRAMEFORMER: "FRAMEFORMER",
    INTERPOLATE: "INTERPOLATE",
    MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT",
};
const Vp9ParControl = {
    INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
    SPECIFIED: "SPECIFIED",
};
const Vp9QualityTuningLevel = {
    MULTI_PASS: "MULTI_PASS",
    MULTI_PASS_HQ: "MULTI_PASS_HQ",
};
const Vp9RateControlMode = {
    VBR: "VBR",
};
const XavcAdaptiveQuantization = {
    AUTO: "AUTO",
    HIGH: "HIGH",
    HIGHER: "HIGHER",
    LOW: "LOW",
    MAX: "MAX",
    MEDIUM: "MEDIUM",
    OFF: "OFF",
};
const XavcEntropyEncoding = {
    AUTO: "AUTO",
    CABAC: "CABAC",
    CAVLC: "CAVLC",
};
const XavcFramerateControl = {
    INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
    SPECIFIED: "SPECIFIED",
};
const XavcFramerateConversionAlgorithm = {
    DUPLICATE_DROP: "DUPLICATE_DROP",
    FRAMEFORMER: "FRAMEFORMER",
    INTERPOLATE: "INTERPOLATE",
    MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT",
};
const XavcProfile = {
    XAVC_4K: "XAVC_4K",
    XAVC_4K_INTRA_CBG: "XAVC_4K_INTRA_CBG",
    XAVC_4K_INTRA_VBR: "XAVC_4K_INTRA_VBR",
    XAVC_HD: "XAVC_HD",
    XAVC_HD_INTRA_CBG: "XAVC_HD_INTRA_CBG",
};
const XavcSlowPal = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const XavcSpatialAdaptiveQuantization = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const XavcTemporalAdaptiveQuantization = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const Xavc4kIntraCbgProfileClass = {
    CLASS_100: "CLASS_100",
    CLASS_300: "CLASS_300",
    CLASS_480: "CLASS_480",
};
const Xavc4kIntraVbrProfileClass = {
    CLASS_100: "CLASS_100",
    CLASS_300: "CLASS_300",
    CLASS_480: "CLASS_480",
};
const Xavc4kProfileBitrateClass = {
    BITRATE_CLASS_100: "BITRATE_CLASS_100",
    BITRATE_CLASS_140: "BITRATE_CLASS_140",
    BITRATE_CLASS_200: "BITRATE_CLASS_200",
};
const Xavc4kProfileCodecProfile = {
    HIGH: "HIGH",
    HIGH_422: "HIGH_422",
};
const XavcFlickerAdaptiveQuantization = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const XavcGopBReference = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const Xavc4kProfileQualityTuningLevel = {
    MULTI_PASS_HQ: "MULTI_PASS_HQ",
    SINGLE_PASS: "SINGLE_PASS",
    SINGLE_PASS_HQ: "SINGLE_PASS_HQ",
};
const XavcHdIntraCbgProfileClass = {
    CLASS_100: "CLASS_100",
    CLASS_200: "CLASS_200",
    CLASS_50: "CLASS_50",
};
const XavcHdProfileBitrateClass = {
    BITRATE_CLASS_25: "BITRATE_CLASS_25",
    BITRATE_CLASS_35: "BITRATE_CLASS_35",
    BITRATE_CLASS_50: "BITRATE_CLASS_50",
};
const XavcInterlaceMode = {
    BOTTOM_FIELD: "BOTTOM_FIELD",
    FOLLOW_BOTTOM_FIELD: "FOLLOW_BOTTOM_FIELD",
    FOLLOW_TOP_FIELD: "FOLLOW_TOP_FIELD",
    PROGRESSIVE: "PROGRESSIVE",
    TOP_FIELD: "TOP_FIELD",
};
const XavcHdProfileQualityTuningLevel = {
    MULTI_PASS_HQ: "MULTI_PASS_HQ",
    SINGLE_PASS: "SINGLE_PASS",
    SINGLE_PASS_HQ: "SINGLE_PASS_HQ",
};
const XavcHdProfileTelecine = {
    HARD: "HARD",
    NONE: "NONE",
};
const ColorMetadata = {
    IGNORE: "IGNORE",
    INSERT: "INSERT",
};
const DropFrameTimecode = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const RespondToAfd = {
    NONE: "NONE",
    PASSTHROUGH: "PASSTHROUGH",
    RESPOND: "RESPOND",
};
const ScalingBehavior = {
    DEFAULT: "DEFAULT",
    FILL: "FILL",
    FIT: "FIT",
    FIT_NO_UPSCALE: "FIT_NO_UPSCALE",
    STRETCH_TO_OUTPUT: "STRETCH_TO_OUTPUT",
};
const VideoTimecodeInsertion = {
    DISABLED: "DISABLED",
    PIC_TIMING_SEI: "PIC_TIMING_SEI",
};
const TimecodeTrack = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const ColorSpaceConversion = {
    FORCE_601: "FORCE_601",
    FORCE_709: "FORCE_709",
    FORCE_HDR10: "FORCE_HDR10",
    FORCE_HLG_2020: "FORCE_HLG_2020",
    FORCE_P3D65_HDR: "FORCE_P3D65_HDR",
    FORCE_P3D65_SDR: "FORCE_P3D65_SDR",
    FORCE_P3DCI: "FORCE_P3DCI",
    NONE: "NONE",
};
const HDRToSDRToneMapper = {
    PRESERVE_DETAILS: "PRESERVE_DETAILS",
    VIBRANT: "VIBRANT",
};
const SampleRangeConversion = {
    LIMITED_RANGE_CLIP: "LIMITED_RANGE_CLIP",
    LIMITED_RANGE_SQUEEZE: "LIMITED_RANGE_SQUEEZE",
    NONE: "NONE",
};
const DeinterlaceAlgorithm = {
    BLEND: "BLEND",
    BLEND_TICKER: "BLEND_TICKER",
    INTERPOLATE: "INTERPOLATE",
    INTERPOLATE_TICKER: "INTERPOLATE_TICKER",
    LINEAR_INTERPOLATION: "LINEAR_INTERPOLATION",
};
const DeinterlacerControl = {
    FORCE_ALL_FRAMES: "FORCE_ALL_FRAMES",
    NORMAL: "NORMAL",
};
const DeinterlacerMode = {
    ADAPTIVE: "ADAPTIVE",
    DEINTERLACE: "DEINTERLACE",
    INVERSE_TELECINE: "INVERSE_TELECINE",
};
const DolbyVisionLevel6Mode = {
    PASSTHROUGH: "PASSTHROUGH",
    RECALCULATE: "RECALCULATE",
    SPECIFY: "SPECIFY",
};
const DolbyVisionMapping = {
    HDR10_1000: "HDR10_1000",
    HDR10_NOMAP: "HDR10_NOMAP",
};
const DolbyVisionProfile = {
    PROFILE_5: "PROFILE_5",
    PROFILE_8_1: "PROFILE_8_1",
};
const NoiseReducerFilter = {
    BILATERAL: "BILATERAL",
    CONSERVE: "CONSERVE",
    GAUSSIAN: "GAUSSIAN",
    LANCZOS: "LANCZOS",
    MEAN: "MEAN",
    SHARPEN: "SHARPEN",
    SPATIAL: "SPATIAL",
    TEMPORAL: "TEMPORAL",
};
const NoiseFilterPostTemporalSharpening = {
    AUTO: "AUTO",
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const NoiseFilterPostTemporalSharpeningStrength = {
    HIGH: "HIGH",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
};
const WatermarkingStrength = {
    DEFAULT: "DEFAULT",
    LIGHTER: "LIGHTER",
    LIGHTEST: "LIGHTEST",
    STRONGER: "STRONGER",
    STRONGEST: "STRONGEST",
};
const TimecodeBurninPosition = {
    BOTTOM_CENTER: "BOTTOM_CENTER",
    BOTTOM_LEFT: "BOTTOM_LEFT",
    BOTTOM_RIGHT: "BOTTOM_RIGHT",
    MIDDLE_CENTER: "MIDDLE_CENTER",
    MIDDLE_LEFT: "MIDDLE_LEFT",
    MIDDLE_RIGHT: "MIDDLE_RIGHT",
    TOP_CENTER: "TOP_CENTER",
    TOP_LEFT: "TOP_LEFT",
    TOP_RIGHT: "TOP_RIGHT",
};
const TimecodeSource = {
    EMBEDDED: "EMBEDDED",
    SPECIFIEDSTART: "SPECIFIEDSTART",
    ZEROBASED: "ZEROBASED",
};

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.AacAudioDescriptionBroadcasterMix = AacAudioDescriptionBroadcasterMix;
exports.AacCodecProfile = AacCodecProfile;
exports.AacCodingMode = AacCodingMode;
exports.AacLoudnessMeasurementMode = AacLoudnessMeasurementMode;
exports.AacRateControlMode = AacRateControlMode;
exports.AacRawFormat = AacRawFormat;
exports.AacSpecification = AacSpecification;
exports.AacVbrQuality = AacVbrQuality;
exports.Ac3BitstreamMode = Ac3BitstreamMode;
exports.Ac3CodingMode = Ac3CodingMode;
exports.Ac3DynamicRangeCompressionLine = Ac3DynamicRangeCompressionLine;
exports.Ac3DynamicRangeCompressionProfile = Ac3DynamicRangeCompressionProfile;
exports.Ac3DynamicRangeCompressionRf = Ac3DynamicRangeCompressionRf;
exports.Ac3LfeFilter = Ac3LfeFilter;
exports.Ac3MetadataControl = Ac3MetadataControl;
exports.AccelerationMode = AccelerationMode;
exports.AccelerationStatus = AccelerationStatus;
exports.AdvancedInputFilter = AdvancedInputFilter;
exports.AdvancedInputFilterAddTexture = AdvancedInputFilterAddTexture;
exports.AdvancedInputFilterSharpen = AdvancedInputFilterSharpen;
exports.AfdSignaling = AfdSignaling;
exports.AlphaBehavior = AlphaBehavior;
exports.AncillaryConvert608To708 = AncillaryConvert608To708;
exports.AncillaryTerminateCaptions = AncillaryTerminateCaptions;
exports.AntiAlias = AntiAlias;
exports.AssociateCertificateCommand = AssociateCertificateCommand;
exports.AudioChannelTag = AudioChannelTag;
exports.AudioCodec = AudioCodec;
exports.AudioDefaultSelection = AudioDefaultSelection;
exports.AudioDurationCorrection = AudioDurationCorrection;
exports.AudioLanguageCodeControl = AudioLanguageCodeControl;
exports.AudioNormalizationAlgorithm = AudioNormalizationAlgorithm;
exports.AudioNormalizationAlgorithmControl = AudioNormalizationAlgorithmControl;
exports.AudioNormalizationLoudnessLogging = AudioNormalizationLoudnessLogging;
exports.AudioNormalizationPeakCalculation = AudioNormalizationPeakCalculation;
exports.AudioSelectorType = AudioSelectorType;
exports.AudioTypeControl = AudioTypeControl;
exports.Av1AdaptiveQuantization = Av1AdaptiveQuantization;
exports.Av1BitDepth = Av1BitDepth;
exports.Av1FilmGrainSynthesis = Av1FilmGrainSynthesis;
exports.Av1FramerateControl = Av1FramerateControl;
exports.Av1FramerateConversionAlgorithm = Av1FramerateConversionAlgorithm;
exports.Av1RateControlMode = Av1RateControlMode;
exports.Av1SpatialAdaptiveQuantization = Av1SpatialAdaptiveQuantization;
exports.AvcIntraClass = AvcIntraClass;
exports.AvcIntraFramerateControl = AvcIntraFramerateControl;
exports.AvcIntraFramerateConversionAlgorithm = AvcIntraFramerateConversionAlgorithm;
exports.AvcIntraInterlaceMode = AvcIntraInterlaceMode;
exports.AvcIntraScanTypeConversionMode = AvcIntraScanTypeConversionMode;
exports.AvcIntraSlowPal = AvcIntraSlowPal;
exports.AvcIntraTelecine = AvcIntraTelecine;
exports.AvcIntraUhdQualityTuningLevel = AvcIntraUhdQualityTuningLevel;
exports.BadRequestException = BadRequestException;
exports.BandwidthReductionFilterSharpening = BandwidthReductionFilterSharpening;
exports.BandwidthReductionFilterStrength = BandwidthReductionFilterStrength;
exports.BillingTagsSource = BillingTagsSource;
exports.BurnInSubtitleStylePassthrough = BurnInSubtitleStylePassthrough;
exports.BurninSubtitleAlignment = BurninSubtitleAlignment;
exports.BurninSubtitleApplyFontColor = BurninSubtitleApplyFontColor;
exports.BurninSubtitleBackgroundColor = BurninSubtitleBackgroundColor;
exports.BurninSubtitleFallbackFont = BurninSubtitleFallbackFont;
exports.BurninSubtitleFontColor = BurninSubtitleFontColor;
exports.BurninSubtitleOutlineColor = BurninSubtitleOutlineColor;
exports.BurninSubtitleShadowColor = BurninSubtitleShadowColor;
exports.BurninSubtitleTeletextSpacing = BurninSubtitleTeletextSpacing;
exports.CancelJobCommand = CancelJobCommand;
exports.CaptionDestinationType = CaptionDestinationType;
exports.CaptionSourceByteRateLimit = CaptionSourceByteRateLimit;
exports.CaptionSourceConvertPaintOnToPopOn = CaptionSourceConvertPaintOnToPopOn;
exports.CaptionSourceType = CaptionSourceType;
exports.CaptionSourceUpconvertSTLToTeletext = CaptionSourceUpconvertSTLToTeletext;
exports.ChromaPositionMode = ChromaPositionMode;
exports.CmafClientCache = CmafClientCache;
exports.CmafCodecSpecification = CmafCodecSpecification;
exports.CmafEncryptionType = CmafEncryptionType;
exports.CmafImageBasedTrickPlay = CmafImageBasedTrickPlay;
exports.CmafInitializationVectorInManifest = CmafInitializationVectorInManifest;
exports.CmafIntervalCadence = CmafIntervalCadence;
exports.CmafKeyProviderType = CmafKeyProviderType;
exports.CmafManifestCompression = CmafManifestCompression;
exports.CmafManifestDurationFormat = CmafManifestDurationFormat;
exports.CmafMpdManifestBandwidthType = CmafMpdManifestBandwidthType;
exports.CmafMpdProfile = CmafMpdProfile;
exports.CmafPtsOffsetHandlingForBFrames = CmafPtsOffsetHandlingForBFrames;
exports.CmafSegmentControl = CmafSegmentControl;
exports.CmafSegmentLengthControl = CmafSegmentLengthControl;
exports.CmafStreamInfResolution = CmafStreamInfResolution;
exports.CmafTargetDurationCompatibilityMode = CmafTargetDurationCompatibilityMode;
exports.CmafVideoCompositionOffsets = CmafVideoCompositionOffsets;
exports.CmafWriteDASHManifest = CmafWriteDASHManifest;
exports.CmafWriteHLSManifest = CmafWriteHLSManifest;
exports.CmafWriteSegmentTimelineInRepresentation = CmafWriteSegmentTimelineInRepresentation;
exports.CmfcAudioDuration = CmfcAudioDuration;
exports.CmfcAudioTrackType = CmfcAudioTrackType;
exports.CmfcDescriptiveVideoServiceFlag = CmfcDescriptiveVideoServiceFlag;
exports.CmfcIFrameOnlyManifest = CmfcIFrameOnlyManifest;
exports.CmfcKlvMetadata = CmfcKlvMetadata;
exports.CmfcManifestMetadataSignaling = CmfcManifestMetadataSignaling;
exports.CmfcScte35Esam = CmfcScte35Esam;
exports.CmfcScte35Source = CmfcScte35Source;
exports.CmfcTimedMetadata = CmfcTimedMetadata;
exports.CmfcTimedMetadataBoxVersion = CmfcTimedMetadataBoxVersion;
exports.Codec = Codec;
exports.ColorMetadata = ColorMetadata;
exports.ColorPrimaries = ColorPrimaries;
exports.ColorSpace = ColorSpace;
exports.ColorSpaceConversion = ColorSpaceConversion;
exports.ColorSpaceUsage = ColorSpaceUsage;
exports.Commitment = Commitment;
exports.ConflictException = ConflictException;
exports.ContainerType = ContainerType;
exports.CopyProtectionAction = CopyProtectionAction;
exports.CreateJobCommand = CreateJobCommand;
exports.CreateJobTemplateCommand = CreateJobTemplateCommand;
exports.CreatePresetCommand = CreatePresetCommand;
exports.CreateQueueCommand = CreateQueueCommand;
exports.CreateResourceShareCommand = CreateResourceShareCommand;
exports.DashIsoGroupAudioChannelConfigSchemeIdUri = DashIsoGroupAudioChannelConfigSchemeIdUri;
exports.DashIsoHbbtvCompliance = DashIsoHbbtvCompliance;
exports.DashIsoImageBasedTrickPlay = DashIsoImageBasedTrickPlay;
exports.DashIsoIntervalCadence = DashIsoIntervalCadence;
exports.DashIsoMpdManifestBandwidthType = DashIsoMpdManifestBandwidthType;
exports.DashIsoMpdProfile = DashIsoMpdProfile;
exports.DashIsoPlaybackDeviceCompatibility = DashIsoPlaybackDeviceCompatibility;
exports.DashIsoPtsOffsetHandlingForBFrames = DashIsoPtsOffsetHandlingForBFrames;
exports.DashIsoSegmentControl = DashIsoSegmentControl;
exports.DashIsoSegmentLengthControl = DashIsoSegmentLengthControl;
exports.DashIsoVideoCompositionOffsets = DashIsoVideoCompositionOffsets;
exports.DashIsoWriteSegmentTimelineInRepresentation = DashIsoWriteSegmentTimelineInRepresentation;
exports.DashManifestStyle = DashManifestStyle;
exports.DecryptionMode = DecryptionMode;
exports.DeinterlaceAlgorithm = DeinterlaceAlgorithm;
exports.DeinterlacerControl = DeinterlacerControl;
exports.DeinterlacerMode = DeinterlacerMode;
exports.DeleteJobTemplateCommand = DeleteJobTemplateCommand;
exports.DeletePolicyCommand = DeletePolicyCommand;
exports.DeletePresetCommand = DeletePresetCommand;
exports.DeleteQueueCommand = DeleteQueueCommand;
exports.DescribeEndpointsCommand = DescribeEndpointsCommand;
exports.DescribeEndpointsMode = DescribeEndpointsMode;
exports.DisassociateCertificateCommand = DisassociateCertificateCommand;
exports.DolbyVisionLevel6Mode = DolbyVisionLevel6Mode;
exports.DolbyVisionMapping = DolbyVisionMapping;
exports.DolbyVisionProfile = DolbyVisionProfile;
exports.DropFrameTimecode = DropFrameTimecode;
exports.DvbSubSubtitleFallbackFont = DvbSubSubtitleFallbackFont;
exports.DvbSubtitleAlignment = DvbSubtitleAlignment;
exports.DvbSubtitleApplyFontColor = DvbSubtitleApplyFontColor;
exports.DvbSubtitleBackgroundColor = DvbSubtitleBackgroundColor;
exports.DvbSubtitleFontColor = DvbSubtitleFontColor;
exports.DvbSubtitleOutlineColor = DvbSubtitleOutlineColor;
exports.DvbSubtitleShadowColor = DvbSubtitleShadowColor;
exports.DvbSubtitleStylePassthrough = DvbSubtitleStylePassthrough;
exports.DvbSubtitleTeletextSpacing = DvbSubtitleTeletextSpacing;
exports.DvbSubtitlingType = DvbSubtitlingType;
exports.DvbddsHandling = DvbddsHandling;
exports.DynamicAudioSelectorType = DynamicAudioSelectorType;
exports.Eac3AtmosBitstreamMode = Eac3AtmosBitstreamMode;
exports.Eac3AtmosCodingMode = Eac3AtmosCodingMode;
exports.Eac3AtmosDialogueIntelligence = Eac3AtmosDialogueIntelligence;
exports.Eac3AtmosDownmixControl = Eac3AtmosDownmixControl;
exports.Eac3AtmosDynamicRangeCompressionLine = Eac3AtmosDynamicRangeCompressionLine;
exports.Eac3AtmosDynamicRangeCompressionRf = Eac3AtmosDynamicRangeCompressionRf;
exports.Eac3AtmosDynamicRangeControl = Eac3AtmosDynamicRangeControl;
exports.Eac3AtmosMeteringMode = Eac3AtmosMeteringMode;
exports.Eac3AtmosStereoDownmix = Eac3AtmosStereoDownmix;
exports.Eac3AtmosSurroundExMode = Eac3AtmosSurroundExMode;
exports.Eac3AttenuationControl = Eac3AttenuationControl;
exports.Eac3BitstreamMode = Eac3BitstreamMode;
exports.Eac3CodingMode = Eac3CodingMode;
exports.Eac3DcFilter = Eac3DcFilter;
exports.Eac3DynamicRangeCompressionLine = Eac3DynamicRangeCompressionLine;
exports.Eac3DynamicRangeCompressionRf = Eac3DynamicRangeCompressionRf;
exports.Eac3LfeControl = Eac3LfeControl;
exports.Eac3LfeFilter = Eac3LfeFilter;
exports.Eac3MetadataControl = Eac3MetadataControl;
exports.Eac3PassthroughControl = Eac3PassthroughControl;
exports.Eac3PhaseControl = Eac3PhaseControl;
exports.Eac3StereoDownmix = Eac3StereoDownmix;
exports.Eac3SurroundExMode = Eac3SurroundExMode;
exports.Eac3SurroundMode = Eac3SurroundMode;
exports.EmbeddedConvert608To708 = EmbeddedConvert608To708;
exports.EmbeddedTerminateCaptions = EmbeddedTerminateCaptions;
exports.EmbeddedTimecodeOverride = EmbeddedTimecodeOverride;
exports.F4vMoovPlacement = F4vMoovPlacement;
exports.FileSourceConvert608To708 = FileSourceConvert608To708;
exports.FileSourceTimeDeltaUnits = FileSourceTimeDeltaUnits;
exports.FontScript = FontScript;
exports.ForbiddenException = ForbiddenException;
exports.Format = Format;
exports.FrameMetricType = FrameMetricType;
exports.GetJobCommand = GetJobCommand;
exports.GetJobTemplateCommand = GetJobTemplateCommand;
exports.GetJobsQueryResultsCommand = GetJobsQueryResultsCommand;
exports.GetPolicyCommand = GetPolicyCommand;
exports.GetPresetCommand = GetPresetCommand;
exports.GetQueueCommand = GetQueueCommand;
exports.GifFramerateControl = GifFramerateControl;
exports.GifFramerateConversionAlgorithm = GifFramerateConversionAlgorithm;
exports.H264AdaptiveQuantization = H264AdaptiveQuantization;
exports.H264CodecLevel = H264CodecLevel;
exports.H264CodecProfile = H264CodecProfile;
exports.H264DynamicSubGop = H264DynamicSubGop;
exports.H264EndOfStreamMarkers = H264EndOfStreamMarkers;
exports.H264EntropyEncoding = H264EntropyEncoding;
exports.H264FieldEncoding = H264FieldEncoding;
exports.H264FlickerAdaptiveQuantization = H264FlickerAdaptiveQuantization;
exports.H264FramerateControl = H264FramerateControl;
exports.H264FramerateConversionAlgorithm = H264FramerateConversionAlgorithm;
exports.H264GopBReference = H264GopBReference;
exports.H264GopSizeUnits = H264GopSizeUnits;
exports.H264InterlaceMode = H264InterlaceMode;
exports.H264ParControl = H264ParControl;
exports.H264QualityTuningLevel = H264QualityTuningLevel;
exports.H264RateControlMode = H264RateControlMode;
exports.H264RepeatPps = H264RepeatPps;
exports.H264SaliencyAwareEncoding = H264SaliencyAwareEncoding;
exports.H264ScanTypeConversionMode = H264ScanTypeConversionMode;
exports.H264SceneChangeDetect = H264SceneChangeDetect;
exports.H264SlowPal = H264SlowPal;
exports.H264SpatialAdaptiveQuantization = H264SpatialAdaptiveQuantization;
exports.H264Syntax = H264Syntax;
exports.H264Telecine = H264Telecine;
exports.H264TemporalAdaptiveQuantization = H264TemporalAdaptiveQuantization;
exports.H264UnregisteredSeiTimecode = H264UnregisteredSeiTimecode;
exports.H264WriteMp4PackagingType = H264WriteMp4PackagingType;
exports.H265AdaptiveQuantization = H265AdaptiveQuantization;
exports.H265AlternateTransferFunctionSei = H265AlternateTransferFunctionSei;
exports.H265CodecLevel = H265CodecLevel;
exports.H265CodecProfile = H265CodecProfile;
exports.H265Deblocking = H265Deblocking;
exports.H265DynamicSubGop = H265DynamicSubGop;
exports.H265EndOfStreamMarkers = H265EndOfStreamMarkers;
exports.H265FlickerAdaptiveQuantization = H265FlickerAdaptiveQuantization;
exports.H265FramerateControl = H265FramerateControl;
exports.H265FramerateConversionAlgorithm = H265FramerateConversionAlgorithm;
exports.H265GopBReference = H265GopBReference;
exports.H265GopSizeUnits = H265GopSizeUnits;
exports.H265InterlaceMode = H265InterlaceMode;
exports.H265ParControl = H265ParControl;
exports.H265QualityTuningLevel = H265QualityTuningLevel;
exports.H265RateControlMode = H265RateControlMode;
exports.H265SampleAdaptiveOffsetFilterMode = H265SampleAdaptiveOffsetFilterMode;
exports.H265ScanTypeConversionMode = H265ScanTypeConversionMode;
exports.H265SceneChangeDetect = H265SceneChangeDetect;
exports.H265SlowPal = H265SlowPal;
exports.H265SpatialAdaptiveQuantization = H265SpatialAdaptiveQuantization;
exports.H265Telecine = H265Telecine;
exports.H265TemporalAdaptiveQuantization = H265TemporalAdaptiveQuantization;
exports.H265TemporalIds = H265TemporalIds;
exports.H265Tiles = H265Tiles;
exports.H265UnregisteredSeiTimecode = H265UnregisteredSeiTimecode;
exports.H265WriteMp4PackagingType = H265WriteMp4PackagingType;
exports.HDRToSDRToneMapper = HDRToSDRToneMapper;
exports.HlsAdMarkers = HlsAdMarkers;
exports.HlsAudioOnlyContainer = HlsAudioOnlyContainer;
exports.HlsAudioOnlyHeader = HlsAudioOnlyHeader;
exports.HlsAudioTrackType = HlsAudioTrackType;
exports.HlsCaptionLanguageSetting = HlsCaptionLanguageSetting;
exports.HlsCaptionSegmentLengthControl = HlsCaptionSegmentLengthControl;
exports.HlsClientCache = HlsClientCache;
exports.HlsCodecSpecification = HlsCodecSpecification;
exports.HlsDescriptiveVideoServiceFlag = HlsDescriptiveVideoServiceFlag;
exports.HlsDirectoryStructure = HlsDirectoryStructure;
exports.HlsEncryptionType = HlsEncryptionType;
exports.HlsIFrameOnlyManifest = HlsIFrameOnlyManifest;
exports.HlsImageBasedTrickPlay = HlsImageBasedTrickPlay;
exports.HlsInitializationVectorInManifest = HlsInitializationVectorInManifest;
exports.HlsIntervalCadence = HlsIntervalCadence;
exports.HlsKeyProviderType = HlsKeyProviderType;
exports.HlsManifestCompression = HlsManifestCompression;
exports.HlsManifestDurationFormat = HlsManifestDurationFormat;
exports.HlsOfflineEncrypted = HlsOfflineEncrypted;
exports.HlsOutputSelection = HlsOutputSelection;
exports.HlsProgramDateTime = HlsProgramDateTime;
exports.HlsProgressiveWriteHlsManifest = HlsProgressiveWriteHlsManifest;
exports.HlsSegmentControl = HlsSegmentControl;
exports.HlsSegmentLengthControl = HlsSegmentLengthControl;
exports.HlsStreamInfResolution = HlsStreamInfResolution;
exports.HlsTargetDurationCompatibilityMode = HlsTargetDurationCompatibilityMode;
exports.HlsTimedMetadataId3Frame = HlsTimedMetadataId3Frame;
exports.ImscAccessibilitySubs = ImscAccessibilitySubs;
exports.ImscStylePassthrough = ImscStylePassthrough;
exports.InputDeblockFilter = InputDeblockFilter;
exports.InputDenoiseFilter = InputDenoiseFilter;
exports.InputFilterEnable = InputFilterEnable;
exports.InputPolicy = InputPolicy;
exports.InputPsiControl = InputPsiControl;
exports.InputRotate = InputRotate;
exports.InputSampleRange = InputSampleRange;
exports.InputScanType = InputScanType;
exports.InputTimecodeSource = InputTimecodeSource;
exports.InternalServerErrorException = InternalServerErrorException;
exports.JobPhase = JobPhase;
exports.JobStatus = JobStatus;
exports.JobTemplateListBy = JobTemplateListBy;
exports.JobsQueryFilterKey = JobsQueryFilterKey;
exports.JobsQueryStatus = JobsQueryStatus;
exports.LanguageCode = LanguageCode;
exports.ListJobTemplatesCommand = ListJobTemplatesCommand;
exports.ListJobsCommand = ListJobsCommand;
exports.ListPresetsCommand = ListPresetsCommand;
exports.ListQueuesCommand = ListQueuesCommand;
exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
exports.ListVersionsCommand = ListVersionsCommand;
exports.M2tsAudioBufferModel = M2tsAudioBufferModel;
exports.M2tsAudioDuration = M2tsAudioDuration;
exports.M2tsBufferModel = M2tsBufferModel;
exports.M2tsDataPtsControl = M2tsDataPtsControl;
exports.M2tsEbpAudioInterval = M2tsEbpAudioInterval;
exports.M2tsEbpPlacement = M2tsEbpPlacement;
exports.M2tsEsRateInPes = M2tsEsRateInPes;
exports.M2tsForceTsVideoEbpOrder = M2tsForceTsVideoEbpOrder;
exports.M2tsKlvMetadata = M2tsKlvMetadata;
exports.M2tsNielsenId3 = M2tsNielsenId3;
exports.M2tsPcrControl = M2tsPcrControl;
exports.M2tsPreventBufferUnderflow = M2tsPreventBufferUnderflow;
exports.M2tsRateMode = M2tsRateMode;
exports.M2tsScte35Source = M2tsScte35Source;
exports.M2tsSegmentationMarkers = M2tsSegmentationMarkers;
exports.M2tsSegmentationStyle = M2tsSegmentationStyle;
exports.M3u8AudioDuration = M3u8AudioDuration;
exports.M3u8DataPtsControl = M3u8DataPtsControl;
exports.M3u8NielsenId3 = M3u8NielsenId3;
exports.M3u8PcrControl = M3u8PcrControl;
exports.M3u8Scte35Source = M3u8Scte35Source;
exports.MatrixCoefficients = MatrixCoefficients;
exports.MediaConvert = MediaConvert;
exports.MediaConvertClient = MediaConvertClient;
exports.MediaConvertServiceException = MediaConvertServiceException;
exports.MotionImageInsertionMode = MotionImageInsertionMode;
exports.MotionImagePlayback = MotionImagePlayback;
exports.MovClapAtom = MovClapAtom;
exports.MovCslgAtom = MovCslgAtom;
exports.MovMpeg2FourCCControl = MovMpeg2FourCCControl;
exports.MovPaddingControl = MovPaddingControl;
exports.MovReference = MovReference;
exports.Mp2AudioDescriptionMix = Mp2AudioDescriptionMix;
exports.Mp3RateControlMode = Mp3RateControlMode;
exports.Mp4C2paManifest = Mp4C2paManifest;
exports.Mp4CslgAtom = Mp4CslgAtom;
exports.Mp4FreeSpaceBox = Mp4FreeSpaceBox;
exports.Mp4MoovPlacement = Mp4MoovPlacement;
exports.MpdAccessibilityCaptionHints = MpdAccessibilityCaptionHints;
exports.MpdAudioDuration = MpdAudioDuration;
exports.MpdCaptionContainerType = MpdCaptionContainerType;
exports.MpdKlvMetadata = MpdKlvMetadata;
exports.MpdManifestMetadataSignaling = MpdManifestMetadataSignaling;
exports.MpdScte35Esam = MpdScte35Esam;
exports.MpdScte35Source = MpdScte35Source;
exports.MpdTimedMetadata = MpdTimedMetadata;
exports.MpdTimedMetadataBoxVersion = MpdTimedMetadataBoxVersion;
exports.Mpeg2AdaptiveQuantization = Mpeg2AdaptiveQuantization;
exports.Mpeg2CodecLevel = Mpeg2CodecLevel;
exports.Mpeg2CodecProfile = Mpeg2CodecProfile;
exports.Mpeg2DynamicSubGop = Mpeg2DynamicSubGop;
exports.Mpeg2FramerateControl = Mpeg2FramerateControl;
exports.Mpeg2FramerateConversionAlgorithm = Mpeg2FramerateConversionAlgorithm;
exports.Mpeg2GopSizeUnits = Mpeg2GopSizeUnits;
exports.Mpeg2InterlaceMode = Mpeg2InterlaceMode;
exports.Mpeg2IntraDcPrecision = Mpeg2IntraDcPrecision;
exports.Mpeg2ParControl = Mpeg2ParControl;
exports.Mpeg2QualityTuningLevel = Mpeg2QualityTuningLevel;
exports.Mpeg2RateControlMode = Mpeg2RateControlMode;
exports.Mpeg2ScanTypeConversionMode = Mpeg2ScanTypeConversionMode;
exports.Mpeg2SceneChangeDetect = Mpeg2SceneChangeDetect;
exports.Mpeg2SlowPal = Mpeg2SlowPal;
exports.Mpeg2SpatialAdaptiveQuantization = Mpeg2SpatialAdaptiveQuantization;
exports.Mpeg2Syntax = Mpeg2Syntax;
exports.Mpeg2Telecine = Mpeg2Telecine;
exports.Mpeg2TemporalAdaptiveQuantization = Mpeg2TemporalAdaptiveQuantization;
exports.MsSmoothAudioDeduplication = MsSmoothAudioDeduplication;
exports.MsSmoothFragmentLengthControl = MsSmoothFragmentLengthControl;
exports.MsSmoothManifestEncoding = MsSmoothManifestEncoding;
exports.MxfAfdSignaling = MxfAfdSignaling;
exports.MxfProfile = MxfProfile;
exports.MxfXavcDurationMode = MxfXavcDurationMode;
exports.NielsenActiveWatermarkProcessType = NielsenActiveWatermarkProcessType;
exports.NielsenSourceWatermarkStatusType = NielsenSourceWatermarkStatusType;
exports.NielsenUniqueTicPerAudioTrackType = NielsenUniqueTicPerAudioTrackType;
exports.NoiseFilterPostTemporalSharpening = NoiseFilterPostTemporalSharpening;
exports.NoiseFilterPostTemporalSharpeningStrength = NoiseFilterPostTemporalSharpeningStrength;
exports.NoiseReducerFilter = NoiseReducerFilter;
exports.NotFoundException = NotFoundException;
exports.Order = Order;
exports.OutputGroupType = OutputGroupType;
exports.OutputSdt = OutputSdt;
exports.PadVideo = PadVideo;
exports.PresetListBy = PresetListBy;
exports.PresetSpeke20Audio = PresetSpeke20Audio;
exports.PresetSpeke20Video = PresetSpeke20Video;
exports.PricingPlan = PricingPlan;
exports.ProbeCommand = ProbeCommand;
exports.ProresChromaSampling = ProresChromaSampling;
exports.ProresCodecProfile = ProresCodecProfile;
exports.ProresFramerateControl = ProresFramerateControl;
exports.ProresFramerateConversionAlgorithm = ProresFramerateConversionAlgorithm;
exports.ProresInterlaceMode = ProresInterlaceMode;
exports.ProresParControl = ProresParControl;
exports.ProresScanTypeConversionMode = ProresScanTypeConversionMode;
exports.ProresSlowPal = ProresSlowPal;
exports.ProresTelecine = ProresTelecine;
exports.PutPolicyCommand = PutPolicyCommand;
exports.QueueListBy = QueueListBy;
exports.QueueStatus = QueueStatus;
exports.RemoveRubyReserveAttributes = RemoveRubyReserveAttributes;
exports.RenewalType = RenewalType;
exports.RequiredFlag = RequiredFlag;
exports.ReservationPlanStatus = ReservationPlanStatus;
exports.RespondToAfd = RespondToAfd;
exports.RuleType = RuleType;
exports.S3ObjectCannedAcl = S3ObjectCannedAcl;
exports.S3ServerSideEncryptionType = S3ServerSideEncryptionType;
exports.S3StorageClass = S3StorageClass;
exports.SampleRangeConversion = SampleRangeConversion;
exports.ScalingBehavior = ScalingBehavior;
exports.SccDestinationFramerate = SccDestinationFramerate;
exports.SearchJobsCommand = SearchJobsCommand;
exports.ServiceQuotaExceededException = ServiceQuotaExceededException;
exports.ShareStatus = ShareStatus;
exports.SimulateReservedQueue = SimulateReservedQueue;
exports.SrtStylePassthrough = SrtStylePassthrough;
exports.StartJobsQueryCommand = StartJobsQueryCommand;
exports.StatusUpdateInterval = StatusUpdateInterval;
exports.TagResourceCommand = TagResourceCommand;
exports.TamsGapHandling = TamsGapHandling;
exports.TeletextPageType = TeletextPageType;
exports.TimecodeBurninPosition = TimecodeBurninPosition;
exports.TimecodeSource = TimecodeSource;
exports.TimecodeTrack = TimecodeTrack;
exports.TimedMetadata = TimedMetadata;
exports.TooManyRequestsException = TooManyRequestsException;
exports.TrackType = TrackType;
exports.TransferCharacteristics = TransferCharacteristics;
exports.TsPtsOffset = TsPtsOffset;
exports.TtmlStylePassthrough = TtmlStylePassthrough;
exports.Type = Type;
exports.UncompressedFourcc = UncompressedFourcc;
exports.UncompressedFramerateControl = UncompressedFramerateControl;
exports.UncompressedFramerateConversionAlgorithm = UncompressedFramerateConversionAlgorithm;
exports.UncompressedInterlaceMode = UncompressedInterlaceMode;
exports.UncompressedScanTypeConversionMode = UncompressedScanTypeConversionMode;
exports.UncompressedSlowPal = UncompressedSlowPal;
exports.UncompressedTelecine = UncompressedTelecine;
exports.UntagResourceCommand = UntagResourceCommand;
exports.UpdateJobTemplateCommand = UpdateJobTemplateCommand;
exports.UpdatePresetCommand = UpdatePresetCommand;
exports.UpdateQueueCommand = UpdateQueueCommand;
exports.Vc3Class = Vc3Class;
exports.Vc3FramerateControl = Vc3FramerateControl;
exports.Vc3FramerateConversionAlgorithm = Vc3FramerateConversionAlgorithm;
exports.Vc3InterlaceMode = Vc3InterlaceMode;
exports.Vc3ScanTypeConversionMode = Vc3ScanTypeConversionMode;
exports.Vc3SlowPal = Vc3SlowPal;
exports.Vc3Telecine = Vc3Telecine;
exports.VchipAction = VchipAction;
exports.VideoCodec = VideoCodec;
exports.VideoOverlayPlayBackMode = VideoOverlayPlayBackMode;
exports.VideoOverlayUnit = VideoOverlayUnit;
exports.VideoSelectorType = VideoSelectorType;
exports.VideoTimecodeInsertion = VideoTimecodeInsertion;
exports.Vp8FramerateControl = Vp8FramerateControl;
exports.Vp8FramerateConversionAlgorithm = Vp8FramerateConversionAlgorithm;
exports.Vp8ParControl = Vp8ParControl;
exports.Vp8QualityTuningLevel = Vp8QualityTuningLevel;
exports.Vp8RateControlMode = Vp8RateControlMode;
exports.Vp9FramerateControl = Vp9FramerateControl;
exports.Vp9FramerateConversionAlgorithm = Vp9FramerateConversionAlgorithm;
exports.Vp9ParControl = Vp9ParControl;
exports.Vp9QualityTuningLevel = Vp9QualityTuningLevel;
exports.Vp9RateControlMode = Vp9RateControlMode;
exports.WatermarkingStrength = WatermarkingStrength;
exports.WavFormat = WavFormat;
exports.WebvttAccessibilitySubs = WebvttAccessibilitySubs;
exports.WebvttStylePassthrough = WebvttStylePassthrough;
exports.Xavc4kIntraCbgProfileClass = Xavc4kIntraCbgProfileClass;
exports.Xavc4kIntraVbrProfileClass = Xavc4kIntraVbrProfileClass;
exports.Xavc4kProfileBitrateClass = Xavc4kProfileBitrateClass;
exports.Xavc4kProfileCodecProfile = Xavc4kProfileCodecProfile;
exports.Xavc4kProfileQualityTuningLevel = Xavc4kProfileQualityTuningLevel;
exports.XavcAdaptiveQuantization = XavcAdaptiveQuantization;
exports.XavcEntropyEncoding = XavcEntropyEncoding;
exports.XavcFlickerAdaptiveQuantization = XavcFlickerAdaptiveQuantization;
exports.XavcFramerateControl = XavcFramerateControl;
exports.XavcFramerateConversionAlgorithm = XavcFramerateConversionAlgorithm;
exports.XavcGopBReference = XavcGopBReference;
exports.XavcHdIntraCbgProfileClass = XavcHdIntraCbgProfileClass;
exports.XavcHdProfileBitrateClass = XavcHdProfileBitrateClass;
exports.XavcHdProfileQualityTuningLevel = XavcHdProfileQualityTuningLevel;
exports.XavcHdProfileTelecine = XavcHdProfileTelecine;
exports.XavcInterlaceMode = XavcInterlaceMode;
exports.XavcProfile = XavcProfile;
exports.XavcSlowPal = XavcSlowPal;
exports.XavcSpatialAdaptiveQuantization = XavcSpatialAdaptiveQuantization;
exports.XavcTemporalAdaptiveQuantization = XavcTemporalAdaptiveQuantization;
exports.paginateDescribeEndpoints = paginateDescribeEndpoints;
exports.paginateListJobTemplates = paginateListJobTemplates;
exports.paginateListJobs = paginateListJobs;
exports.paginateListPresets = paginateListPresets;
exports.paginateListQueues = paginateListQueues;
exports.paginateListVersions = paginateListVersions;
exports.paginateSearchJobs = paginateSearchJobs;
